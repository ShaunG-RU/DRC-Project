
DRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b608  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800b7e0  0800b7e0  0000c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8a0  0800b8a0  0000d0e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8a0  0800b8a0  0000d0e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8a0  0800b8a0  0000d0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a0  0800b8a0  0000c8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8a4  0800b8a4  0000c8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800b8a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001130  200000e0  0800b988  0000d0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  0800b988  0000d210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f18d  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045e9  00000000  00000000  0002c29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  00030888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ba  00000000  00000000  000324f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267ac  00000000  00000000  00033ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000223b8  00000000  00000000  0005a25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5c66  00000000  00000000  0007c616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017227c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007870  00000000  00000000  001722c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00179b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b7c8 	.word	0x0800b7c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	0800b7c8 	.word	0x0800b7c8

08000218 <HAL_TIM_PeriodElapsedCallback>:
  uint16_t tim_ct_3;
  int16_t enc_vel_4;
  int32_t enc_pos_4;
  uint16_t tim_ct_4;

  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	  tim_ct_1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000226:	b29a      	uxth	r2, r3
 8000228:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800022a:	801a      	strh	r2, [r3, #0]
	  tim_ct_2 = __HAL_TIM_GET_COUNTER(&htim3);
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000232:	b29a      	uxth	r2, r3
 8000234:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000236:	801a      	strh	r2, [r3, #0]
	  tim_ct_3 = __HAL_TIM_GET_COUNTER(&htim5);
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800023e:	b29a      	uxth	r2, r3
 8000240:	4b0b      	ldr	r3, [pc, #44]	@ (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000242:	801a      	strh	r2, [r3, #0]
	  tim_ct_4 = __HAL_TIM_GET_COUNTER(&htim8);
 8000244:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800024e:	801a      	strh	r2, [r3, #0]
  }
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	20000400 	.word	0x20000400
 8000260:	20000530 	.word	0x20000530
 8000264:	2000044c 	.word	0x2000044c
 8000268:	20000532 	.word	0x20000532
 800026c:	20000498 	.word	0x20000498
 8000270:	20000534 	.word	0x20000534
 8000274:	200004e4 	.word	0x200004e4
 8000278:	20000536 	.word	0x20000536

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f001 fac3 	bl	800180a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f826 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 fd22 	bl	8000cd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800028c:	f000 f86e 	bl	800036c <MX_ADC1_Init>
  MX_ADC4_Init();
 8000290:	f000 f9c2 	bl	8000618 <MX_ADC4_Init>
  MX_DAC1_Init();
 8000294:	f000 fa3a 	bl	800070c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000298:	f000 fa72 	bl	8000780 <MX_DAC2_Init>
  MX_DAC3_Init();
 800029c:	f000 faaa 	bl	80007f4 <MX_DAC3_Init>
  MX_DAC4_Init();
 80002a0:	f000 fae2 	bl	8000868 <MX_DAC4_Init>
  MX_USB_Device_Init();
 80002a4:	f00a fe0a 	bl	800aebc <MX_USB_Device_Init>
  MX_ADC2_Init();
 80002a8:	f000 f8d8 	bl	800045c <MX_ADC2_Init>
  MX_ADC3_Init();
 80002ac:	f000 f93c 	bl	8000528 <MX_ADC3_Init>
  MX_OPAMP1_Init();
 80002b0:	f000 fb14 	bl	80008dc <MX_OPAMP1_Init>
  MX_OPAMP4_Init();
 80002b4:	f000 fb38 	bl	8000928 <MX_OPAMP4_Init>
  MX_TIM1_Init();
 80002b8:	f000 fb9a 	bl	80009f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80002bc:	f000 fbf6 	bl	8000aac <MX_TIM3_Init>
  MX_TIM8_Init();
 80002c0:	f000 fca8 	bl	8000c14 <MX_TIM8_Init>
  MX_TIM5_Init();
 80002c4:	f000 fc4c 	bl	8000b60 <MX_TIM5_Init>
  MX_SPI2_Init();
 80002c8:	f000 fb54 	bl	8000974 <MX_SPI2_Init>
  MX_CORDIC_Init();
 80002cc:	f000 fa0a 	bl	80006e4 <MX_CORDIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <main+0x54>

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b094      	sub	sp, #80	@ 0x50
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2238      	movs	r2, #56	@ 0x38
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f00b fa44 	bl	800b770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002fa:	f004 ff31 	bl	8005160 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80002fe:	2321      	movs	r3, #33	@ 0x21
 8000300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000306:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	2303      	movs	r3, #3
 8000312:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000318:	234b      	movs	r3, #75	@ 0x4b
 800031a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800031c:	2302      	movs	r3, #2
 800031e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000320:	2304      	movs	r3, #4
 8000322:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000324:	2302      	movs	r3, #2
 8000326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0318 	add.w	r3, r7, #24
 800032c:	4618      	mov	r0, r3
 800032e:	f005 f825 	bl	800537c <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000338:	f000 fd9c 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2303      	movs	r3, #3
 8000342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2104      	movs	r1, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f005 fb23 	bl	80059a0 <HAL_RCC_ClockConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000360:	f000 fd88 	bl	8000e74 <Error_Handler>
  }
}
 8000364:	bf00      	nop
 8000366:	3750      	adds	r7, #80	@ 0x50
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08c      	sub	sp, #48	@ 0x30
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2220      	movs	r2, #32
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f00b f9f3 	bl	800b770 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <MX_ADC1_Init+0xe8>)
 800038c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000392:	4b30      	ldr	r3, [pc, #192]	@ (8000454 <MX_ADC1_Init+0xe8>)
 8000394:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000398:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <MX_ADC1_Init+0xe8>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ac:	4b29      	ldr	r3, [pc, #164]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b2:	4b28      	ldr	r3, [pc, #160]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003be:	4b25      	ldr	r3, [pc, #148]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003c4:	4b23      	ldr	r3, [pc, #140]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ca:	4b22      	ldr	r3, [pc, #136]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d2:	4b20      	ldr	r3, [pc, #128]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003de:	4b1d      	ldr	r3, [pc, #116]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003ec:	4b19      	ldr	r3, [pc, #100]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f4:	4817      	ldr	r0, [pc, #92]	@ (8000454 <MX_ADC1_Init+0xe8>)
 80003f6:	f001 fc71 	bl	8001cdc <HAL_ADC_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000400:	f000 fd38 	bl	8000e74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000404:	2300      	movs	r3, #0
 8000406:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040c:	4619      	mov	r1, r3
 800040e:	4811      	ldr	r0, [pc, #68]	@ (8000454 <MX_ADC1_Init+0xe8>)
 8000410:	f002 fa86 	bl	8002920 <HAL_ADCEx_MultiModeConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800041a:	f000 fd2b 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_ADC1_Init+0xec>)
 8000420:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000422:	2306      	movs	r3, #6
 8000424:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042a:	237f      	movs	r3, #127	@ 0x7f
 800042c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042e:	2304      	movs	r3, #4
 8000430:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	@ (8000454 <MX_ADC1_Init+0xe8>)
 800043c:	f001 fe0a 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000446:	f000 fd15 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3730      	adds	r7, #48	@ 0x30
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000fc 	.word	0x200000fc
 8000458:	04300002 	.word	0x04300002

0800045c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000462:	463b      	mov	r3, r7
 8000464:	2220      	movs	r2, #32
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f00b f981 	bl	800b770 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800046e:	4b2b      	ldr	r3, [pc, #172]	@ (800051c <MX_ADC2_Init+0xc0>)
 8000470:	4a2b      	ldr	r2, [pc, #172]	@ (8000520 <MX_ADC2_Init+0xc4>)
 8000472:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000474:	4b29      	ldr	r3, [pc, #164]	@ (800051c <MX_ADC2_Init+0xc0>)
 8000476:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800047a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800047c:	4b27      	ldr	r3, [pc, #156]	@ (800051c <MX_ADC2_Init+0xc0>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000482:	4b26      	ldr	r3, [pc, #152]	@ (800051c <MX_ADC2_Init+0xc0>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000488:	4b24      	ldr	r3, [pc, #144]	@ (800051c <MX_ADC2_Init+0xc0>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800048e:	4b23      	ldr	r3, [pc, #140]	@ (800051c <MX_ADC2_Init+0xc0>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000494:	4b21      	ldr	r3, [pc, #132]	@ (800051c <MX_ADC2_Init+0xc0>)
 8000496:	2204      	movs	r2, #4
 8000498:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800049a:	4b20      	ldr	r3, [pc, #128]	@ (800051c <MX_ADC2_Init+0xc0>)
 800049c:	2200      	movs	r2, #0
 800049e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004a0:	4b1e      	ldr	r3, [pc, #120]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80004a6:	4b1d      	ldr	r3, [pc, #116]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ba:	4b18      	ldr	r3, [pc, #96]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004c0:	4b16      	ldr	r3, [pc, #88]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004c8:	4b14      	ldr	r3, [pc, #80]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004ce:	4b13      	ldr	r3, [pc, #76]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004d6:	4811      	ldr	r0, [pc, #68]	@ (800051c <MX_ADC2_Init+0xc0>)
 80004d8:	f001 fc00 	bl	8001cdc <HAL_ADC_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80004e2:	f000 fcc7 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <MX_ADC2_Init+0xc8>)
 80004e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ea:	2306      	movs	r3, #6
 80004ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f2:	237f      	movs	r3, #127	@ 0x7f
 80004f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004f6:	2304      	movs	r3, #4
 80004f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004fe:	463b      	mov	r3, r7
 8000500:	4619      	mov	r1, r3
 8000502:	4806      	ldr	r0, [pc, #24]	@ (800051c <MX_ADC2_Init+0xc0>)
 8000504:	f001 fda6 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800050e:	f000 fcb1 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000168 	.word	0x20000168
 8000520:	50000100 	.word	0x50000100
 8000524:	10c00010 	.word	0x10c00010

08000528 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	@ 0x30
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800052e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2220      	movs	r2, #32
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f00b f915 	bl	800b770 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000546:	4b31      	ldr	r3, [pc, #196]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000548:	4a31      	ldr	r2, [pc, #196]	@ (8000610 <MX_ADC3_Init+0xe8>)
 800054a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800054c:	4b2f      	ldr	r3, [pc, #188]	@ (800060c <MX_ADC3_Init+0xe4>)
 800054e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000552:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000554:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <MX_ADC3_Init+0xe4>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000566:	4b29      	ldr	r3, [pc, #164]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056c:	4b27      	ldr	r3, [pc, #156]	@ (800060c <MX_ADC3_Init+0xe4>)
 800056e:	2204      	movs	r2, #4
 8000570:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000578:	4b24      	ldr	r3, [pc, #144]	@ (800060c <MX_ADC3_Init+0xe4>)
 800057a:	2200      	movs	r2, #0
 800057c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800057e:	4b23      	ldr	r3, [pc, #140]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000580:	2201      	movs	r2, #1
 8000582:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000586:	2200      	movs	r2, #0
 8000588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <MX_ADC3_Init+0xe4>)
 800058e:	2200      	movs	r2, #0
 8000590:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <MX_ADC3_Init+0xe4>)
 8000594:	2200      	movs	r2, #0
 8000596:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000598:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <MX_ADC3_Init+0xe4>)
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <MX_ADC3_Init+0xe4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <MX_ADC3_Init+0xe4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005ae:	4817      	ldr	r0, [pc, #92]	@ (800060c <MX_ADC3_Init+0xe4>)
 80005b0:	f001 fb94 	bl	8001cdc <HAL_ADC_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80005ba:	f000 fc5b 	bl	8000e74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80005c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c6:	4619      	mov	r1, r3
 80005c8:	4810      	ldr	r0, [pc, #64]	@ (800060c <MX_ADC3_Init+0xe4>)
 80005ca:	f002 f9a9 	bl	8002920 <HAL_ADCEx_MultiModeConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80005d4:	f000 fc4e 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_ADC3_Init+0xec>)
 80005da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005dc:	2306      	movs	r3, #6
 80005de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e4:	237f      	movs	r3, #127	@ 0x7f
 80005e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e8:	2304      	movs	r3, #4
 80005ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_ADC3_Init+0xe4>)
 80005f6:	f001 fd2d 	bl	8002054 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000600:	f000 fc38 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3730      	adds	r7, #48	@ 0x30
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200001d4 	.word	0x200001d4
 8000610:	50000400 	.word	0x50000400
 8000614:	04300002 	.word	0x04300002

08000618 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f00b f8a3 	bl	800b770 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 800062c:	4a2b      	ldr	r2, [pc, #172]	@ (80006dc <MX_ADC4_Init+0xc4>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000632:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000636:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000652:	2204      	movs	r2, #4
 8000654:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000664:	2201      	movs	r2, #1
 8000666:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000692:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 8000694:	f001 fb22 	bl	8001cdc <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800069e:	f000 fbe9 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_ADC4_Init+0xc8>)
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	@ 0x7f
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <MX_ADC4_Init+0xc0>)
 80006c0:	f001 fcc8 	bl	8002054 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80006ca:	f000 fbd3 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000240 	.word	0x20000240
 80006dc:	50000500 	.word	0x50000500
 80006e0:	10c00010 	.word	0x10c00010

080006e4 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_CORDIC_Init+0x20>)
 80006ea:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <MX_CORDIC_Init+0x24>)
 80006ec:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_CORDIC_Init+0x20>)
 80006f0:	f002 fa1e 	bl	8002b30 <HAL_CORDIC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80006fa:	f000 fbbb 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200002ac 	.word	0x200002ac
 8000708:	40020c00 	.word	0x40020c00

0800070c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	@ 0x30
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2230      	movs	r2, #48	@ 0x30
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00b f829 	bl	800b770 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_DAC1_Init+0x6c>)
 8000720:	4a16      	ldr	r2, [pc, #88]	@ (800077c <MX_DAC1_Init+0x70>)
 8000722:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000724:	4814      	ldr	r0, [pc, #80]	@ (8000778 <MX_DAC1_Init+0x6c>)
 8000726:	f002 fb44 	bl	8002db2 <HAL_DAC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000730:	f000 fba0 	bl	8000e74 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000734:	2302      	movs	r3, #2
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	@ (8000778 <MX_DAC1_Init+0x6c>)
 8000760:	f002 fb4a 	bl	8002df8 <HAL_DAC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800076a:	f000 fb83 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3730      	adds	r7, #48	@ 0x30
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200002d4 	.word	0x200002d4
 800077c:	50000800 	.word	0x50000800

08000780 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2230      	movs	r2, #48	@ 0x30
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f00a ffef 	bl	800b770 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_DAC2_Init+0x6c>)
 8000794:	4a16      	ldr	r2, [pc, #88]	@ (80007f0 <MX_DAC2_Init+0x70>)
 8000796:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000798:	4814      	ldr	r0, [pc, #80]	@ (80007ec <MX_DAC2_Init+0x6c>)
 800079a:	f002 fb0a 	bl	8002db2 <HAL_DAC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80007a4:	f000 fb66 	bl	8000e74 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007a8:	2302      	movs	r3, #2
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <MX_DAC2_Init+0x6c>)
 80007d4:	f002 fb10 	bl	8002df8 <HAL_DAC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80007de:	f000 fb49 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3730      	adds	r7, #48	@ 0x30
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200002e8 	.word	0x200002e8
 80007f0:	50000c00 	.word	0x50000c00

080007f4 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	@ 0x30
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2230      	movs	r2, #48	@ 0x30
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f00a ffb5 	bl	800b770 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_DAC3_Init+0x6c>)
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <MX_DAC3_Init+0x70>)
 800080a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800080c:	4814      	ldr	r0, [pc, #80]	@ (8000860 <MX_DAC3_Init+0x6c>)
 800080e:	f002 fad0 	bl	8002db2 <HAL_DAC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000818:	f000 fb2c 	bl	8000e74 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800081c:	2302      	movs	r3, #2
 800081e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000834:	2302      	movs	r3, #2
 8000836:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_DAC3_Init+0x6c>)
 8000848:	f002 fad6 	bl	8002df8 <HAL_DAC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000852:	f000 fb0f 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3730      	adds	r7, #48	@ 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002fc 	.word	0x200002fc
 8000864:	50001000 	.word	0x50001000

08000868 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2230      	movs	r2, #48	@ 0x30
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f00a ff7b 	bl	800b770 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_DAC4_Init+0x6c>)
 800087c:	4a16      	ldr	r2, [pc, #88]	@ (80008d8 <MX_DAC4_Init+0x70>)
 800087e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000880:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_DAC4_Init+0x6c>)
 8000882:	f002 fa96 	bl	8002db2 <HAL_DAC_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 800088c:	f000 faf2 	bl	8000e74 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000890:	2302      	movs	r3, #2
 8000892:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_DAC4_Init+0x6c>)
 80008bc:	f002 fa9c 	bl	8002df8 <HAL_DAC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 80008c6:	f000 fad5 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	@ 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000310 	.word	0x20000310
 80008d8:	50001400 	.word	0x50001400

080008dc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <MX_OPAMP1_Init+0x48>)
 80008e4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 80008ee:	2260      	movs	r2, #96	@ 0x60
 80008f0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 80008f4:	220c      	movs	r2, #12
 80008f6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_OPAMP1_Init+0x44>)
 800090c:	f002 fdea 	bl	80034e4 <HAL_OPAMP_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000916:	f000 faad 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000324 	.word	0x20000324
 8000924:	40010300 	.word	0x40010300

08000928 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_OPAMP4_Init+0x44>)
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <MX_OPAMP4_Init+0x48>)
 8000930:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_OPAMP4_Init+0x44>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_OPAMP4_Init+0x44>)
 800093a:	2260      	movs	r2, #96	@ 0x60
 800093c:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_OPAMP4_Init+0x44>)
 8000940:	220c      	movs	r2, #12
 8000942:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_OPAMP4_Init+0x44>)
 8000946:	2200      	movs	r2, #0
 8000948:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_OPAMP4_Init+0x44>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_OPAMP4_Init+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_OPAMP4_Init+0x44>)
 8000958:	f002 fdc4 	bl	80034e4 <HAL_OPAMP_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000962:	f000 fa87 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000360 	.word	0x20000360
 8000970:	4001030c 	.word	0x4001030c

08000974 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_SPI2_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_SPI2_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <MX_SPI2_Init+0x74>)
 8000980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_SPI2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_SPI2_Init+0x74>)
 800098e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000992:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_SPI2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_SPI2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009d4:	f005 fc22 	bl	800621c <HAL_SPI_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fa49 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000039c 	.word	0x2000039c
 80009ec:	40003800 	.word	0x40003800

080009f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	@ 0x30
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	2224      	movs	r2, #36	@ 0x24
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f00a feb6 	bl	800b770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a10:	4a25      	ldr	r2, [pc, #148]	@ (8000aa8 <MX_TIM1_Init+0xb8>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a52:	2301      	movs	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	480f      	ldr	r0, [pc, #60]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a66:	f005 fc84 	bl	8006372 <HAL_TIM_Encoder_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a70:	f000 fa00 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a86:	f005 fff9 	bl	8006a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a90:	f000 f9f0 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a94:	213c      	movs	r1, #60	@ 0x3c
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <MX_TIM1_Init+0xb4>)
 8000a98:	f005 fd11 	bl	80064be <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	@ 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000400 	.word	0x20000400
 8000aa8:	40012c00 	.word	0x40012c00

08000aac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	@ 0x30
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2224      	movs	r2, #36	@ 0x24
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fe58 	bl	800b770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aca:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000acc:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <MX_TIM3_Init+0xb0>)
 8000ace:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b20      	ldr	r3, [pc, #128]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000ade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000af0:	2303      	movs	r3, #3
 8000af2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480f      	ldr	r0, [pc, #60]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000b1c:	f005 fc29 	bl	8006372 <HAL_TIM_Encoder_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b26:	f000 f9a5 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b32:	463b      	mov	r3, r7
 8000b34:	4619      	mov	r1, r3
 8000b36:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000b38:	f005 ffa0 	bl	8006a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b42:	f000 f997 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b46:	213c      	movs	r1, #60	@ 0x3c
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <MX_TIM3_Init+0xac>)
 8000b4a:	f005 fcb8 	bl	80064be <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3730      	adds	r7, #48	@ 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000044c 	.word	0x2000044c
 8000b5c:	40000400 	.word	0x40000400

08000b60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2224      	movs	r2, #36	@ 0x24
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f00a fdfe 	bl	800b770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000b80:	4a23      	ldr	r2, [pc, #140]	@ (8000c10 <MX_TIM5_Init+0xb0>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000b92:	f04f 32ff 	mov.w	r2, #4294967295
 8000b96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000bd0:	f005 fbcf 	bl	8006372 <HAL_TIM_Encoder_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000bda:	f000 f94b 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	4619      	mov	r1, r3
 8000bea:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000bec:	f005 ff46 	bl	8006a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000bf6:	f000 f93d 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000bfa:	213c      	movs	r1, #60	@ 0x3c
 8000bfc:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <MX_TIM5_Init+0xac>)
 8000bfe:	f005 fc5e 	bl	80064be <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3730      	adds	r7, #48	@ 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000498 	.word	0x20000498
 8000c10:	40000c00 	.word	0x40000c00

08000c14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	@ 0x30
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2224      	movs	r2, #36	@ 0x24
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00a fda4 	bl	800b770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c32:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c34:	4a25      	ldr	r2, [pc, #148]	@ (8000ccc <MX_TIM8_Init+0xb8>)
 8000c36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c38:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b22      	ldr	r3, [pc, #136]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c44:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c76:	2301      	movs	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000c8a:	f005 fb72 	bl	8006372 <HAL_TIM_Encoder_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c94:	f000 f8ee 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000caa:	f005 fee7 	bl	8006a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000cb4:	f000 f8de 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000cb8:	213c      	movs	r1, #60	@ 0x3c
 8000cba:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <MX_TIM8_Init+0xb4>)
 8000cbc:	f005 fbff 	bl	80064be <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM8_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	@ 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200004e4 	.word	0x200004e4
 8000ccc:	40013400 	.word	0x40013400

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a5e      	ldr	r2, [pc, #376]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfe:	4b59      	ldr	r3, [pc, #356]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a58      	ldr	r2, [pc, #352]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b56      	ldr	r3, [pc, #344]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d16:	4b53      	ldr	r3, [pc, #332]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a52      	ldr	r2, [pc, #328]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b50      	ldr	r3, [pc, #320]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a4c      	ldr	r2, [pc, #304]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b47      	ldr	r3, [pc, #284]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a46      	ldr	r2, [pc, #280]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <MX_GPIO_Init+0x194>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OUT_SPI2_DC_GPIO_Port, GPIO_OUT_SPI2_DC_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d66:	f002 fb81 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_OUT_SPI2_RST_Pin|GPIO_OUT_SPI2_CS_Pin|GPIO_OUT_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f240 6101 	movw	r1, #1537	@ 0x601
 8000d70:	483d      	ldr	r0, [pc, #244]	@ (8000e68 <MX_GPIO_Init+0x198>)
 8000d72:	f002 fb7b 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_EXTI14_ENC1_SW_Pin GPIO_EXTI15_ENC2_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI14_ENC1_SW_Pin|GPIO_EXTI15_ENC2_SW_Pin;
 8000d76:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4837      	ldr	r0, [pc, #220]	@ (8000e6c <MX_GPIO_Init+0x19c>)
 8000d8e:	f002 f9eb 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI10_ENC3_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI10_ENC3_SW_Pin;
 8000d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI10_ENC3_SW_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4831      	ldr	r0, [pc, #196]	@ (8000e70 <MX_GPIO_Init+0x1a0>)
 8000daa:	f002 f9dd 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI3_RST_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_RST_SW_Pin;
 8000dae:	2308      	movs	r3, #8
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI3_RST_SW_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f002 f9cf 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OUT_SPI2_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI2_DC_Pin;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_OUT_SPI2_DC_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f002 f9c0 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_SPI2_RST_Pin GPIO_OUT_SPI2_CS_Pin GPIO_OUT_PWR_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI2_RST_Pin|GPIO_OUT_SPI2_CS_Pin|GPIO_OUT_PWR_EN_Pin;
 8000de8:	f240 6301 	movw	r3, #1537	@ 0x601
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4819      	ldr	r0, [pc, #100]	@ (8000e68 <MX_GPIO_Init+0x198>)
 8000e02:	f002 f9b1 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI11_ENC4_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI11_ENC4_SW_Pin;
 8000e06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI11_ENC4_SW_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4812      	ldr	r0, [pc, #72]	@ (8000e68 <MX_GPIO_Init+0x198>)
 8000e1e:	f002 f9a3 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <MX_GPIO_Init+0x198>)
 8000e36:	f002 f997 	bl	8003168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2009      	movs	r0, #9
 8000e40:	f001 ff83 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e44:	2009      	movs	r0, #9
 8000e46:	f001 ff9a 	bl	8002d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2028      	movs	r0, #40	@ 0x28
 8000e50:	f001 ff7b 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e54:	2028      	movs	r0, #40	@ 0x28
 8000e56:	f001 ff92 	bl	8002d7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48001800 	.word	0x48001800

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_MspInit+0x74>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e94:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <HAL_MspInit+0x74>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_MspInit+0x74>)
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_MspInit+0x74>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eac:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <HAL_MspInit+0x74>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_MspInit+0x74>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f001 ff40 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f001 ff57 	bl	8002d7e <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_7;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 f8c7 	bl	8005070 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000ee2:	f004 f925 	bl	8005130 <HAL_PWR_EnablePVD>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ee6:	f004 fa39 	bl	800535c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0a4      	sub	sp, #144	@ 0x90
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f14:	2254      	movs	r2, #84	@ 0x54
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00a fc29 	bl	800b770 <memset>
  if(hadc->Instance==ADC1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f26:	d140      	bne.n	8000faa <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f2e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 ff21 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f44:	f7ff ff96 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f48:	4b82      	ldr	r3, [pc, #520]	@ (8001154 <HAL_ADC_MspInit+0x25c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	4a81      	ldr	r2, [pc, #516]	@ (8001154 <HAL_ADC_MspInit+0x25c>)
 8000f50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f52:	4b80      	ldr	r3, [pc, #512]	@ (8001154 <HAL_ADC_MspInit+0x25c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d10b      	bne.n	8000f72 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b7c      	ldr	r3, [pc, #496]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b79      	ldr	r3, [pc, #484]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4a78      	ldr	r2, [pc, #480]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7e:	4b76      	ldr	r3, [pc, #472]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
 8000f88:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f002 f8e0 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000fa8:	e0cf      	b.n	800114a <HAL_ADC_MspInit+0x252>
  else if(hadc->Instance==ADC2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a6b      	ldr	r2, [pc, #428]	@ (800115c <HAL_ADC_MspInit+0x264>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d140      	bne.n	8001036 <HAL_ADC_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 fedb 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_ADC_MspInit+0xdc>
      Error_Handler();
 8000fd0:	f7ff ff50 	bl	8000e74 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001154 <HAL_ADC_MspInit+0x25c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a5e      	ldr	r2, [pc, #376]	@ (8001154 <HAL_ADC_MspInit+0x25c>)
 8000fdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fde:	4b5d      	ldr	r3, [pc, #372]	@ (8001154 <HAL_ADC_MspInit+0x25c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10b      	bne.n	8000ffe <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a5b      	ldr	r2, [pc, #364]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000fec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b59      	ldr	r3, [pc, #356]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b56      	ldr	r3, [pc, #344]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a55      	ldr	r2, [pc, #340]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b53      	ldr	r3, [pc, #332]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	2303      	movs	r3, #3
 800101c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f002 f89a 	bl	8003168 <HAL_GPIO_Init>
}
 8001034:	e089      	b.n	800114a <HAL_ADC_MspInit+0x252>
  else if(hadc->Instance==ADC3)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a49      	ldr	r2, [pc, #292]	@ (8001160 <HAL_ADC_MspInit+0x268>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d13f      	bne.n	80010c0 <HAL_ADC_MspInit+0x1c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001046:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800104a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001050:	4618      	mov	r0, r3
 8001052:	f004 fe95 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 800105c:	f7ff ff0a 	bl	8000e74 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001060:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <HAL_ADC_MspInit+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	4a3f      	ldr	r2, [pc, #252]	@ (8001164 <HAL_ADC_MspInit+0x26c>)
 8001068:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800106a:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <HAL_ADC_MspInit+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10b      	bne.n	800108a <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001072:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a38      	ldr	r2, [pc, #224]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b33      	ldr	r3, [pc, #204]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a32      	ldr	r2, [pc, #200]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a2:	2302      	movs	r3, #2
 80010a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a6:	2303      	movs	r3, #3
 80010a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010b6:	4619      	mov	r1, r3
 80010b8:	482b      	ldr	r0, [pc, #172]	@ (8001168 <HAL_ADC_MspInit+0x270>)
 80010ba:	f002 f855 	bl	8003168 <HAL_GPIO_Init>
}
 80010be:	e044      	b.n	800114a <HAL_ADC_MspInit+0x252>
  else if(hadc->Instance==ADC4)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a29      	ldr	r2, [pc, #164]	@ (800116c <HAL_ADC_MspInit+0x274>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d13f      	bne.n	800114a <HAL_ADC_MspInit+0x252>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80010ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80010d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80010d4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fe50 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_ADC_MspInit+0x1f2>
      Error_Handler();
 80010e6:	f7ff fec5 	bl	8000e74 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <HAL_ADC_MspInit+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <HAL_ADC_MspInit+0x26c>)
 80010f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <HAL_ADC_MspInit+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10b      	bne.n	8001114 <HAL_ADC_MspInit+0x21c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001100:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <HAL_ADC_MspInit+0x260>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800112c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001130:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001142:	4619      	mov	r1, r3
 8001144:	4808      	ldr	r0, [pc, #32]	@ (8001168 <HAL_ADC_MspInit+0x270>)
 8001146:	f002 f80f 	bl	8003168 <HAL_GPIO_Init>
}
 800114a:	bf00      	nop
 800114c:	3790      	adds	r7, #144	@ 0x90
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000538 	.word	0x20000538
 8001158:	40021000 	.word	0x40021000
 800115c:	50000100 	.word	0x50000100
 8001160:	50000400 	.word	0x50000400
 8001164:	2000053c 	.word	0x2000053c
 8001168:	48000400 	.word	0x48000400
 800116c:	50000500 	.word	0x50000500

08001170 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_CORDIC_MspInit+0x38>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10b      	bne.n	800119a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_CORDIC_MspInit+0x3c>)
 8001184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <HAL_CORDIC_MspInit+0x3c>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6493      	str	r3, [r2, #72]	@ 0x48
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <HAL_CORDIC_MspInit+0x3c>)
 8001190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	@ 0x38
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <HAL_DAC_MspInit+0x114>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d125      	bne.n	800121e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a3c      	ldr	r2, [pc, #240]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a36      	ldr	r2, [pc, #216]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001202:	2310      	movs	r3, #16
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001218:	f001 ffa6 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 800121c:	e04d      	b.n	80012ba <HAL_DAC_MspInit+0x10a>
  else if(hdac->Instance==DAC2)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2a      	ldr	r2, [pc, #168]	@ (80012cc <HAL_DAC_MspInit+0x11c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d125      	bne.n	8001274 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	4a26      	ldr	r2, [pc, #152]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 800122e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	4a20      	ldr	r2, [pc, #128]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001258:	2340      	movs	r3, #64	@ 0x40
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f001 ff7b 	bl	8003168 <HAL_GPIO_Init>
}
 8001272:	e022      	b.n	80012ba <HAL_DAC_MspInit+0x10a>
  else if(hdac->Instance==DAC3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <HAL_DAC_MspInit+0x120>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10c      	bne.n	8001298 <HAL_DAC_MspInit+0xe8>
    __HAL_RCC_DAC3_CLK_ENABLE();
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
}
 8001296:	e010      	b.n	80012ba <HAL_DAC_MspInit+0x10a>
  else if(hdac->Instance==DAC4)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <HAL_DAC_MspInit+0x124>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10b      	bne.n	80012ba <HAL_DAC_MspInit+0x10a>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80012a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_DAC_MspInit+0x118>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
}
 80012ba:	bf00      	nop
 80012bc:	3738      	adds	r7, #56	@ 0x38
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	50000800 	.word	0x50000800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	50000c00 	.word	0x50000c00
 80012d0:	50001000 	.word	0x50001000
 80012d4:	50001400 	.word	0x50001400

080012d8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001374 <HAL_OPAMP_MspInit+0x9c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d119      	bne.n	800132e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_OPAMP_MspInit+0xa0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <HAL_OPAMP_MspInit+0xa0>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <HAL_OPAMP_MspInit+0xa0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001312:	2304      	movs	r3, #4
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f001 ff1e 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP4_MspInit 1 */

  /* USER CODE END OPAMP4_MspInit 1 */
  }

}
 800132c:	e01d      	b.n	800136a <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP4)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <HAL_OPAMP_MspInit+0xa4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d118      	bne.n	800136a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_OPAMP_MspInit+0xa0>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <HAL_OPAMP_MspInit+0xa0>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_OPAMP_MspInit+0xa0>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4806      	ldr	r0, [pc, #24]	@ (8001380 <HAL_OPAMP_MspInit+0xa8>)
 8001366:	f001 feff 	bl	8003168 <HAL_GPIO_Init>
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40010300 	.word	0x40010300
 8001378:	40021000 	.word	0x40021000
 800137c:	4001030c 	.word	0x4001030c
 8001380:	48000400 	.word	0x48000400

08001384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a26      	ldr	r2, [pc, #152]	@ (800143c <HAL_SPI_MspInit+0xb8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d146      	bne.n	8001434 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013aa:	4a25      	ldr	r2, [pc, #148]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_SPI_MspInit+0xbc>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PA10     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80013ee:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001400:	2305      	movs	r3, #5
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480e      	ldr	r0, [pc, #56]	@ (8001444 <HAL_SPI_MspInit+0xc0>)
 800140c:	f001 feac 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001422:	2305      	movs	r3, #5
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001430:	f001 fe9a 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40003800 	.word	0x40003800
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400

08001448 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b090      	sub	sp, #64	@ 0x40
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a84      	ldr	r2, [pc, #528]	@ (8001678 <HAL_TIM_Encoder_MspInit+0x230>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d132      	bne.n	80014d0 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146a:	4b84      	ldr	r3, [pc, #528]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	4a83      	ldr	r2, [pc, #524]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001470:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001474:	6613      	str	r3, [r2, #96]	@ 0x60
 8001476:	4b81      	ldr	r3, [pc, #516]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001480:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b7e      	ldr	r3, [pc, #504]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a7d      	ldr	r2, [pc, #500]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b7b      	ldr	r3, [pc, #492]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014ac:	2306      	movs	r3, #6
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ba:	f001 fe55 	bl	8003168 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	201b      	movs	r0, #27
 80014c4:	f001 fc41 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014c8:	201b      	movs	r0, #27
 80014ca:	f001 fc58 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80014ce:	e0ce      	b.n	800166e <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001680 <HAL_TIM_Encoder_MspInit+0x238>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d130      	bne.n	800153c <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014da:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	4a67      	ldr	r2, [pc, #412]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e6:	4b65      	ldr	r3, [pc, #404]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
 80014f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b62      	ldr	r3, [pc, #392]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a61      	ldr	r2, [pc, #388]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b5f      	ldr	r3, [pc, #380]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800150a:	2330      	movs	r3, #48	@ 0x30
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151a:	2302      	movs	r3, #2
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001522:	4619      	mov	r1, r3
 8001524:	4857      	ldr	r0, [pc, #348]	@ (8001684 <HAL_TIM_Encoder_MspInit+0x23c>)
 8001526:	f001 fe1f 	bl	8003168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201d      	movs	r0, #29
 8001530:	f001 fc0b 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001534:	201d      	movs	r0, #29
 8001536:	f001 fc22 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 800153a:	e098      	b.n	800166e <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a51      	ldr	r2, [pc, #324]	@ (8001688 <HAL_TIM_Encoder_MspInit+0x240>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d14d      	bne.n	80015e2 <HAL_TIM_Encoder_MspInit+0x19a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001546:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6593      	str	r3, [r2, #88]	@ 0x58
 8001552:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b47      	ldr	r3, [pc, #284]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a46      	ldr	r2, [pc, #280]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b44      	ldr	r3, [pc, #272]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a40      	ldr	r2, [pc, #256]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800158e:	2302      	movs	r3, #2
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800159e:	2302      	movs	r3, #2
 80015a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ac:	f001 fddc 	bl	8003168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b0:	2304      	movs	r3, #4
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015c0:	2302      	movs	r3, #2
 80015c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c8:	4619      	mov	r1, r3
 80015ca:	482e      	ldr	r0, [pc, #184]	@ (8001684 <HAL_TIM_Encoder_MspInit+0x23c>)
 80015cc:	f001 fdcc 	bl	8003168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2032      	movs	r0, #50	@ 0x32
 80015d6:	f001 fbb8 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015da:	2032      	movs	r0, #50	@ 0x32
 80015dc:	f001 fbcf 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 80015e0:	e045      	b.n	800166e <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM8)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a29      	ldr	r2, [pc, #164]	@ (800168c <HAL_TIM_Encoder_MspInit+0x244>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d140      	bne.n	800166e <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	4a22      	ldr	r2, [pc, #136]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80015f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f8:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <HAL_TIM_Encoder_MspInit+0x234>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800161c:	2340      	movs	r3, #64	@ 0x40
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800162c:	2305      	movs	r3, #5
 800162e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001634:	4619      	mov	r1, r3
 8001636:	4813      	ldr	r0, [pc, #76]	@ (8001684 <HAL_TIM_Encoder_MspInit+0x23c>)
 8001638:	f001 fd96 	bl	8003168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800164e:	230a      	movs	r3, #10
 8001650:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001656:	4619      	mov	r1, r3
 8001658:	480a      	ldr	r0, [pc, #40]	@ (8001684 <HAL_TIM_Encoder_MspInit+0x23c>)
 800165a:	f001 fd85 	bl	8003168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	202e      	movs	r0, #46	@ 0x2e
 8001664:	f001 fb71 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001668:	202e      	movs	r0, #46	@ 0x2e
 800166a:	f001 fb88 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3740      	adds	r7, #64	@ 0x40
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40012c00 	.word	0x40012c00
 800167c:	40021000 	.word	0x40021000
 8001680:	40000400 	.word	0x40000400
 8001684:	48000400 	.word	0x48000400
 8001688:	40000c00 	.word	0x40000c00
 800168c:	40013400 	.word	0x40013400

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <NMI_Handler+0x4>

08001698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <MemManage_Handler+0x4>

080016a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f000 f8e3 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80016f2:	f003 fdd9 	bl	80052a8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}

080016fa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI3_RST_SW_Pin);
 80016fe:	2008      	movs	r0, #8
 8001700:	f001 fecc 	bl	800349c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <USB_LP_IRQHandler+0x10>)
 800170e:	f002 f8cb 	bl	80038a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000b14 	.word	0x20000b14

0800171c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <TIM1_CC_IRQHandler+0x10>)
 8001722:	f004 ff5a 	bl	80065da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000400 	.word	0x20000400

08001730 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <TIM3_IRQHandler+0x10>)
 8001736:	f004 ff50 	bl	80065da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000044c 	.word	0x2000044c

08001744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI10_ENC3_SW_Pin);
 8001748:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800174c:	f001 fea6 	bl	800349c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI11_ENC4_SW_Pin);
 8001750:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001754:	f001 fea2 	bl	800349c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI14_ENC1_SW_Pin);
 8001758:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800175c:	f001 fe9e 	bl	800349c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI15_ENC2_SW_Pin);
 8001760:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001764:	f001 fe9a 	bl	800349c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM8_CC_IRQHandler+0x10>)
 8001772:	f004 ff32 	bl	80065da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200004e4 	.word	0x200004e4

08001780 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <TIM5_IRQHandler+0x10>)
 8001786:	f004 ff28 	bl	80065da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000498 	.word	0x20000498

08001794 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017b8:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff ffea 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	@ (80017f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LoopForever+0xe>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001804 <LoopForever+0x16>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f009 ffcb 	bl	800b780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ea:	f7fe fd47 	bl	800027c <main>

080017ee <LoopForever>:

LoopForever:
    b LoopForever
 80017ee:	e7fe      	b.n	80017ee <LoopForever>
  ldr   r0, =_estack
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80017fc:	0800b8a8 	.word	0x0800b8a8
  ldr r2, =_sbss
 8001800:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001804:	20001210 	.word	0x20001210

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>

0800180a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f001 fa8d 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181a:	200f      	movs	r0, #15
 800181c:	f000 f80e 	bl	800183c <HAL_InitTick>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e001      	b.n	8001830 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800182c:	f7ff fb28 	bl	8000e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001830:	79fb      	ldrb	r3, [r7, #7]

}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001848:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_InitTick+0x68>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d022      	beq.n	8001896 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_InitTick+0x6c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <HAL_InitTick+0x68>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800185c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fa98 	bl	8002d9a <HAL_SYSTICK_Config>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10f      	bne.n	8001890 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b0f      	cmp	r3, #15
 8001874:	d809      	bhi.n	800188a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001876:	2200      	movs	r2, #0
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	f04f 30ff 	mov.w	r0, #4294967295
 800187e:	f001 fa64 	bl	8002d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_InitTick+0x70>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e007      	b.n	800189a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	e004      	b.n	800189a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e001      	b.n	800189a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_IncTick+0x1c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <HAL_IncTick+0x20>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	4a03      	ldr	r2, [pc, #12]	@ (80018cc <HAL_IncTick+0x1c>)
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000540 	.word	0x20000540
 80018d0:	20000008 	.word	0x20000008

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000540 	.word	0x20000540

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d004      	beq.n	8001910 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_Delay+0x40>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001910:	bf00      	nop
 8001912:	f7ff ffdf 	bl	80018d4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	429a      	cmp	r2, r3
 8001920:	d8f7      	bhi.n	8001912 <HAL_Delay+0x26>
  {
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000008 	.word	0x20000008

08001930 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3360      	adds	r3, #96	@ 0x60
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <LL_ADC_SetOffset+0x44>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	03fff000 	.word	0x03fff000

080019e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3360      	adds	r3, #96	@ 0x60
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3360      	adds	r3, #96	@ 0x60
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b087      	sub	sp, #28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3360      	adds	r3, #96	@ 0x60
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3360      	adds	r3, #96	@ 0x60
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	615a      	str	r2, [r3, #20]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3330      	adds	r3, #48	@ 0x30
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	4413      	add	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	211f      	movs	r1, #31
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0e9b      	lsrs	r3, r3, #26
 8001b0c:	f003 011f 	and.w	r1, r3, #31
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3314      	adds	r3, #20
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0e5b      	lsrs	r3, r3, #25
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	4413      	add	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0d1b      	lsrs	r3, r3, #20
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	2107      	movs	r1, #7
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	401a      	ands	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0d1b      	lsrs	r3, r3, #20
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b76:	bf00      	nop
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0318 	and.w	r3, r3, #24
 8001ba6:	4908      	ldr	r1, [pc, #32]	@ (8001bc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ba8:	40d9      	lsrs	r1, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	400b      	ands	r3, r1
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	0007ffff 	.word	0x0007ffff

08001bcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6093      	str	r3, [r2, #8]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c04:	d101      	bne.n	8001c0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_IsEnabled+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_IsEnabled+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d101      	bne.n	8001ccc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e1a9      	b.n	800204a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff f8f7 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff67 	bl	8001bf0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff4d 	bl	8001bcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff82 	bl	8001c40 <LL_ADC_IsInternalRegulatorEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d115      	bne.n	8001d6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff66 	bl	8001c18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d4c:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc0 <HAL_ADC_Init+0x2e4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	099b      	lsrs	r3, r3, #6
 8001d52:	4a9c      	ldr	r2, [pc, #624]	@ (8001fc4 <HAL_ADC_Init+0x2e8>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff64 	bl	8001c40 <LL_ADC_IsInternalRegulatorEnabled>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff75 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 8001da4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 8142 	bne.w	8002038 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 813e 	bne.w	8002038 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dc4:	f043 0202 	orr.w	r2, r3, #2
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff49 	bl	8001c68 <LL_ADC_IsEnabled>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d141      	bne.n	8001e60 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_Init+0x114>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a77      	ldr	r2, [pc, #476]	@ (8001fc8 <HAL_ADC_Init+0x2ec>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_Init+0x134>
 8001df0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001df4:	f7ff ff38 	bl	8001c68 <LL_ADC_IsEnabled>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	4873      	ldr	r0, [pc, #460]	@ (8001fc8 <HAL_ADC_Init+0x2ec>)
 8001dfc:	f7ff ff34 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4323      	orrs	r3, r4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	e012      	b.n	8001e36 <HAL_ADC_Init+0x15a>
 8001e10:	486e      	ldr	r0, [pc, #440]	@ (8001fcc <HAL_ADC_Init+0x2f0>)
 8001e12:	f7ff ff29 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e16:	4604      	mov	r4, r0
 8001e18:	486d      	ldr	r0, [pc, #436]	@ (8001fd0 <HAL_ADC_Init+0x2f4>)
 8001e1a:	f7ff ff25 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	431c      	orrs	r4, r3
 8001e22:	486c      	ldr	r0, [pc, #432]	@ (8001fd4 <HAL_ADC_Init+0x2f8>)
 8001e24:	f7ff ff20 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4323      	orrs	r3, r4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e42:	d004      	beq.n	8001e4e <HAL_ADC_Init+0x172>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a5f      	ldr	r2, [pc, #380]	@ (8001fc8 <HAL_ADC_Init+0x2ec>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Init+0x176>
 8001e4e:	4a62      	ldr	r2, [pc, #392]	@ (8001fd8 <HAL_ADC_Init+0x2fc>)
 8001e50:	e000      	b.n	8001e54 <HAL_ADC_Init+0x178>
 8001e52:	4a62      	ldr	r2, [pc, #392]	@ (8001fdc <HAL_ADC_Init+0x300>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f7ff fd68 	bl	8001930 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7f5b      	ldrb	r3, [r3, #29]
 8001e64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d106      	bne.n	8001e9c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	045b      	lsls	r3, r3, #17
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b48      	ldr	r3, [pc, #288]	@ (8001fe0 <HAL_ADC_Init+0x304>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fee4 	bl	8001cb4 <LL_ADC_INJ_IsConversionOngoing>
 8001eec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d17f      	bne.n	8001ff4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d17c      	bne.n	8001ff4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001efe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f06:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f16:	f023 0302 	bic.w	r3, r3, #2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6911      	ldr	r1, [r2, #16]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f5a:	e013      	b.n	8001f84 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f80:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d12a      	bne.n	8001fe4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	e019      	b.n	8001ff4 <HAL_ADC_Init+0x318>
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	053e2d63 	.word	0x053e2d63
 8001fc8:	50000100 	.word	0x50000100
 8001fcc:	50000400 	.word	0x50000400
 8001fd0:	50000500 	.word	0x50000500
 8001fd4:	50000600 	.word	0x50000600
 8001fd8:	50000300 	.word	0x50000300
 8001fdc:	50000700 	.word	0x50000700
 8001fe0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d10c      	bne.n	8002016 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f023 010f 	bic.w	r1, r3, #15
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
 8002014:	e007      	b.n	8002026 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 020f 	bic.w	r2, r2, #15
 8002024:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002036:	e007      	b.n	8002048 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	f043 0210 	orr.w	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002048:	7ffb      	ldrb	r3, [r7, #31]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd90      	pop	{r4, r7, pc}
 8002052:	bf00      	nop

08002054 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0b6      	sub	sp, #216	@ 0xd8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x24>
 8002072:	2302      	movs	r3, #2
 8002074:	f000 bc13 	b.w	800289e <HAL_ADC_ConfigChannel+0x84a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe02 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 83f3 	bne.w	8002878 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	f7ff fd18 	bl	8001ad4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fdf0 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 80020ae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fdfc 	bl	8001cb4 <LL_ADC_INJ_IsConversionOngoing>
 80020bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 81d9 	bne.w	800247c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 81d4 	bne.w	800247c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020dc:	d10f      	bne.n	80020fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7ff fd1f 	bl	8001b2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcd9 	bl	8001aae <LL_ADC_SetSamplingTimeCommonConfig>
 80020fc:	e00e      	b.n	800211c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff fd0e 	bl	8001b2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fcc9 	bl	8001aae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	08db      	lsrs	r3, r3, #3
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d022      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6919      	ldr	r1, [r3, #16]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800214e:	f7ff fc23 	bl	8001998 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6919      	ldr	r1, [r3, #16]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	461a      	mov	r2, r3
 8002160:	f7ff fc6f 	bl	8001a42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002170:	2b01      	cmp	r3, #1
 8002172:	d102      	bne.n	800217a <HAL_ADC_ConfigChannel+0x126>
 8002174:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002178:	e000      	b.n	800217c <HAL_ADC_ConfigChannel+0x128>
 800217a:	2300      	movs	r3, #0
 800217c:	461a      	mov	r2, r3
 800217e:	f7ff fc7b 	bl	8001a78 <LL_ADC_SetOffsetSaturation>
 8002182:	e17b      	b.n	800247c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fc28 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x15c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc1d 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	f003 021f 	and.w	r2, r3, #31
 80021ae:	e01e      	b.n	80021ee <HAL_ADC_ConfigChannel+0x19a>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fc12 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e004      	b.n	80021ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1b2>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	e018      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1e4>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800221a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800221e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800222e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fbe1 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fbc5 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x222>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fbba 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	e01e      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x260>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fbaf 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800229c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e004      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80022a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x278>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	e018      	b.n	80022fe <HAL_ADC_ConfigChannel+0x2aa>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80022e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e004      	b.n	80022fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022fe:	429a      	cmp	r2, r3
 8002300:	d106      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fb7e 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fb62 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x2e8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2102      	movs	r1, #2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fb57 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	f003 021f 	and.w	r2, r3, #31
 800233a:	e01e      	b.n	800237a <HAL_ADC_ConfigChannel+0x326>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fb4c 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800235a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800235e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002362:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e004      	b.n	8002378 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800236e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x33e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	e016      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x36c>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80023a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80023aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e004      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80023b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2102      	movs	r1, #2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fb1d 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2103      	movs	r1, #3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb01 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x3aa>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2103      	movs	r1, #3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff faf6 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	e017      	b.n	800242e <HAL_ADC_ConfigChannel+0x3da>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2103      	movs	r1, #3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff faeb 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002418:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800241a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x3f2>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	0e9b      	lsrs	r3, r3, #26
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	e011      	b.n	800246a <HAL_ADC_ConfigChannel+0x416>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002456:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e003      	b.n	800246a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800246a:	429a      	cmp	r2, r3
 800246c:	d106      	bne.n	800247c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	2103      	movs	r1, #3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fac8 	bl	8001a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fbf1 	bl	8001c68 <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 813d 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	f7ff fb72 	bl	8001b84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4aa2      	ldr	r2, [pc, #648]	@ (8002730 <HAL_ADC_ConfigChannel+0x6dc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	f040 812e 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x480>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e019      	b.n	8002508 <HAL_ADC_ConfigChannel+0x4b4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e003      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2b09      	cmp	r3, #9
 8002500:	bf94      	ite	ls
 8002502:	2301      	movls	r3, #1
 8002504:	2300      	movhi	r3, #0
 8002506:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002508:	2b00      	cmp	r3, #0
 800250a:	d079      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x4d4>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0e9b      	lsrs	r3, r3, #26
 800251e:	3301      	adds	r3, #1
 8002520:	069b      	lsls	r3, r3, #26
 8002522:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002526:	e015      	b.n	8002554 <HAL_ADC_ConfigChannel+0x500>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002538:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800253a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	069b      	lsls	r3, r3, #26
 8002550:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x520>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	3301      	adds	r3, #1
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	e017      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x550>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002584:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e003      	b.n	8002598 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	ea42 0103 	orr.w	r1, r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x576>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	051b      	lsls	r3, r3, #20
 80025c8:	e018      	b.n	80025fc <HAL_ADC_ConfigChannel+0x5a8>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80025dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fc:	430b      	orrs	r3, r1
 80025fe:	e07e      	b.n	80026fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_ADC_ConfigChannel+0x5c8>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	069b      	lsls	r3, r3, #26
 8002616:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800261a:	e015      	b.n	8002648 <HAL_ADC_ConfigChannel+0x5f4>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800262a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x614>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	3301      	adds	r3, #1
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	e017      	b.n	8002698 <HAL_ADC_ConfigChannel+0x644>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	61fb      	str	r3, [r7, #28]
  return result;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e003      	b.n	800268c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	ea42 0103 	orr.w	r1, r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x670>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	051b      	lsls	r3, r3, #20
 80026be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	e01b      	b.n	80026fc <HAL_ADC_ConfigChannel+0x6a8>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	613b      	str	r3, [r7, #16]
  return result;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e003      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	3301      	adds	r3, #1
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	3b1e      	subs	r3, #30
 80026f6:	051b      	lsls	r3, r3, #20
 80026f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002702:	4619      	mov	r1, r3
 8002704:	f7ff fa12 	bl	8001b2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_ADC_ConfigChannel+0x6e0>)
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80be 	beq.w	8002892 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800271e:	d004      	beq.n	800272a <HAL_ADC_ConfigChannel+0x6d6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <HAL_ADC_ConfigChannel+0x6e4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x6ec>
 800272a:	4b04      	ldr	r3, [pc, #16]	@ (800273c <HAL_ADC_ConfigChannel+0x6e8>)
 800272c:	e009      	b.n	8002742 <HAL_ADC_ConfigChannel+0x6ee>
 800272e:	bf00      	nop
 8002730:	407f0000 	.word	0x407f0000
 8002734:	80080000 	.word	0x80080000
 8002738:	50000100 	.word	0x50000100
 800273c:	50000300 	.word	0x50000300
 8002740:	4b59      	ldr	r3, [pc, #356]	@ (80028a8 <HAL_ADC_ConfigChannel+0x854>)
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f91a 	bl	800197c <LL_ADC_GetCommonPathInternalCh>
 8002748:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a56      	ldr	r2, [pc, #344]	@ (80028ac <HAL_ADC_ConfigChannel+0x858>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_ADC_ConfigChannel+0x70c>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a55      	ldr	r2, [pc, #340]	@ (80028b0 <HAL_ADC_ConfigChannel+0x85c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d13a      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d134      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002774:	d005      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x72e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a4e      	ldr	r2, [pc, #312]	@ (80028b4 <HAL_ADC_ConfigChannel+0x860>)
 800277c:	4293      	cmp	r3, r2
 800277e:	f040 8085 	bne.w	800288c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800278a:	d004      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x742>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a49      	ldr	r2, [pc, #292]	@ (80028b8 <HAL_ADC_ConfigChannel+0x864>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x746>
 8002796:	4a49      	ldr	r2, [pc, #292]	@ (80028bc <HAL_ADC_ConfigChannel+0x868>)
 8002798:	e000      	b.n	800279c <HAL_ADC_ConfigChannel+0x748>
 800279a:	4a43      	ldr	r2, [pc, #268]	@ (80028a8 <HAL_ADC_ConfigChannel+0x854>)
 800279c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f7ff f8d5 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027ac:	4b44      	ldr	r3, [pc, #272]	@ (80028c0 <HAL_ADC_ConfigChannel+0x86c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	4a44      	ldr	r2, [pc, #272]	@ (80028c4 <HAL_ADC_ConfigChannel+0x870>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027c6:	e002      	b.n	80027ce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d4:	e05a      	b.n	800288c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3b      	ldr	r2, [pc, #236]	@ (80028c8 <HAL_ADC_ConfigChannel+0x874>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d125      	bne.n	800282c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d11f      	bne.n	800282c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a31      	ldr	r2, [pc, #196]	@ (80028b8 <HAL_ADC_ConfigChannel+0x864>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d104      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x7ac>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a34      	ldr	r2, [pc, #208]	@ (80028cc <HAL_ADC_ConfigChannel+0x878>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d047      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002808:	d004      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x7c0>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2a      	ldr	r2, [pc, #168]	@ (80028b8 <HAL_ADC_ConfigChannel+0x864>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x7c4>
 8002814:	4a29      	ldr	r2, [pc, #164]	@ (80028bc <HAL_ADC_ConfigChannel+0x868>)
 8002816:	e000      	b.n	800281a <HAL_ADC_ConfigChannel+0x7c6>
 8002818:	4a23      	ldr	r2, [pc, #140]	@ (80028a8 <HAL_ADC_ConfigChannel+0x854>)
 800281a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f7ff f896 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800282a:	e031      	b.n	8002890 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <HAL_ADC_ConfigChannel+0x87c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12d      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d127      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <HAL_ADC_ConfigChannel+0x864>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002854:	d004      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x80c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_ADC_ConfigChannel+0x864>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x810>
 8002860:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_ADC_ConfigChannel+0x868>)
 8002862:	e000      	b.n	8002866 <HAL_ADC_ConfigChannel+0x812>
 8002864:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <HAL_ADC_ConfigChannel+0x854>)
 8002866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800286a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7ff f870 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
 8002876:	e00c      	b.n	8002892 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800288a:	e002      	b.n	8002892 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002890:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800289a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	37d8      	adds	r7, #216	@ 0xd8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	50000700 	.word	0x50000700
 80028ac:	c3210000 	.word	0xc3210000
 80028b0:	90c00010 	.word	0x90c00010
 80028b4:	50000600 	.word	0x50000600
 80028b8:	50000100 	.word	0x50000100
 80028bc:	50000300 	.word	0x50000300
 80028c0:	20000000 	.word	0x20000000
 80028c4:	053e2d63 	.word	0x053e2d63
 80028c8:	c7520000 	.word	0xc7520000
 80028cc:	50000500 	.word	0x50000500
 80028d0:	cb840000 	.word	0xcb840000

080028d4 <LL_ADC_IsEnabled>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <LL_ADC_IsEnabled+0x18>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <LL_ADC_IsEnabled+0x1a>
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_ADC_REG_IsConversionOngoing>:
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d101      	bne.n	8002912 <LL_ADC_REG_IsConversionOngoing+0x18>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b0a1      	sub	sp, #132	@ 0x84
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800293a:	2302      	movs	r3, #2
 800293c:	e0e7      	b.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002946:	2300      	movs	r3, #0
 8002948:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800294a:	2300      	movs	r3, #0
 800294c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002956:	d102      	bne.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002958:	4b6f      	ldr	r3, [pc, #444]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	e009      	b.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6e      	ldr	r2, [pc, #440]	@ (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d102      	bne.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002968:	4b6d      	ldr	r3, [pc, #436]	@ (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	e001      	b.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	f043 0220 	orr.w	r2, r3, #32
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0be      	b.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ffb1 	bl	80028fa <LL_ADC_REG_IsConversionOngoing>
 8002998:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ffab 	bl	80028fa <LL_ADC_REG_IsConversionOngoing>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 80a0 	bne.w	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 809c 	bne.w	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029bc:	d004      	beq.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a55      	ldr	r2, [pc, #340]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029c8:	4b56      	ldr	r3, [pc, #344]	@ (8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029ca:	e000      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029cc:	4b56      	ldr	r3, [pc, #344]	@ (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80029ce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d04b      	beq.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029ea:	035b      	lsls	r3, r3, #13
 80029ec:	430b      	orrs	r3, r1
 80029ee:	431a      	orrs	r2, r3
 80029f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029fc:	d004      	beq.n	8002a08 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a45      	ldr	r2, [pc, #276]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10f      	bne.n	8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a0c:	f7ff ff62 	bl	80028d4 <LL_ADC_IsEnabled>
 8002a10:	4604      	mov	r4, r0
 8002a12:	4841      	ldr	r0, [pc, #260]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a14:	f7ff ff5e 	bl	80028d4 <LL_ADC_IsEnabled>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4323      	orrs	r3, r4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e012      	b.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a28:	483c      	ldr	r0, [pc, #240]	@ (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a2a:	f7ff ff53 	bl	80028d4 <LL_ADC_IsEnabled>
 8002a2e:	4604      	mov	r4, r0
 8002a30:	483b      	ldr	r0, [pc, #236]	@ (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a32:	f7ff ff4f 	bl	80028d4 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	431c      	orrs	r4, r3
 8002a3a:	483c      	ldr	r0, [pc, #240]	@ (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a3c:	f7ff ff4a 	bl	80028d4 <LL_ADC_IsEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4323      	orrs	r3, r4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d056      	beq.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a5a:	f023 030f 	bic.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	6811      	ldr	r1, [r2, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a6c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6e:	e047      	b.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a84:	d004      	beq.n	8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a23      	ldr	r2, [pc, #140]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a94:	f7ff ff1e 	bl	80028d4 <LL_ADC_IsEnabled>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	481f      	ldr	r0, [pc, #124]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a9c:	f7ff ff1a 	bl	80028d4 <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4323      	orrs	r3, r4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e012      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ab0:	481a      	ldr	r0, [pc, #104]	@ (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ab2:	f7ff ff0f 	bl	80028d4 <LL_ADC_IsEnabled>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4819      	ldr	r0, [pc, #100]	@ (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002aba:	f7ff ff0b 	bl	80028d4 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	431c      	orrs	r4, r3
 8002ac2:	481a      	ldr	r0, [pc, #104]	@ (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ac4:	f7ff ff06 	bl	80028d4 <LL_ADC_IsEnabled>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4323      	orrs	r3, r4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ada:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ae2:	f023 030f 	bic.w	r3, r3, #15
 8002ae6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ae8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aea:	e009      	b.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002afe:	e000      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3784      	adds	r7, #132	@ 0x84
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	50000100 	.word	0x50000100
 8002b1c:	50000400 	.word	0x50000400
 8002b20:	50000500 	.word	0x50000500
 8002b24:	50000300 	.word	0x50000300
 8002b28:	50000700 	.word	0x50000700
 8002b2c:	50000600 	.word	0x50000600

08002b30 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e023      	b.n	8002b8a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fb0a 	bl	8001170 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4907      	ldr	r1, [pc, #28]	@ (8002c30 <__NVIC_EnableIRQ+0x38>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	@ (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	@ (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	@ 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff29 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff40 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff90 	bl	8002c88 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5f 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff33 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa4 	bl	8002cf0 <SysTick_Config>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e014      	b.n	8002dee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	791b      	ldrb	r3, [r3, #4]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe f9eb 	bl	80011b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_DAC_ConfigChannel+0x1c>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e19e      	b.n	8003156 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	795b      	ldrb	r3, [r3, #5]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_DAC_ConfigChannel+0x2c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e198      	b.n	8003156 <HAL_DAC_ConfigChannel+0x35e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d17a      	bne.n	8002f2e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e38:	f7fe fd4c 	bl	80018d4 <HAL_GetTick>
 8002e3c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d13d      	bne.n	8002ec0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e44:	e018      	b.n	8002e78 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e46:	f7fe fd45 	bl	80018d4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d911      	bls.n	8002e78 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f043 0208 	orr.w	r2, r3, #8
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2203      	movs	r2, #3
 8002e72:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e16e      	b.n	8003156 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1df      	bne.n	8002e46 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e90:	e020      	b.n	8002ed4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e92:	f7fe fd1f 	bl	80018d4 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d90f      	bls.n	8002ec0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0a      	bge.n	8002ec0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f043 0208 	orr.w	r2, r3, #8
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e14a      	b.n	8003156 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dbe3      	blt.n	8002e92 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ed2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	ea02 0103 	and.w	r1, r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	21ff      	movs	r1, #255	@ 0xff
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	ea02 0103 	and.w	r1, r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d11d      	bne.n	8002f72 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	221f      	movs	r2, #31
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4e:	4013      	ands	r3, r2
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	4313      	orrs	r3, r2
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f70:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2207      	movs	r2, #7
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	e00f      	b.n	8002fbc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d102      	bne.n	8002faa <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	e008      	b.n	8002fbc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	e001      	b.n	8002fbc <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fde:	4013      	ands	r3, r2
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	791b      	ldrb	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d102      	bne.n	8002ff0 <HAL_DAC_ConfigChannel+0x1f8>
 8002fea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fee:	e000      	b.n	8002ff2 <HAL_DAC_ConfigChannel+0x1fa>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300a:	4013      	ands	r3, r2
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	795b      	ldrb	r3, [r3, #5]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_DAC_ConfigChannel+0x224>
 8003016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800301a:	e000      	b.n	800301e <HAL_DAC_ConfigChannel+0x226>
 800301c:	2300      	movs	r3, #0
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d114      	bne.n	800305e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003034:	f002 fe52 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 8003038:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_DAC_ConfigChannel+0x368>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d904      	bls.n	800304c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
 800304a:	e00f      	b.n	800306c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4a45      	ldr	r2, [pc, #276]	@ (8003164 <HAL_DAC_ConfigChannel+0x36c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d90a      	bls.n	800306a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
 800305c:	e006      	b.n	800306c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	4313      	orrs	r3, r2
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	e000      	b.n	800306c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800306a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307a:	4313      	orrs	r3, r2
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6819      	ldr	r1, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030be:	4013      	ands	r3, r2
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d6:	4313      	orrs	r3, r2
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	22c0      	movs	r2, #192	@ 0xc0
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	400a      	ands	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	ea02 0103 	and.w	r1, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003154:	7ffb      	ldrb	r3, [r7, #31]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	@ 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	09896800 	.word	0x09896800
 8003164:	04c4b400 	.word	0x04c4b400

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003176:	e15a      	b.n	800342e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 814c 	beq.w	8003428 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d005      	beq.n	80031a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d130      	bne.n	800320a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031de:	2201      	movs	r2, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0201 	and.w	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b03      	cmp	r3, #3
 8003214:	d017      	beq.n	8003246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d123      	bne.n	800329a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	08da      	lsrs	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3208      	adds	r2, #8
 8003294:	6939      	ldr	r1, [r7, #16]
 8003296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0203 	and.w	r2, r3, #3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80a6 	beq.w	8003428 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032dc:	4b5b      	ldr	r3, [pc, #364]	@ (800344c <HAL_GPIO_Init+0x2e4>)
 80032de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e0:	4a5a      	ldr	r2, [pc, #360]	@ (800344c <HAL_GPIO_Init+0x2e4>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80032e8:	4b58      	ldr	r3, [pc, #352]	@ (800344c <HAL_GPIO_Init+0x2e4>)
 80032ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f4:	4a56      	ldr	r2, [pc, #344]	@ (8003450 <HAL_GPIO_Init+0x2e8>)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	3302      	adds	r3, #2
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800331e:	d01f      	beq.n	8003360 <HAL_GPIO_Init+0x1f8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4c      	ldr	r2, [pc, #304]	@ (8003454 <HAL_GPIO_Init+0x2ec>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d019      	beq.n	800335c <HAL_GPIO_Init+0x1f4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a4b      	ldr	r2, [pc, #300]	@ (8003458 <HAL_GPIO_Init+0x2f0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_GPIO_Init+0x1f0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_GPIO_Init+0x2f4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00d      	beq.n	8003354 <HAL_GPIO_Init+0x1ec>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a49      	ldr	r2, [pc, #292]	@ (8003460 <HAL_GPIO_Init+0x2f8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d007      	beq.n	8003350 <HAL_GPIO_Init+0x1e8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a48      	ldr	r2, [pc, #288]	@ (8003464 <HAL_GPIO_Init+0x2fc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_GPIO_Init+0x1e4>
 8003348:	2305      	movs	r3, #5
 800334a:	e00a      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 800334c:	2306      	movs	r3, #6
 800334e:	e008      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003350:	2304      	movs	r3, #4
 8003352:	e006      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003354:	2303      	movs	r3, #3
 8003356:	e004      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003358:	2302      	movs	r3, #2
 800335a:	e002      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003360:	2300      	movs	r3, #0
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	f002 0203 	and.w	r2, r2, #3
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	4093      	lsls	r3, r2
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003372:	4937      	ldr	r1, [pc, #220]	@ (8003450 <HAL_GPIO_Init+0x2e8>)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003380:	4b39      	ldr	r3, [pc, #228]	@ (8003468 <HAL_GPIO_Init+0x300>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033a4:	4a30      	ldr	r2, [pc, #192]	@ (8003468 <HAL_GPIO_Init+0x300>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003468 <HAL_GPIO_Init+0x300>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033ce:	4a26      	ldr	r2, [pc, #152]	@ (8003468 <HAL_GPIO_Init+0x300>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033d4:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_GPIO_Init+0x300>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003468 <HAL_GPIO_Init+0x300>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <HAL_GPIO_Init+0x300>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003422:	4a11      	ldr	r2, [pc, #68]	@ (8003468 <HAL_GPIO_Init+0x300>)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f ae9d 	bne.w	8003178 <HAL_GPIO_Init+0x10>
  }
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40021000 	.word	0x40021000
 8003450:	40010000 	.word	0x40010000
 8003454:	48000400 	.word	0x48000400
 8003458:	48000800 	.word	0x48000800
 800345c:	48000c00 	.word	0x48000c00
 8003460:	48001000 	.word	0x48001000
 8003464:	48001400 	.word	0x48001400
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003488:	e002      	b.n	8003490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034a6:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b2:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f806 	bl	80034cc <HAL_GPIO_EXTI_Callback>
  }
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40010400 	.word	0x40010400

080034cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0bb      	b.n	8003672 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b05      	cmp	r3, #5
 8003504:	d101      	bne.n	800350a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0b3      	b.n	8003672 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d101      	bne.n	800351a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0ab      	b.n	8003672 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	4b58      	ldr	r3, [pc, #352]	@ (800367c <HAL_OPAMP_Init+0x198>)
 800351c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351e:	4a57      	ldr	r2, [pc, #348]	@ (800367c <HAL_OPAMP_Init+0x198>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6613      	str	r3, [r2, #96]	@ 0x60
 8003526:	4b55      	ldr	r3, [pc, #340]	@ (800367c <HAL_OPAMP_Init+0x198>)
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd fec6 	bl	80012d8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b40      	cmp	r3, #64	@ 0x40
 8003552:	d003      	beq.n	800355c <HAL_OPAMP_Init+0x78>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b60      	cmp	r3, #96	@ 0x60
 800355a:	d133      	bne.n	80035c4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 0110 	bic.w	r1, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b41      	ldr	r3, [pc, #260]	@ (8003680 <HAL_OPAMP_Init+0x19c>)
 800357a:	4013      	ands	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6851      	ldr	r1, [r2, #4]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6892      	ldr	r2, [r2, #8]
 8003584:	4311      	orrs	r1, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6912      	ldr	r2, [r2, #16]
 800358a:	430a      	orrs	r2, r1
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	7d09      	ldrb	r1, [r1, #20]
 8003590:	2901      	cmp	r1, #1
 8003592:	d102      	bne.n	800359a <HAL_OPAMP_Init+0xb6>
 8003594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003598:	e000      	b.n	800359c <HAL_OPAMP_Init+0xb8>
 800359a:	2100      	movs	r1, #0
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035ae:	04d2      	lsls	r2, r2, #19
 80035b0:	4311      	orrs	r1, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035b6:	0612      	lsls	r2, r2, #24
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	430b      	orrs	r3, r1
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e035      	b.n	8003630 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 0110 	bic.w	r1, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <HAL_OPAMP_Init+0x19c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6851      	ldr	r1, [r2, #4]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6892      	ldr	r2, [r2, #8]
 80035ec:	4311      	orrs	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6912      	ldr	r2, [r2, #16]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	7d09      	ldrb	r1, [r1, #20]
 80035fe:	2901      	cmp	r1, #1
 8003600:	d102      	bne.n	8003608 <HAL_OPAMP_Init+0x124>
 8003602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003606:	e000      	b.n	800360a <HAL_OPAMP_Init+0x126>
 8003608:	2100      	movs	r1, #0
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800361c:	04d2      	lsls	r2, r2, #19
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003624:	0612      	lsls	r2, r2, #24
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db10      	blt.n	800365c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	e0003e11 	.word	0xe0003e11

08003684 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0c0      	b.n	8003818 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f007 fd8c 	bl	800b1c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2203      	movs	r2, #3
 80036b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fad0 	bl	8006c62 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e03e      	b.n	8003746 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	3311      	adds	r3, #17
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	3310      	adds	r3, #16
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	3313      	adds	r3, #19
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	3320      	adds	r3, #32
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	3324      	adds	r3, #36	@ 0x24
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	3301      	adds	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	791b      	ldrb	r3, [r3, #4]
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	429a      	cmp	r2, r3
 800374e:	d3bb      	bcc.n	80036c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e044      	b.n	80037e0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	440b      	add	r3, r1
 8003764:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	3301      	adds	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	791b      	ldrb	r3, [r3, #4]
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d3b5      	bcc.n	8003756 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80037f6:	f003 fa4f 	bl	8006c98 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7a9b      	ldrb	r3, [r3, #10]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d102      	bne.n	8003816 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f001 fc02 	bl	800501a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_PCD_Start+0x16>
 8003832:	2302      	movs	r3, #2
 8003834:	e012      	b.n	800385c <HAL_PCD_Start+0x3c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f003 f9f6 	bl	8006c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f005 fac9 	bl	8008de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_PCD_Stop+0x16>
 8003876:	2302      	movs	r3, #2
 8003878:	e012      	b.n	80038a0 <HAL_PCD_Stop+0x3c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 f9eb 	bl	8006c62 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f005 fabe 	bl	8008e12 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 fac1 	bl	8008e3c <USB_ReadInterrupts>
 80038ba:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 faa4 	bl	8003e14 <PCD_EP_ISR_Handler>

    return;
 80038cc:	e110      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ea:	b292      	uxth	r2, r2
 80038ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f007 fcfa 	bl	800b2ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038f6:	2100      	movs	r1, #0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8fc 	bl	8003af6 <HAL_PCD_SetAddress>

    return;
 80038fe:	e0f7      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800391c:	b292      	uxth	r2, r2
 800391e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003922:	e0e5      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003940:	b292      	uxth	r2, r2
 8003942:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003946:	e0d3      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d034      	beq.n	80039bc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0204 	bic.w	r2, r2, #4
 8003964:	b292      	uxth	r2, r2
 8003966:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0208 	bic.w	r2, r2, #8
 800397c:	b292      	uxth	r2, r2
 800397e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003988:	2b01      	cmp	r3, #1
 800398a:	d107      	bne.n	800399c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003994:	2100      	movs	r1, #0
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f007 fe6a 	bl	800b670 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f007 fcdd 	bl	800b35c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039b4:	b292      	uxth	r2, r2
 80039b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039ba:	e099      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d027      	beq.n	8003a16 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0208 	orr.w	r2, r2, #8
 80039d8:	b292      	uxth	r2, r2
 80039da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f0:	b292      	uxth	r2, r2
 80039f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0204 	orr.w	r2, r2, #4
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f007 fc8a 	bl	800b328 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a14:	e06c      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d040      	beq.n	8003aa2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a32:	b292      	uxth	r2, r2
 8003a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d12b      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0204 	orr.w	r2, r2, #4
 8003a54:	b292      	uxth	r2, r2
 8003a56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0208 	orr.w	r2, r2, #8
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a90:	2101      	movs	r1, #1
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f007 fdec 	bl	800b670 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003a98:	e02a      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f007 fc44 	bl	800b328 <HAL_PCD_SuspendCallback>
    return;
 8003aa0:	e026      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00f      	beq.n	8003acc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f007 fc02 	bl	800b2ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003aca:	e011      	b.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003aee:	bf00      	nop
  }
}
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_PCD_SetAddress+0x1a>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e012      	b.n	8003b36 <HAL_PCD_SetAddress+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f005 f948 	bl	8008dbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	4608      	mov	r0, r1
 8003b48:	4611      	mov	r1, r2
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	70fb      	strb	r3, [r7, #3]
 8003b50:	460b      	mov	r3, r1
 8003b52:	803b      	strh	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da0e      	bge.n	8003b82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 0207 	and.w	r2, r3, #7
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	3310      	adds	r3, #16
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	705a      	strb	r2, [r3, #1]
 8003b80:	e00e      	b.n	8003ba0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 0207 	and.w	r2, r3, #7
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bac:	883a      	ldrh	r2, [r7, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	78ba      	ldrb	r2, [r7, #2]
 8003bb6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bb8:	78bb      	ldrb	r3, [r7, #2]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d102      	bne.n	8003bc4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_PCD_EP_Open+0x94>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e00e      	b.n	8003bf0 <HAL_PCD_EP_Open+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 f877 	bl	8006cd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003bee:	7afb      	ldrb	r3, [r7, #11]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	460b      	mov	r3, r1
 8003c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	f003 0207 	and.w	r2, r3, #7
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2200      	movs	r2, #0
 8003c36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c38:	7afb      	ldrb	r3, [r7, #11]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6979      	ldr	r1, [r7, #20]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f003 fc06 	bl	800745c <USB_EPStartXfer>

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	460b      	mov	r3, r1
 8003c68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	f003 0207 	and.w	r2, r3, #7
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3310      	adds	r3, #16
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6979      	ldr	r1, [r7, #20]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 fbcf 	bl	800745c <USB_EPStartXfer>

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	7912      	ldrb	r2, [r2, #4]
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e03e      	b.n	8003d64 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	da0e      	bge.n	8003d0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	f003 0207 	and.w	r2, r3, #7
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	3310      	adds	r3, #16
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	705a      	strb	r2, [r3, #1]
 8003d0a:	e00c      	b.n	8003d26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_PCD_EP_SetStall+0x7e>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e00e      	b.n	8003d64 <HAL_PCD_EP_SetStall+0x9c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f004 ff32 	bl	8008bbe <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	7912      	ldrb	r2, [r2, #4]
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e040      	b.n	8003e0c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da0e      	bge.n	8003db0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	f003 0207 	and.w	r2, r3, #7
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	3310      	adds	r3, #16
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	705a      	strb	r2, [r3, #1]
 8003dae:	e00e      	b.n	8003dce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_PCD_EP_ClrStall+0x82>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e00e      	b.n	8003e0c <HAL_PCD_EP_ClrStall+0xa0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 ff2f 	bl	8008c60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b096      	sub	sp, #88	@ 0x58
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e1c:	e3ad      	b.n	800457a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003e38:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 816f 	bne.w	8004120 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d14c      	bne.n	8003ee8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5e:	81fb      	strh	r3, [r7, #14]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	89fb      	ldrh	r3, [r7, #14]
 8003e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3310      	adds	r3, #16
 8003e76:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	441a      	add	r2, r3
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f007 f9f2 	bl	800b29a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7b1b      	ldrb	r3, [r3, #12]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 835c 	beq.w	800457a <PCD_EP_ISR_Handler+0x766>
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f040 8357 	bne.w	800457a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7b1b      	ldrb	r3, [r3, #12]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	731a      	strb	r2, [r3, #12]
 8003ee6:	e348      	b.n	800457a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003eee:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003efa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d032      	beq.n	8003f6c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f004 ffcd 	bl	8008ee0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f52:	4013      	ands	r3, r2
 8003f54:	823b      	strh	r3, [r7, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	8a3a      	ldrh	r2, [r7, #16]
 8003f5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f60:	b292      	uxth	r2, r2
 8003f62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f007 f96b 	bl	800b240 <HAL_PCD_SetupStageCallback>
 8003f6a:	e306      	b.n	800457a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f280 8302 	bge.w	800457a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f82:	4013      	ands	r3, r2
 8003f84:	83fb      	strh	r3, [r7, #30]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	8bfa      	ldrh	r2, [r7, #30]
 8003f8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f90:	b292      	uxth	r2, r2
 8003f92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <PCD_EP_ISR_Handler+0x1e4>
 8003fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d015      	beq.n	8003ff8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd2:	6959      	ldr	r1, [r3, #20]
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fda:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f004 ff7f 	bl	8008ee0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	441a      	add	r2, r3
 8003fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f007 f936 	bl	800b264 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004002:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 82b5 	bne.w	800457a <PCD_EP_ISR_Handler+0x766>
 8004010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004014:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004018:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800401c:	f000 82ad 	beq.w	800457a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800402e:	b29b      	uxth	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404a:	b29a      	uxth	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	801a      	strh	r2, [r3, #0]
 8004050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b3e      	cmp	r3, #62	@ 0x3e
 8004056:	d91d      	bls.n	8004094 <PCD_EP_ISR_Handler+0x280>
 8004058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <PCD_EP_ISR_Handler+0x25e>
 800406c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406e:	3b01      	subs	r3, #1
 8004070:	647b      	str	r3, [r7, #68]	@ 0x44
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29a      	uxth	r2, r3
 8004078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407a:	b29b      	uxth	r3, r3
 800407c:	029b      	lsls	r3, r3, #10
 800407e:	b29b      	uxth	r3, r3
 8004080:	4313      	orrs	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800408c:	b29a      	uxth	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	e026      	b.n	80040e2 <PCD_EP_ISR_Handler+0x2ce>
 8004094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <PCD_EP_ISR_Handler+0x29e>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	e017      	b.n	80040e2 <PCD_EP_ISR_Handler+0x2ce>
 80040b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <PCD_EP_ISR_Handler+0x2b8>
 80040c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c8:	3301      	adds	r3, #1
 80040ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	b29a      	uxth	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f2:	827b      	strh	r3, [r7, #18]
 80040f4:	8a7b      	ldrh	r3, [r7, #18]
 80040f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80040fa:	827b      	strh	r3, [r7, #18]
 80040fc:	8a7b      	ldrh	r3, [r7, #18]
 80040fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004102:	827b      	strh	r3, [r7, #18]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	8a7b      	ldrh	r3, [r7, #18]
 800410a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800410e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411a:	b29b      	uxth	r3, r3
 800411c:	8013      	strh	r3, [r2, #0]
 800411e:	e22c      	b.n	800457a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004134:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004138:	2b00      	cmp	r3, #0
 800413a:	f280 80f6 	bge.w	800432a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29a      	uxth	r2, r3
 8004150:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004154:	4013      	ands	r3, r2
 8004156:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800416c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004170:	b292      	uxth	r2, r2
 8004172:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004174:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	7b1b      	ldrb	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d123      	bne.n	80041da <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80041ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 808e 	beq.w	80042e0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	6959      	ldr	r1, [r3, #20]
 80041cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ce:	88da      	ldrh	r2, [r3, #6]
 80041d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041d4:	f004 fe84 	bl	8008ee0 <USB_ReadPMA>
 80041d8:	e082      	b.n	80042e0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80041da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041dc:	78db      	ldrb	r3, [r3, #3]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d10a      	bne.n	80041f8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80041e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041e6:	461a      	mov	r2, r3
 80041e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9d3 	bl	8004596 <HAL_PCD_EP_DB_Receive>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80041f6:	e073      	b.n	80042e0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004212:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	441a      	add	r2, r3
 8004224:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800422c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004234:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004238:	b29b      	uxth	r3, r3
 800423a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d022      	beq.n	800429c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	4413      	add	r3, r2
 8004270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800427e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d02c      	beq.n	80042e0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428c:	6959      	ldr	r1, [r3, #20]
 800428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004290:	891a      	ldrh	r2, [r3, #8]
 8004292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004296:	f004 fe23 	bl	8008ee0 <USB_ReadPMA>
 800429a:	e021      	b.n	80042e0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	4413      	add	r3, r2
 80042b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80042c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d2:	6959      	ldr	r1, [r3, #20]
 80042d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d6:	895a      	ldrh	r2, [r3, #10]
 80042d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042dc:	f004 fe00 	bl	8008ee0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042e8:	441a      	add	r2, r3
 80042ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042f6:	441a      	add	r2, r3
 80042f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <PCD_EP_ISR_Handler+0x4fc>
 8004304:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	429a      	cmp	r2, r3
 800430e:	d206      	bcs.n	800431e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f006 ffa4 	bl	800b264 <HAL_PCD_DataOutStageCallback>
 800431c:	e005      	b.n	800432a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004324:	4618      	mov	r0, r3
 8004326:	f003 f899 	bl	800745c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800432a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8121 	beq.w	800457a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004338:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	3310      	adds	r3, #16
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800437c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004384:	b29b      	uxth	r3, r3
 8004386:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438a:	78db      	ldrb	r3, [r3, #3]
 800438c:	2b01      	cmp	r3, #1
 800438e:	f040 80a2 	bne.w	80044d6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004394:	2200      	movs	r2, #0
 8004396:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439a:	7b1b      	ldrb	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8093 	beq.w	80044c8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d046      	beq.n	800443c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d126      	bne.n	8004404 <PCD_EP_ISR_Handler+0x5f0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	4413      	add	r3, r2
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	00da      	lsls	r2, r3, #3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	4413      	add	r3, r2
 80043d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043dc:	623b      	str	r3, [r7, #32]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e061      	b.n	80044c8 <PCD_EP_ISR_Handler+0x6b4>
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d15d      	bne.n	80044c8 <PCD_EP_ISR_Handler+0x6b4>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	4413      	add	r3, r2
 8004422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	00da      	lsls	r2, r3, #3
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	4413      	add	r3, r2
 800442e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	2200      	movs	r2, #0
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	e045      	b.n	80044c8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d126      	bne.n	8004498 <PCD_EP_ISR_Handler+0x684>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004458:	b29b      	uxth	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445e:	4413      	add	r3, r2
 8004460:	637b      	str	r3, [r7, #52]	@ 0x34
 8004462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	00da      	lsls	r2, r3, #3
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	4413      	add	r3, r2
 800446c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004470:	633b      	str	r3, [r7, #48]	@ 0x30
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447c:	b29a      	uxth	r2, r3
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004490:	b29a      	uxth	r2, r3
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	e017      	b.n	80044c8 <PCD_EP_ISR_Handler+0x6b4>
 8004498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d113      	bne.n	80044c8 <PCD_EP_ISR_Handler+0x6b4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ae:	4413      	add	r3, r2
 80044b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	00da      	lsls	r2, r3, #3
 80044b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ba:	4413      	add	r3, r2
 80044bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	2200      	movs	r2, #0
 80044c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f006 fee3 	bl	800b29a <HAL_PCD_DataInStageCallback>
 80044d4:	e051      	b.n	800457a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d144      	bne.n	800456c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004506:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800450a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004512:	429a      	cmp	r2, r3
 8004514:	d907      	bls.n	8004526 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004522:	619a      	str	r2, [r3, #24]
 8004524:	e002      	b.n	800452c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004528:	2200      	movs	r2, #0
 800452a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800452c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f006 fead 	bl	800b29a <HAL_PCD_DataInStageCallback>
 8004540:	e01b      	b.n	800457a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800454a:	441a      	add	r2, r3
 800454c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004558:	441a      	add	r2, r3
 800455a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800455c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004564:	4618      	mov	r0, r3
 8004566:	f002 ff79 	bl	800745c <USB_EPStartXfer>
 800456a:	e006      	b.n	800457a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800456c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004570:	461a      	mov	r2, r3
 8004572:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f917 	bl	80047a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004582:	b29b      	uxth	r3, r3
 8004584:	b21b      	sxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	f6ff ac49 	blt.w	8003e1e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3758      	adds	r7, #88	@ 0x58
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d07c      	beq.n	80046a8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d306      	bcc.n	80045ec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	8b7b      	ldrh	r3, [r7, #26]
 80045e4:	1ad2      	subs	r2, r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	619a      	str	r2, [r3, #24]
 80045ea:	e002      	b.n	80045f2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d123      	bne.n	8004642 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004614:	833b      	strh	r3, [r7, #24]
 8004616:	8b3b      	ldrh	r3, [r7, #24]
 8004618:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800461c:	833b      	strh	r3, [r7, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	441a      	add	r2, r3
 800462c:	8b3b      	ldrh	r3, [r7, #24]
 800462e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800463a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01f      	beq.n	800468c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004666:	82fb      	strh	r3, [r7, #22]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	8afb      	ldrh	r3, [r7, #22]
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004684:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800468c:	8b7b      	ldrh	r3, [r7, #26]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8085 	beq.w	800479e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6959      	ldr	r1, [r3, #20]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	891a      	ldrh	r2, [r3, #8]
 80046a0:	8b7b      	ldrh	r3, [r7, #26]
 80046a2:	f004 fc1d 	bl	8008ee0 <USB_ReadPMA>
 80046a6:	e07a      	b.n	800479e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4413      	add	r3, r2
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	8b7b      	ldrh	r3, [r7, #26]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d306      	bcc.n	80046e6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	8b7b      	ldrh	r3, [r7, #26]
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	619a      	str	r2, [r3, #24]
 80046e4:	e002      	b.n	80046ec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2200      	movs	r2, #0
 80046ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d123      	bne.n	800473c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800470a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470e:	83fb      	strh	r3, [r7, #30]
 8004710:	8bfb      	ldrh	r3, [r7, #30]
 8004712:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004716:	83fb      	strh	r3, [r7, #30]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	441a      	add	r2, r3
 8004726:	8bfb      	ldrh	r3, [r7, #30]
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d11f      	bne.n	8004786 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004760:	83bb      	strh	r3, [r7, #28]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8bbb      	ldrh	r3, [r7, #28]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004786:	8b7b      	ldrh	r3, [r7, #26]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6959      	ldr	r1, [r3, #20]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	895a      	ldrh	r2, [r3, #10]
 8004798:	8b7b      	ldrh	r3, [r7, #26]
 800479a:	f004 fba1 	bl	8008ee0 <USB_ReadPMA>
    }
  }

  return count;
 800479e:	8b7b      	ldrh	r3, [r7, #26]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b0a4      	sub	sp, #144	@ 0x90
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 81db 	beq.w	8004b78 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d907      	bls.n	8004806 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	619a      	str	r2, [r3, #24]
 8004804:	e002      	b.n	800480c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 80b9 	bne.w	8004988 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	785b      	ldrb	r3, [r3, #1]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d126      	bne.n	800486c <HAL_PCD_EP_DB_Transmit+0xc4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800482c:	b29b      	uxth	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004832:	4413      	add	r3, r2
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	00da      	lsls	r2, r3, #3
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	4413      	add	r3, r2
 8004840:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004850:	b29a      	uxth	r2, r3
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004864:	b29a      	uxth	r2, r3
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	e01a      	b.n	80048a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d116      	bne.n	80048a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	4413      	add	r3, r2
 800488a:	637b      	str	r3, [r7, #52]	@ 0x34
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	00da      	lsls	r2, r3, #3
 8004892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004894:	4413      	add	r3, r2
 8004896:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800489a:	633b      	str	r3, [r7, #48]	@ 0x30
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	2200      	movs	r2, #0
 80048a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d126      	bne.n	80048fe <HAL_PCD_EP_DB_Transmit+0x156>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	00da      	lsls	r2, r3, #3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	e017      	b.n	800492e <HAL_PCD_EP_DB_Transmit+0x186>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d113      	bne.n	800492e <HAL_PCD_EP_DB_Transmit+0x186>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	4413      	add	r3, r2
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	00da      	lsls	r2, r3, #3
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	4413      	add	r3, r2
 8004922:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2200      	movs	r2, #0
 800492c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f006 fcb0 	bl	800b29a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 82fa 	beq.w	8004f3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004960:	82fb      	strh	r3, [r7, #22]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	8afb      	ldrh	r3, [r7, #22]
 8004972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800497a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800497e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004982:	b29b      	uxth	r3, r3
 8004984:	8013      	strh	r3, [r2, #0]
 8004986:	e2d8      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d021      	beq.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 82ac 	bne.w	8004f3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049ea:	441a      	add	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049f8:	441a      	add	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6a1a      	ldr	r2, [r3, #32]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d30b      	bcc.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6a1a      	ldr	r2, [r3, #32]
 8004a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	621a      	str	r2, [r3, #32]
 8004a20:	e017      	b.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a3a:	e00a      	b.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d165      	bne.n	8004b26 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6e:	4413      	add	r3, r2
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	00da      	lsls	r2, r3, #3
 8004a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a96:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a98:	d91d      	bls.n	8004ad6 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	029b      	lsls	r3, r3, #10
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	e044      	b.n	8004b60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	e035      	b.n	8004b60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_PCD_EP_DB_Transmit+0x366>
 8004b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	e01c      	b.n	8004b60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d118      	bne.n	8004b60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b42:	4413      	add	r3, r2
 8004b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	00da      	lsls	r2, r3, #3
 8004b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4e:	4413      	add	r3, r2
 8004b50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6959      	ldr	r1, [r3, #20]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	891a      	ldrh	r2, [r3, #8]
 8004b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f004 f973 	bl	8008e5c <USB_WritePMA>
 8004b76:	e1e0      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b9c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d307      	bcc.n	8004bbc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	619a      	str	r2, [r3, #24]
 8004bba:	e002      	b.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 80c0 	bne.w	8004d4c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	785b      	ldrb	r3, [r3, #1]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d126      	bne.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004be8:	4413      	add	r3, r2
 8004bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	00da      	lsls	r2, r3, #3
 8004bf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	e01a      	b.n	8004c58 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d116      	bne.n	8004c58 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c3e:	4413      	add	r3, r2
 8004c40:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	00da      	lsls	r2, r3, #3
 8004c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c54:	2200      	movs	r2, #0
 8004c56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d12b      	bne.n	8004cbe <HAL_PCD_EP_DB_Transmit+0x516>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c7a:	4413      	add	r3, r2
 8004c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	00da      	lsls	r2, r3, #3
 8004c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c86:	4413      	add	r3, r2
 8004c88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	e017      	b.n	8004cee <HAL_PCD_EP_DB_Transmit+0x546>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d113      	bne.n	8004cee <HAL_PCD_EP_DB_Transmit+0x546>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd4:	4413      	add	r3, r2
 8004cd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	00da      	lsls	r2, r3, #3
 8004cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ce6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f006 fad0 	bl	800b29a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 811a 	bne.w	8004f3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d20:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
 8004d4a:	e0f6      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d121      	bne.n	8004d9a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	f040 80ca 	bne.w	8004f3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dae:	441a      	add	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d30b      	bcc.n	8004de6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	621a      	str	r2, [r3, #32]
 8004de4:	e017      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d108      	bne.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004dee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004dfe:	e00a      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d165      	bne.n	8004ef0 <HAL_PCD_EP_DB_Transmit+0x748>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e38:	4413      	add	r3, r2
 8004e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	00da      	lsls	r2, r3, #3
 8004e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e44:	4413      	add	r3, r2
 8004e46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e62:	d91d      	bls.n	8004ea0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004e78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e041      	b.n	8004f24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <HAL_PCD_EP_DB_Transmit+0x716>
 8004ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e032      	b.n	8004f24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_PCD_EP_DB_Transmit+0x730>
 8004ed2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	029b      	lsls	r3, r3, #10
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e019      	b.n	8004f24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d115      	bne.n	8004f24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f06:	4413      	add	r3, r2
 8004f08:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	00da      	lsls	r2, r3, #3
 8004f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f12:	4413      	add	r3, r2
 8004f14:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f22:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	6959      	ldr	r1, [r3, #20]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	895a      	ldrh	r2, [r3, #10]
 8004f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f003 ff91 	bl	8008e5c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f54:	82bb      	strh	r3, [r7, #20]
 8004f56:	8abb      	ldrh	r3, [r7, #20]
 8004f58:	f083 0310 	eor.w	r3, r3, #16
 8004f5c:	82bb      	strh	r3, [r7, #20]
 8004f5e:	8abb      	ldrh	r3, [r7, #20]
 8004f60:	f083 0320 	eor.w	r3, r3, #32
 8004f64:	82bb      	strh	r3, [r7, #20]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	441a      	add	r2, r3
 8004f74:	8abb      	ldrh	r3, [r7, #20]
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3790      	adds	r7, #144	@ 0x90
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	817b      	strh	r3, [r7, #10]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004fa6:	897b      	ldrh	r3, [r7, #10]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb2:	897b      	ldrh	r3, [r7, #10]
 8004fb4:	f003 0207 	and.w	r2, r3, #7
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	3310      	adds	r3, #16
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e009      	b.n	8004fde <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fca:	897a      	ldrh	r2, [r7, #10]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004fde:	893b      	ldrh	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	80da      	strh	r2, [r3, #6]
 8004ff2:	e00b      	b.n	800500c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	b29a      	uxth	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800503e:	b29b      	uxth	r3, r3
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005052:	b29b      	uxth	r3, r3
 8005054:	f043 0302 	orr.w	r3, r3, #2
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8005078:	4b2b      	ldr	r3, [pc, #172]	@ (8005128 <HAL_PWR_ConfigPVD+0xb8>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f023 020e 	bic.w	r2, r3, #14
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4928      	ldr	r1, [pc, #160]	@ (8005128 <HAL_PWR_ConfigPVD+0xb8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800508a:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4a27      	ldr	r2, [pc, #156]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 8005090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005094:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8005096:	4b25      	ldr	r3, [pc, #148]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a24      	ldr	r2, [pc, #144]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 800509c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80050a2:	4b22      	ldr	r3, [pc, #136]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	4a21      	ldr	r2, [pc, #132]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ac:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80050ae:	4b1f      	ldr	r3, [pc, #124]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b8:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80050c6:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a18      	ldr	r2, [pc, #96]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80050de:	4b13      	ldr	r3, [pc, #76]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4a12      	ldr	r2, [pc, #72]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e8:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4a0c      	ldr	r2, [pc, #48]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4a06      	ldr	r2, [pc, #24]	@ (800512c <HAL_PWR_ConfigPVD+0xbc>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005118:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40007000 	.word	0x40007000
 800512c:	40010400 	.word	0x40010400

08005130 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_PWR_EnablePVD+0x1c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4a04      	ldr	r2, [pc, #16]	@ (800514c <HAL_PWR_EnablePVD+0x1c>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6053      	str	r3, [r2, #4]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40007000 	.word	0x40007000

08005150 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d141      	bne.n	80051f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800516e:	4b4b      	ldr	r3, [pc, #300]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517a:	d131      	bne.n	80051e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800517c:	4b47      	ldr	r3, [pc, #284]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005182:	4a46      	ldr	r2, [pc, #280]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800518c:	4b43      	ldr	r3, [pc, #268]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005194:	4a41      	ldr	r2, [pc, #260]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800519a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800519c:	4b40      	ldr	r3, [pc, #256]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2232      	movs	r2, #50	@ 0x32
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	4a3f      	ldr	r2, [pc, #252]	@ (80052a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	0c9b      	lsrs	r3, r3, #18
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b2:	e002      	b.n	80051ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ba:	4b38      	ldr	r3, [pc, #224]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c6:	d102      	bne.n	80051ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f2      	bne.n	80051b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051ce:	4b33      	ldr	r3, [pc, #204]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051da:	d158      	bne.n	800528e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e057      	b.n	8005290 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051e0:	4b2e      	ldr	r3, [pc, #184]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e6:	4a2d      	ldr	r2, [pc, #180]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051f0:	e04d      	b.n	800528e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f8:	d141      	bne.n	800527e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051fa:	4b28      	ldr	r3, [pc, #160]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005206:	d131      	bne.n	800526c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005208:	4b24      	ldr	r3, [pc, #144]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800520e:	4a23      	ldr	r2, [pc, #140]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005214:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005218:	4b20      	ldr	r3, [pc, #128]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005220:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005226:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005228:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2232      	movs	r2, #50	@ 0x32
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	4a1c      	ldr	r2, [pc, #112]	@ (80052a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	0c9b      	lsrs	r3, r3, #18
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800523e:	e002      	b.n	8005246 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b01      	subs	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005246:	4b15      	ldr	r3, [pc, #84]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005252:	d102      	bne.n	800525a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f2      	bne.n	8005240 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800525a:	4b10      	ldr	r3, [pc, #64]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005266:	d112      	bne.n	800528e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e011      	b.n	8005290 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800526c:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005272:	4a0a      	ldr	r2, [pc, #40]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005278:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800527c:	e007      	b.n	800528e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800527e:	4b07      	ldr	r3, [pc, #28]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005286:	4a05      	ldr	r2, [pc, #20]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005288:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800528c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40007000 	.word	0x40007000
 80052a0:	20000000 	.word	0x20000000
 80052a4:	431bde83 	.word	0x431bde83

080052a8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 80052ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80052b8:	f7ff ff4a 	bl	8005150 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80052bc:	4b18      	ldr	r3, [pc, #96]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80052be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80052c2:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 80052c4:	4b16      	ldr	r3, [pc, #88]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 80052d0:	f000 f828 	bl	8005324 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80052d4:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80052d6:	2208      	movs	r2, #8
 80052d8:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 80052da:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80052dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 80052e6:	f000 f824 	bl	8005332 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 80052ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80052ec:	2210      	movs	r2, #16
 80052ee:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 80052f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80052f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80052fc:	f000 f820 	bl	8005340 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005300:	4b07      	ldr	r3, [pc, #28]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005302:	2220      	movs	r2, #32
 8005304:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8005312:	f000 f81c 	bl	800534e <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8005316:	4b02      	ldr	r3, [pc, #8]	@ (8005320 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005318:	2240      	movs	r2, #64	@ 0x40
 800531a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40010400 	.word	0x40010400

08005324 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005360:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800536a:	6093      	str	r3, [r2, #8]
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40007000 	.word	0x40007000

0800537c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e2fe      	b.n	800598c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d075      	beq.n	8005486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800539a:	4b97      	ldr	r3, [pc, #604]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053a4:	4b94      	ldr	r3, [pc, #592]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d102      	bne.n	80053ba <HAL_RCC_OscConfig+0x3e>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d002      	beq.n	80053c0 <HAL_RCC_OscConfig+0x44>
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10b      	bne.n	80053d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	4b8d      	ldr	r3, [pc, #564]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d05b      	beq.n	8005484 <HAL_RCC_OscConfig+0x108>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d157      	bne.n	8005484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e2d9      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e0:	d106      	bne.n	80053f0 <HAL_RCC_OscConfig+0x74>
 80053e2:	4b85      	ldr	r3, [pc, #532]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a84      	ldr	r2, [pc, #528]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e01d      	b.n	800542c <HAL_RCC_OscConfig+0xb0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0x98>
 80053fa:	4b7f      	ldr	r3, [pc, #508]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7e      	ldr	r2, [pc, #504]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b7c      	ldr	r3, [pc, #496]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a7b      	ldr	r2, [pc, #492]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e00b      	b.n	800542c <HAL_RCC_OscConfig+0xb0>
 8005414:	4b78      	ldr	r3, [pc, #480]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a77      	ldr	r2, [pc, #476]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800541a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b75      	ldr	r3, [pc, #468]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a74      	ldr	r2, [pc, #464]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800542a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fc fa4e 	bl	80018d4 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800543c:	f7fc fa4a 	bl	80018d4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	@ 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e29e      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800544e:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0xc0>
 800545a:	e014      	b.n	8005486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fc fa3a 	bl	80018d4 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005464:	f7fc fa36 	bl	80018d4 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	@ 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e28a      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005476:	4b60      	ldr	r3, [pc, #384]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0xe8>
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d075      	beq.n	800557e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005492:	4b59      	ldr	r3, [pc, #356]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800549c:	4b56      	ldr	r3, [pc, #344]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d102      	bne.n	80054b2 <HAL_RCC_OscConfig+0x136>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d002      	beq.n	80054b8 <HAL_RCC_OscConfig+0x13c>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11f      	bne.n	80054f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b8:	4b4f      	ldr	r3, [pc, #316]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_OscConfig+0x154>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e25d      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d0:	4b49      	ldr	r3, [pc, #292]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	4946      	ldr	r1, [pc, #280]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054e4:	4b45      	ldr	r3, [pc, #276]	@ (80055fc <HAL_RCC_OscConfig+0x280>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fc f9a7 	bl	800183c <HAL_InitTick>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d043      	beq.n	800557c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e249      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d023      	beq.n	8005548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005500:	4b3d      	ldr	r3, [pc, #244]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a3c      	ldr	r2, [pc, #240]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800550a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fc f9e2 	bl	80018d4 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005514:	f7fc f9de 	bl	80018d4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e232      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005526:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	061b      	lsls	r3, r3, #24
 8005540:	492d      	ldr	r1, [pc, #180]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	604b      	str	r3, [r1, #4]
 8005546:	e01a      	b.n	800557e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005548:	4b2b      	ldr	r3, [pc, #172]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2a      	ldr	r2, [pc, #168]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800554e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fc f9be 	bl	80018d4 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555c:	f7fc f9ba 	bl	80018d4 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e20e      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800556e:	4b22      	ldr	r3, [pc, #136]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x1e0>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d041      	beq.n	800560e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01c      	beq.n	80055cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005592:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005598:	4a17      	ldr	r2, [pc, #92]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fc f997 	bl	80018d4 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055aa:	f7fc f993 	bl	80018d4 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1e7      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055bc:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80055be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0ef      	beq.n	80055aa <HAL_RCC_OscConfig+0x22e>
 80055ca:	e020      	b.n	800560e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d2:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fc f97a 	bl	80018d4 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055e2:	e00d      	b.n	8005600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fc f976 	bl	80018d4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d906      	bls.n	8005600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e1ca      	b.n	800598c <HAL_RCC_OscConfig+0x610>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005600:	4b8c      	ldr	r3, [pc, #560]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ea      	bne.n	80055e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80a6 	beq.w	8005768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561c:	2300      	movs	r3, #0
 800561e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005620:	4b84      	ldr	r3, [pc, #528]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_OscConfig+0x2b4>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_RCC_OscConfig+0x2b6>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	4b7f      	ldr	r3, [pc, #508]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563a:	4a7e      	ldr	r2, [pc, #504]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005640:	6593      	str	r3, [r2, #88]	@ 0x58
 8005642:	4b7c      	ldr	r3, [pc, #496]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800564e:	2301      	movs	r3, #1
 8005650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005652:	4b79      	ldr	r3, [pc, #484]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d118      	bne.n	8005690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800565e:	4b76      	ldr	r3, [pc, #472]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a75      	ldr	r2, [pc, #468]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566a:	f7fc f933 	bl	80018d4 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fc f92f 	bl	80018d4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e183      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005684:	4b6c      	ldr	r3, [pc, #432]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d108      	bne.n	80056aa <HAL_RCC_OscConfig+0x32e>
 8005698:	4b66      	ldr	r3, [pc, #408]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569e:	4a65      	ldr	r2, [pc, #404]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056a8:	e024      	b.n	80056f4 <HAL_RCC_OscConfig+0x378>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d110      	bne.n	80056d4 <HAL_RCC_OscConfig+0x358>
 80056b2:	4b60      	ldr	r3, [pc, #384]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b8:	4a5e      	ldr	r2, [pc, #376]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056d2:	e00f      	b.n	80056f4 <HAL_RCC_OscConfig+0x378>
 80056d4:	4b57      	ldr	r3, [pc, #348]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056da:	4a56      	ldr	r2, [pc, #344]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056e4:	4b53      	ldr	r3, [pc, #332]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	4a52      	ldr	r2, [pc, #328]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056ec:	f023 0304 	bic.w	r3, r3, #4
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d016      	beq.n	800572a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fc f8ea 	bl	80018d4 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fc f8e6 	bl	80018d4 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e138      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571a:	4b46      	ldr	r3, [pc, #280]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ed      	beq.n	8005704 <HAL_RCC_OscConfig+0x388>
 8005728:	e015      	b.n	8005756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fc f8d3 	bl	80018d4 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005730:	e00a      	b.n	8005748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005732:	f7fc f8cf 	bl	80018d4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e121      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005748:	4b3a      	ldr	r3, [pc, #232]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ed      	bne.n	8005732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005756:	7ffb      	ldrb	r3, [r7, #31]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575c:	4b35      	ldr	r3, [pc, #212]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800575e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005760:	4a34      	ldr	r2, [pc, #208]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005766:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d03c      	beq.n	80057ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01c      	beq.n	80057b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800577c:	4b2d      	ldr	r3, [pc, #180]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800577e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005782:	4a2c      	ldr	r2, [pc, #176]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fc f8a2 	bl	80018d4 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005794:	f7fc f89e 	bl	80018d4 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0f2      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0ef      	beq.n	8005794 <HAL_RCC_OscConfig+0x418>
 80057b4:	e01b      	b.n	80057ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c6:	f7fc f885 	bl	80018d4 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ce:	f7fc f881 	bl	80018d4 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e0d5      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057e0:	4b14      	ldr	r3, [pc, #80]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1ef      	bne.n	80057ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80c9 	beq.w	800598a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b0c      	cmp	r3, #12
 8005802:	f000 8083 	beq.w	800590c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d15e      	bne.n	80058cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a08      	ldr	r2, [pc, #32]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005814:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fc f85b 	bl	80018d4 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	e00c      	b.n	800583c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005822:	f7fc f857 	bl	80018d4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d905      	bls.n	800583c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0ab      	b.n	800598c <HAL_RCC_OscConfig+0x610>
 8005834:	40021000 	.word	0x40021000
 8005838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800583c:	4b55      	ldr	r3, [pc, #340]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ec      	bne.n	8005822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005848:	4b52      	ldr	r3, [pc, #328]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	4b52      	ldr	r3, [pc, #328]	@ (8005998 <HAL_RCC_OscConfig+0x61c>)
 800584e:	4013      	ands	r3, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6a11      	ldr	r1, [r2, #32]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005858:	3a01      	subs	r2, #1
 800585a:	0112      	lsls	r2, r2, #4
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005862:	0212      	lsls	r2, r2, #8
 8005864:	4311      	orrs	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800586a:	0852      	lsrs	r2, r2, #1
 800586c:	3a01      	subs	r2, #1
 800586e:	0552      	lsls	r2, r2, #21
 8005870:	4311      	orrs	r1, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005876:	0852      	lsrs	r2, r2, #1
 8005878:	3a01      	subs	r2, #1
 800587a:	0652      	lsls	r2, r2, #25
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005882:	06d2      	lsls	r2, r2, #27
 8005884:	430a      	orrs	r2, r1
 8005886:	4943      	ldr	r1, [pc, #268]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005888:	4313      	orrs	r3, r2
 800588a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800588c:	4b41      	ldr	r3, [pc, #260]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a40      	ldr	r2, [pc, #256]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005898:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4a3d      	ldr	r2, [pc, #244]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800589e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fc f816 	bl	80018d4 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fc f812 	bl	80018d4 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e066      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058be:	4b35      	ldr	r3, [pc, #212]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x530>
 80058ca:	e05e      	b.n	800598a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058cc:	4b31      	ldr	r3, [pc, #196]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fb fffc 	bl	80018d4 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fb fff8 	bl	80018d4 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e04c      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f2:	4b28      	ldr	r3, [pc, #160]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058fe:	4b25      	ldr	r3, [pc, #148]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	4924      	ldr	r1, [pc, #144]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005904:	4b25      	ldr	r3, [pc, #148]	@ (800599c <HAL_RCC_OscConfig+0x620>)
 8005906:	4013      	ands	r3, r2
 8005908:	60cb      	str	r3, [r1, #12]
 800590a:	e03e      	b.n	800598a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e039      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005918:	4b1e      	ldr	r3, [pc, #120]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f003 0203 	and.w	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	429a      	cmp	r2, r3
 800592a:	d12c      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	3b01      	subs	r3, #1
 8005938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593a:	429a      	cmp	r2, r3
 800593c:	d123      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d11b      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d113      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	3b01      	subs	r3, #1
 800596c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d109      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	3b01      	subs	r3, #1
 8005980:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d001      	beq.n	800598a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40021000 	.word	0x40021000
 8005998:	019f800c 	.word	0x019f800c
 800599c:	feeefffc 	.word	0xfeeefffc

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e11e      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b91      	ldr	r3, [pc, #580]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d910      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 020f 	bic.w	r2, r3, #15
 80059ce:	498c      	ldr	r1, [pc, #560]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e106      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d073      	beq.n	8005adc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d129      	bne.n	8005a50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fc:	4b81      	ldr	r3, [pc, #516]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0f4      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a0c:	f000 f972 	bl	8005cf4 <RCC_GetSysClockFreqFromPLLSource>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4a7c      	ldr	r2, [pc, #496]	@ (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d93f      	bls.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d033      	beq.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d12f      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a3a:	4b72      	ldr	r3, [pc, #456]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a42:	4a70      	ldr	r2, [pc, #448]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e024      	b.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a58:	4b6a      	ldr	r3, [pc, #424]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0c6      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a68:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0be      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a78:	f000 f8ce 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005a7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4a61      	ldr	r2, [pc, #388]	@ (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d909      	bls.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a86:	4b5f      	ldr	r3, [pc, #380]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a96:	2380      	movs	r3, #128	@ 0x80
 8005a98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 0203 	bic.w	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4957      	ldr	r1, [pc, #348]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aac:	f7fb ff12 	bl	80018d4 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab4:	f7fb ff0e 	bl	80018d4 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e095      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	4b4e      	ldr	r3, [pc, #312]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 020c 	and.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d1eb      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d023      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af4:	4b43      	ldr	r3, [pc, #268]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a42      	ldr	r2, [pc, #264]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005afe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b14:	4a3b      	ldr	r2, [pc, #236]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1c:	4b39      	ldr	r3, [pc, #228]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	4936      	ldr	r1, [pc, #216]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b80      	cmp	r3, #128	@ 0x80
 8005b34:	d105      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b36:	4b33      	ldr	r3, [pc, #204]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4a32      	ldr	r2, [pc, #200]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b42:	4b2f      	ldr	r3, [pc, #188]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d21d      	bcs.n	8005b8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b50:	4b2b      	ldr	r3, [pc, #172]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 020f 	bic.w	r2, r3, #15
 8005b58:	4929      	ldr	r1, [pc, #164]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b60:	f7fb feb8 	bl	80018d4 <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fb feb4 	bl	80018d4 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e03b      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d1ed      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b98:	4b1a      	ldr	r3, [pc, #104]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4917      	ldr	r1, [pc, #92]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb6:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	490f      	ldr	r1, [pc, #60]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bca:	f000 f825 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	490c      	ldr	r1, [pc, #48]	@ (8005c0c <HAL_RCC_ClockConfig+0x26c>)
 8005bdc:	5ccb      	ldrb	r3, [r1, r3]
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <HAL_RCC_ClockConfig+0x270>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005bea:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <HAL_RCC_ClockConfig+0x274>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fb fe24 	bl	800183c <HAL_InitTick>
 8005bf4:	4603      	mov	r3, r0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40021000 	.word	0x40021000
 8005c08:	04c4b400 	.word	0x04c4b400
 8005c0c:	0800b890 	.word	0x0800b890
 8005c10:	20000000 	.word	0x20000000
 8005c14:	20000004 	.word	0x20000004

08005c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d102      	bne.n	8005c30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e047      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c30:	4b27      	ldr	r3, [pc, #156]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 030c 	and.w	r3, r3, #12
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c3c:	4b26      	ldr	r3, [pc, #152]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e03e      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c42:	4b23      	ldr	r3, [pc, #140]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d136      	bne.n	8005cbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c4e:	4b20      	ldr	r3, [pc, #128]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	3301      	adds	r3, #1
 8005c64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d10c      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	4a16      	ldr	r2, [pc, #88]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c76:	68d2      	ldr	r2, [r2, #12]
 8005c78:	0a12      	lsrs	r2, r2, #8
 8005c7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	617b      	str	r3, [r7, #20]
      break;
 8005c84:	e00c      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c86:	4a13      	ldr	r2, [pc, #76]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	4a10      	ldr	r2, [pc, #64]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c90:	68d2      	ldr	r2, [r2, #12]
 8005c92:	0a12      	lsrs	r2, r2, #8
 8005c94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c98:	fb02 f303 	mul.w	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
      break;
 8005c9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	0e5b      	lsrs	r3, r3, #25
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	3301      	adds	r3, #1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e001      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cc0:	693b      	ldr	r3, [r7, #16]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	00f42400 	.word	0x00f42400
 8005cd8:	007a1200 	.word	0x007a1200

08005cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce0:	4b03      	ldr	r3, [pc, #12]	@ (8005cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20000000 	.word	0x20000000

08005cf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d04:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	3301      	adds	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d10c      	bne.n	8005d32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d18:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	4a14      	ldr	r2, [pc, #80]	@ (8005d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d22:	68d2      	ldr	r2, [r2, #12]
 8005d24:	0a12      	lsrs	r2, r2, #8
 8005d26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	617b      	str	r3, [r7, #20]
    break;
 8005d30:	e00c      	b.n	8005d4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d32:	4a12      	ldr	r2, [pc, #72]	@ (8005d7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8005d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d3c:	68d2      	ldr	r2, [r2, #12]
 8005d3e:	0a12      	lsrs	r2, r2, #8
 8005d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d44:	fb02 f303 	mul.w	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]
    break;
 8005d4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d4c:	4b09      	ldr	r3, [pc, #36]	@ (8005d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	0e5b      	lsrs	r3, r3, #25
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	3301      	adds	r3, #1
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d66:	687b      	ldr	r3, [r7, #4]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40021000 	.word	0x40021000
 8005d78:	007a1200 	.word	0x007a1200
 8005d7c:	00f42400 	.word	0x00f42400

08005d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d88:	2300      	movs	r3, #0
 8005d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8098 	beq.w	8005ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da2:	4b43      	ldr	r3, [pc, #268]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10d      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dae:	4b40      	ldr	r3, [pc, #256]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db2:	4a3f      	ldr	r2, [pc, #252]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dba:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dca:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a39      	ldr	r2, [pc, #228]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dd6:	f7fb fd7d 	bl	80018d4 <HAL_GetTick>
 8005dda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ddc:	e009      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dde:	f7fb fd79 	bl	80018d4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d902      	bls.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	74fb      	strb	r3, [r7, #19]
        break;
 8005df0:	e005      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df2:	4b30      	ldr	r3, [pc, #192]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ef      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d159      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e04:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01e      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d019      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e20:	4b23      	ldr	r3, [pc, #140]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e2c:	4b20      	ldr	r3, [pc, #128]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e32:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e4c:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5e:	f7fb fd39 	bl	80018d4 <HAL_GetTick>
 8005e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e64:	e00b      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fb fd35 	bl	80018d4 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d902      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e7c:	e006      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0ec      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e8c:	7cfb      	ldrb	r3, [r7, #19]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e92:	4b07      	ldr	r3, [pc, #28]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea0:	4903      	ldr	r1, [pc, #12]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ea8:	e008      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eaa:	7cfb      	ldrb	r3, [r7, #19]
 8005eac:	74bb      	strb	r3, [r7, #18]
 8005eae:	e005      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7cfb      	ldrb	r3, [r7, #19]
 8005eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ebc:	7c7b      	ldrb	r3, [r7, #17]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d105      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec2:	4ba7      	ldr	r3, [pc, #668]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec6:	4aa6      	ldr	r2, [pc, #664]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ecc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eda:	4ba1      	ldr	r3, [pc, #644]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	f023 0203 	bic.w	r2, r3, #3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	499d      	ldr	r1, [pc, #628]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005efc:	4b98      	ldr	r3, [pc, #608]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f02:	f023 020c 	bic.w	r2, r3, #12
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	4995      	ldr	r1, [pc, #596]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f1e:	4b90      	ldr	r3, [pc, #576]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	498c      	ldr	r1, [pc, #560]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f40:	4b87      	ldr	r3, [pc, #540]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	4984      	ldr	r1, [pc, #528]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f62:	4b7f      	ldr	r3, [pc, #508]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	497b      	ldr	r1, [pc, #492]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f84:	4b76      	ldr	r3, [pc, #472]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	4973      	ldr	r1, [pc, #460]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	496a      	ldr	r1, [pc, #424]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fc8:	4b65      	ldr	r3, [pc, #404]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4962      	ldr	r1, [pc, #392]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fea:	4b5d      	ldr	r3, [pc, #372]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	4959      	ldr	r1, [pc, #356]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800600c:	4b54      	ldr	r3, [pc, #336]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006012:	f023 0203 	bic.w	r2, r3, #3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601a:	4951      	ldr	r1, [pc, #324]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800602e:	4b4c      	ldr	r3, [pc, #304]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006034:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	4948      	ldr	r1, [pc, #288]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800604c:	2b00      	cmp	r3, #0
 800604e:	d015      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006050:	4b43      	ldr	r3, [pc, #268]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	4940      	ldr	r1, [pc, #256]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800606e:	d105      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006070:	4b3b      	ldr	r3, [pc, #236]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4a3a      	ldr	r2, [pc, #232]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800607a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006084:	2b00      	cmp	r3, #0
 8006086:	d015      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006088:	4b35      	ldr	r3, [pc, #212]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006096:	4932      	ldr	r1, [pc, #200]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060a6:	d105      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d015      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060c0:	4b27      	ldr	r3, [pc, #156]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	4924      	ldr	r1, [pc, #144]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060de:	d105      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060f8:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006106:	4916      	ldr	r1, [pc, #88]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006118:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a10      	ldr	r2, [pc, #64]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006122:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d019      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006130:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	4908      	ldr	r1, [pc, #32]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800614e:	d109      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006150:	4b03      	ldr	r3, [pc, #12]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4a02      	ldr	r2, [pc, #8]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800615a:	60d3      	str	r3, [r2, #12]
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d015      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006170:	4b29      	ldr	r3, [pc, #164]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617e:	4926      	ldr	r1, [pc, #152]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800618e:	d105      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006190:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4a20      	ldr	r2, [pc, #128]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800619a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80061a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b6:	4918      	ldr	r1, [pc, #96]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c6:	d105      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061c8:	4b13      	ldr	r3, [pc, #76]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a12      	ldr	r2, [pc, #72]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d015      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ee:	490a      	ldr	r1, [pc, #40]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061fe:	d105      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4a04      	ldr	r2, [pc, #16]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800620a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800620c:	7cbb      	ldrb	r3, [r7, #18]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000

0800621c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e09d      	b.n	800636a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d108      	bne.n	8006248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800623e:	d009      	beq.n	8006254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	61da      	str	r2, [r3, #28]
 8006246:	e005      	b.n	8006254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb f888 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800628a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006294:	d902      	bls.n	800629c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	e002      	b.n	80062a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800629c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062aa:	d007      	beq.n	80062bc <HAL_SPI_Init+0xa0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062fe:	ea42 0103 	orr.w	r1, r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	f003 0204 	and.w	r2, r3, #4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006338:	ea42 0103 	orr.w	r1, r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e097      	b.n	80064b6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fb f854 	bl	8001448 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80063b6:	f023 0307 	bic.w	r3, r3, #7
 80063ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f000 fa7e 	bl	80068c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063f4:	f023 0303 	bic.w	r3, r3, #3
 80063f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	4313      	orrs	r3, r2
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006412:	f023 030c 	bic.w	r3, r3, #12
 8006416:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800641e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	4313      	orrs	r3, r2
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	011a      	lsls	r2, r3, #4
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	031b      	lsls	r3, r3, #12
 8006442:	4313      	orrs	r3, r2
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006450:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006458:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	4313      	orrs	r3, r2
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064de:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d110      	bne.n	8006510 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d102      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064f4:	7b7b      	ldrb	r3, [r7, #13]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d001      	beq.n	80064fe <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e069      	b.n	80065d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2202      	movs	r2, #2
 800650a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800650e:	e031      	b.n	8006574 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b04      	cmp	r3, #4
 8006514:	d110      	bne.n	8006538 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d102      	bne.n	8006522 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800651c:	7b3b      	ldrb	r3, [r7, #12]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e055      	b.n	80065d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2202      	movs	r2, #2
 8006532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006536:	e01d      	b.n	8006574 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d108      	bne.n	8006550 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d105      	bne.n	8006550 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006544:	7b7b      	ldrb	r3, [r7, #13]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d102      	bne.n	8006550 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800654a:	7b3b      	ldrb	r3, [r7, #12]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d001      	beq.n	8006554 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e03e      	b.n	80065d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_TIM_Encoder_Start+0xc4>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b04      	cmp	r3, #4
 800657e:	d008      	beq.n	8006592 <HAL_TIM_Encoder_Start+0xd4>
 8006580:	e00f      	b.n	80065a2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2201      	movs	r2, #1
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fa50 	bl	8006a30 <TIM_CCxChannelCmd>
      break;
 8006590:	e016      	b.n	80065c0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2201      	movs	r2, #1
 8006598:	2104      	movs	r1, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fa48 	bl	8006a30 <TIM_CCxChannelCmd>
      break;
 80065a0:	e00e      	b.n	80065c0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fa40 	bl	8006a30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2201      	movs	r2, #1
 80065b6:	2104      	movs	r1, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fa39 	bl	8006a30 <TIM_CCxChannelCmd>
      break;
 80065be:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d020      	beq.n	800663e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01b      	beq.n	800663e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f06f 0202 	mvn.w	r2, #2
 800660e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f931 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 800662a:	e005      	b.n	8006638 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f923 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f934 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d020      	beq.n	800668a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01b      	beq.n	800668a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0204 	mvn.w	r2, #4
 800665a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f90b 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 8006676:	e005      	b.n	8006684 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8fd 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f90e 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d020      	beq.n	80066d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01b      	beq.n	80066d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f06f 0208 	mvn.w	r2, #8
 80066a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2204      	movs	r2, #4
 80066ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f8e5 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 80066c2:	e005      	b.n	80066d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f8d7 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f8e8 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d020      	beq.n	8006722 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01b      	beq.n	8006722 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f06f 0210 	mvn.w	r2, #16
 80066f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2208      	movs	r2, #8
 80066f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8bf 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 800670e:	e005      	b.n	800671c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8b1 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8c2 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00c      	beq.n	8006746 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f06f 0201 	mvn.w	r2, #1
 800673e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7f9 fd69 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800676c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa24 	bl	8006bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa1c 	bl	8006bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f87c 	bl	80068b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0220 	mvn.w	r2, #32
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9e4 	bl	8006ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9f0 	bl	8006be4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9e8 	bl	8006bf8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f9e0 	bl	8006c0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f9d8 	bl	8006c20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a4c      	ldr	r2, [pc, #304]	@ (8006a0c <TIM_Base_SetConfig+0x144>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d017      	beq.n	8006910 <TIM_Base_SetConfig+0x48>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e6:	d013      	beq.n	8006910 <TIM_Base_SetConfig+0x48>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a49      	ldr	r2, [pc, #292]	@ (8006a10 <TIM_Base_SetConfig+0x148>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00f      	beq.n	8006910 <TIM_Base_SetConfig+0x48>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a48      	ldr	r2, [pc, #288]	@ (8006a14 <TIM_Base_SetConfig+0x14c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00b      	beq.n	8006910 <TIM_Base_SetConfig+0x48>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a47      	ldr	r2, [pc, #284]	@ (8006a18 <TIM_Base_SetConfig+0x150>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d007      	beq.n	8006910 <TIM_Base_SetConfig+0x48>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a46      	ldr	r2, [pc, #280]	@ (8006a1c <TIM_Base_SetConfig+0x154>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d003      	beq.n	8006910 <TIM_Base_SetConfig+0x48>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a45      	ldr	r2, [pc, #276]	@ (8006a20 <TIM_Base_SetConfig+0x158>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d108      	bne.n	8006922 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a39      	ldr	r2, [pc, #228]	@ (8006a0c <TIM_Base_SetConfig+0x144>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d023      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006930:	d01f      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a36      	ldr	r2, [pc, #216]	@ (8006a10 <TIM_Base_SetConfig+0x148>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01b      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a35      	ldr	r2, [pc, #212]	@ (8006a14 <TIM_Base_SetConfig+0x14c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d017      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a34      	ldr	r2, [pc, #208]	@ (8006a18 <TIM_Base_SetConfig+0x150>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a33      	ldr	r2, [pc, #204]	@ (8006a1c <TIM_Base_SetConfig+0x154>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00f      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a33      	ldr	r2, [pc, #204]	@ (8006a24 <TIM_Base_SetConfig+0x15c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a32      	ldr	r2, [pc, #200]	@ (8006a28 <TIM_Base_SetConfig+0x160>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d007      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a31      	ldr	r2, [pc, #196]	@ (8006a2c <TIM_Base_SetConfig+0x164>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_Base_SetConfig+0xaa>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a20 <TIM_Base_SetConfig+0x158>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d108      	bne.n	8006984 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a18      	ldr	r2, [pc, #96]	@ (8006a0c <TIM_Base_SetConfig+0x144>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d013      	beq.n	80069d8 <TIM_Base_SetConfig+0x110>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a1c <TIM_Base_SetConfig+0x154>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00f      	beq.n	80069d8 <TIM_Base_SetConfig+0x110>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006a24 <TIM_Base_SetConfig+0x15c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00b      	beq.n	80069d8 <TIM_Base_SetConfig+0x110>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a19      	ldr	r2, [pc, #100]	@ (8006a28 <TIM_Base_SetConfig+0x160>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d007      	beq.n	80069d8 <TIM_Base_SetConfig+0x110>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a18      	ldr	r2, [pc, #96]	@ (8006a2c <TIM_Base_SetConfig+0x164>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_Base_SetConfig+0x110>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a13      	ldr	r2, [pc, #76]	@ (8006a20 <TIM_Base_SetConfig+0x158>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d103      	bne.n	80069e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d105      	bne.n	80069fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f023 0201 	bic.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	611a      	str	r2, [r3, #16]
  }
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40015000 	.word	0x40015000
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2201      	movs	r2, #1
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e074      	b.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a34      	ldr	r2, [pc, #208]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a33      	ldr	r2, [pc, #204]	@ (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a31      	ldr	r2, [pc, #196]	@ (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d108      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ad8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a21      	ldr	r2, [pc, #132]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b14:	d01d      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a15      	ldr	r2, [pc, #84]	@ (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a18      	ldr	r2, [pc, #96]	@ (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a11      	ldr	r2, [pc, #68]	@ (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d10c      	bne.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40015000 	.word	0x40015000
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	40014000 	.word	0x40014000

08006ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c44:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006c48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c6a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006c6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	4013      	ands	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b09d      	sub	sp, #116	@ 0x74
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	78db      	ldrb	r3, [r3, #3]
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d81f      	bhi.n	8006d46 <USB_ActivateEndpoint+0x72>
 8006d06:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <USB_ActivateEndpoint+0x38>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d1d 	.word	0x08006d1d
 8006d10:	08006d39 	.word	0x08006d39
 8006d14:	08006d4f 	.word	0x08006d4f
 8006d18:	08006d2b 	.word	0x08006d2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006d28:	e012      	b.n	8006d50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d2e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006d32:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006d36:	e00b      	b.n	8006d50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006d44:	e004      	b.n	8006d50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006d4c:	e000      	b.n	8006d50 <USB_ActivateEndpoint+0x7c>
      break;
 8006d4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	b21b      	sxth	r3, r3
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8a:	b21a      	sxth	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b21b      	sxth	r3, r3
 8006d92:	4313      	orrs	r3, r2
 8006d94:	b21b      	sxth	r3, r3
 8006d96:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006da8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 8178 	bne.w	80070b6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8084 	beq.w	8006ed8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	4413      	add	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	00da      	lsls	r2, r3, #3
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	88db      	ldrh	r3, [r3, #6]
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	827b      	strh	r3, [r7, #18]
 8006e12:	8a7b      	ldrh	r3, [r7, #18]
 8006e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01b      	beq.n	8006e54 <USB_ActivateEndpoint+0x180>
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e32:	823b      	strh	r3, [r7, #16]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	8a3b      	ldrh	r3, [r7, #16]
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	78db      	ldrb	r3, [r3, #3]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d020      	beq.n	8006e9e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e72:	81bb      	strh	r3, [r7, #12]
 8006e74:	89bb      	ldrh	r3, [r7, #12]
 8006e76:	f083 0320 	eor.w	r3, r3, #32
 8006e7a:	81bb      	strh	r3, [r7, #12]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	441a      	add	r2, r3
 8006e86:	89bb      	ldrh	r3, [r7, #12]
 8006e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	8013      	strh	r3, [r2, #0]
 8006e9c:	e2d5      	b.n	800744a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb4:	81fb      	strh	r3, [r7, #14]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	89fb      	ldrh	r3, [r7, #14]
 8006ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]
 8006ed6:	e2b8      	b.n	800744a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	4413      	add	r3, r2
 8006eea:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	00da      	lsls	r2, r3, #3
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	88db      	ldrh	r3, [r3, #6]
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	4413      	add	r3, r2
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	00da      	lsls	r2, r3, #3
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f46:	d91d      	bls.n	8006f84 <USB_ActivateEndpoint+0x2b0>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f003 031f 	and.w	r3, r3, #31
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <USB_ActivateEndpoint+0x28e>
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	029b      	lsls	r3, r3, #10
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	4313      	orrs	r3, r2
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	e026      	b.n	8006fd2 <USB_ActivateEndpoint+0x2fe>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <USB_ActivateEndpoint+0x2ce>
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e017      	b.n	8006fd2 <USB_ActivateEndpoint+0x2fe>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <USB_ActivateEndpoint+0x2e8>
 8006fb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fb8:	3301      	adds	r3, #1
 8006fba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	029b      	lsls	r3, r3, #10
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006fe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d01b      	beq.n	8007022 <USB_ActivateEndpoint+0x34e>
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007000:	843b      	strh	r3, [r7, #32]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	441a      	add	r2, r3
 800700c:	8c3b      	ldrh	r3, [r7, #32]
 800700e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007016:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800701a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701e:	b29b      	uxth	r3, r3
 8007020:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d124      	bne.n	8007074 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800703c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007040:	83bb      	strh	r3, [r7, #28]
 8007042:	8bbb      	ldrh	r3, [r7, #28]
 8007044:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007048:	83bb      	strh	r3, [r7, #28]
 800704a:	8bbb      	ldrh	r3, [r7, #28]
 800704c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007050:	83bb      	strh	r3, [r7, #28]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	441a      	add	r2, r3
 800705c:	8bbb      	ldrh	r3, [r7, #28]
 800705e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800706a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706e:	b29b      	uxth	r3, r3
 8007070:	8013      	strh	r3, [r2, #0]
 8007072:	e1ea      	b.n	800744a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708a:	83fb      	strh	r3, [r7, #30]
 800708c:	8bfb      	ldrh	r3, [r7, #30]
 800708e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007092:	83fb      	strh	r3, [r7, #30]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	8bfb      	ldrh	r3, [r7, #30]
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]
 80070b4:	e1c9      	b.n	800744a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d11e      	bne.n	80070fc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80070f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
 80070fa:	e01d      	b.n	8007138 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800710e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007112:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800712c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007142:	b29b      	uxth	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007148:	4413      	add	r3, r2
 800714a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	00da      	lsls	r2, r3, #3
 8007152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007154:	4413      	add	r3, r2
 8007156:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800715a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	891b      	ldrh	r3, [r3, #8]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	b29b      	uxth	r3, r3
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007176:	b29b      	uxth	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717c:	4413      	add	r3, r2
 800717e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	00da      	lsls	r2, r3, #3
 8007186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007188:	4413      	add	r3, r2
 800718a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800718e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	895b      	ldrh	r3, [r3, #10]
 8007194:	085b      	lsrs	r3, r3, #1
 8007196:	b29b      	uxth	r3, r3
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800719e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f040 8093 	bne.w	80072d0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80071ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80071be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <USB_ActivateEndpoint+0x52a>
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800720c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01b      	beq.n	800724e <USB_ActivateEndpoint+0x57a>
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	441a      	add	r2, r3
 8007238:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800723a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800723e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007246:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800724a:	b29b      	uxth	r3, r3
 800724c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007264:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007266:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007268:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800726c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800726e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007270:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007274:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	441a      	add	r2, r3
 8007280:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800728a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800728e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007292:	b29b      	uxth	r3, r3
 8007294:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	441a      	add	r2, r3
 80072b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	8013      	strh	r3, [r2, #0]
 80072ce:	e0bc      	b.n	800744a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80072e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80072e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01d      	beq.n	8007328 <USB_ActivateEndpoint+0x654>
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007302:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	441a      	add	r2, r3
 8007310:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800731c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007324:	b29b      	uxth	r3, r3
 8007326:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007338:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800733c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01d      	beq.n	8007380 <USB_ActivateEndpoint+0x6ac>
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	441a      	add	r2, r3
 8007368:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800736c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007378:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800737c:	b29b      	uxth	r3, r3
 800737e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	78db      	ldrb	r3, [r3, #3]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d024      	beq.n	80073d2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800739a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800739e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80073a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80073a6:	f083 0320 	eor.w	r3, r3, #32
 80073aa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	441a      	add	r2, r3
 80073b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80073bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	8013      	strh	r3, [r2, #0]
 80073d0:	e01d      	b.n	800740e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	441a      	add	r2, r3
 80073f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80073fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800740a:	b29b      	uxth	r3, r3
 800740c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007424:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	441a      	add	r2, r3
 8007432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800743a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800743e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007446:	b29b      	uxth	r3, r3
 8007448:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800744a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800744e:	4618      	mov	r0, r3
 8007450:	3774      	adds	r7, #116	@ 0x74
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop

0800745c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b0c2      	sub	sp, #264	@ 0x108
 8007460:	af00      	add	r7, sp, #0
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800746a:	6018      	str	r0, [r3, #0]
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007474:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b01      	cmp	r3, #1
 8007484:	f040 86b7 	bne.w	80081f6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	699a      	ldr	r2, [r3, #24]
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d908      	bls.n	80074b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80074a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80074b4:	e007      	b.n	80074c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80074b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	7b1b      	ldrb	r3, [r3, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d13a      	bne.n	800754c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6959      	ldr	r1, [r3, #20]
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	88da      	ldrh	r2, [r3, #6]
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f001 fcad 	bl	8008e5c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800751c:	b29b      	uxth	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	4413      	add	r3, r2
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	00da      	lsls	r2, r3, #3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4413      	add	r3, r2
 8007538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	f000 be1f 	b.w	800818a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	78db      	ldrb	r3, [r3, #3]
 8007558:	2b02      	cmp	r3, #2
 800755a:	f040 8462 	bne.w	8007e22 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6a1a      	ldr	r2, [r3, #32]
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	429a      	cmp	r2, r3
 8007578:	f240 83df 	bls.w	8007d3a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800759e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80075a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	441a      	add	r2, r3
 80075c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80075c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075cc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80075d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	1ad2      	subs	r2, r2, r3
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 81c7 	beq.w	80079ac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800761e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	633b      	str	r3, [r7, #48]	@ 0x30
 800762a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d177      	bne.n	800772a <USB_EPStartXfer+0x2ce>
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007654:	b29b      	uxth	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765a:	4413      	add	r3, r2
 800765c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800765e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	00da      	lsls	r2, r3, #3
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	4413      	add	r3, r2
 8007670:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007674:	627b      	str	r3, [r7, #36]	@ 0x24
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007680:	b29a      	uxth	r2, r3
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768a:	2b3e      	cmp	r3, #62	@ 0x3e
 800768c:	d921      	bls.n	80076d2 <USB_EPStartXfer+0x276>
 800768e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <USB_EPStartXfer+0x252>
 80076a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80076a8:	3b01      	subs	r3, #1
 80076aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	029b      	lsls	r3, r3, #10
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4313      	orrs	r3, r2
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e050      	b.n	8007774 <USB_EPStartXfer+0x318>
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <USB_EPStartXfer+0x294>
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e041      	b.n	8007774 <USB_EPStartXfer+0x318>
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	085b      	lsrs	r3, r3, #1
 80076f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <USB_EPStartXfer+0x2b4>
 8007706:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800770a:	3301      	adds	r3, #1
 800770c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800771a:	b29b      	uxth	r3, r3
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	b29b      	uxth	r3, r3
 8007720:	4313      	orrs	r3, r2
 8007722:	b29a      	uxth	r2, r3
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e024      	b.n	8007774 <USB_EPStartXfer+0x318>
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d11c      	bne.n	8007774 <USB_EPStartXfer+0x318>
 800773a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007748:	b29b      	uxth	r3, r3
 800774a:	461a      	mov	r2, r3
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	4413      	add	r3, r2
 8007750:	633b      	str	r3, [r7, #48]	@ 0x30
 8007752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	00da      	lsls	r2, r3, #3
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	4413      	add	r3, r2
 8007764:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	b29a      	uxth	r2, r3
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	895b      	ldrh	r3, [r3, #10]
 8007780:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6959      	ldr	r1, [r3, #20]
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007794:	b29b      	uxth	r3, r3
 8007796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800779a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800779e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077a2:	6800      	ldr	r0, [r0, #0]
 80077a4:	f001 fb5a 	bl	8008e5c <USB_WritePMA>
            ep->xfer_buff += len;
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	695a      	ldr	r2, [r3, #20]
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	441a      	add	r2, r3
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6a1a      	ldr	r2, [r3, #32]
 80077d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d90f      	bls.n	8007802 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80077e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6a1a      	ldr	r2, [r3, #32]
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	621a      	str	r2, [r3, #32]
 8007800:	e00e      	b.n	8007820 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2200      	movs	r2, #0
 800781e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d177      	bne.n	8007920 <USB_EPStartXfer+0x4c4>
 8007830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	61bb      	str	r3, [r7, #24]
 800783c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	4413      	add	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	00da      	lsls	r2, r3, #3
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	4413      	add	r3, r2
 8007866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007876:	b29a      	uxth	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007880:	2b3e      	cmp	r3, #62	@ 0x3e
 8007882:	d921      	bls.n	80078c8 <USB_EPStartXfer+0x46c>
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	f003 031f 	and.w	r3, r3, #31
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <USB_EPStartXfer+0x448>
 800789a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800789e:	3b01      	subs	r3, #1
 80078a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	029b      	lsls	r3, r3, #10
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	4313      	orrs	r3, r2
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	801a      	strh	r2, [r3, #0]
 80078c6:	e056      	b.n	8007976 <USB_EPStartXfer+0x51a>
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <USB_EPStartXfer+0x48a>
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078de:	b29a      	uxth	r2, r3
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e047      	b.n	8007976 <USB_EPStartXfer+0x51a>
 80078e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <USB_EPStartXfer+0x4aa>
 80078fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007900:	3301      	adds	r3, #1
 8007902:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29a      	uxth	r2, r3
 800790c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007910:	b29b      	uxth	r3, r3
 8007912:	029b      	lsls	r3, r3, #10
 8007914:	b29b      	uxth	r3, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	b29a      	uxth	r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e02a      	b.n	8007976 <USB_EPStartXfer+0x51a>
 8007920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d122      	bne.n	8007976 <USB_EPStartXfer+0x51a>
 8007930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	623b      	str	r3, [r7, #32]
 800793c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	4413      	add	r3, r2
 8007952:	623b      	str	r3, [r7, #32]
 8007954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00da      	lsls	r2, r3, #3
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	4413      	add	r3, r2
 8007966:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007970:	b29a      	uxth	r2, r3
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	891b      	ldrh	r3, [r3, #8]
 8007982:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6959      	ldr	r1, [r3, #20]
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	b29b      	uxth	r3, r3
 8007998:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800799c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079a4:	6800      	ldr	r0, [r0, #0]
 80079a6:	f001 fa59 	bl	8008e5c <USB_WritePMA>
 80079aa:	e3ee      	b.n	800818a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d177      	bne.n	8007aac <USB_EPStartXfer+0x650>
 80079bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079dc:	4413      	add	r3, r2
 80079de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	00da      	lsls	r2, r3, #3
 80079ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a0e:	d921      	bls.n	8007a54 <USB_EPStartXfer+0x5f8>
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <USB_EPStartXfer+0x5d4>
 8007a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	029b      	lsls	r3, r3, #10
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	4313      	orrs	r3, r2
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	e056      	b.n	8007b02 <USB_EPStartXfer+0x6a6>
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <USB_EPStartXfer+0x616>
 8007a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	e047      	b.n	8007b02 <USB_EPStartXfer+0x6a6>
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <USB_EPStartXfer+0x636>
 8007a88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	029b      	lsls	r3, r3, #10
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aa8:	801a      	strh	r2, [r3, #0]
 8007aaa:	e02a      	b.n	8007b02 <USB_EPStartXfer+0x6a6>
 8007aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d122      	bne.n	8007b02 <USB_EPStartXfer+0x6a6>
 8007abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007adc:	4413      	add	r3, r2
 8007ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	00da      	lsls	r2, r3, #3
 8007aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af0:	4413      	add	r3, r2
 8007af2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	891b      	ldrh	r3, [r3, #8]
 8007b0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6959      	ldr	r1, [r3, #20]
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b30:	6800      	ldr	r0, [r0, #0]
 8007b32:	f001 f993 	bl	8008e5c <USB_WritePMA>
            ep->xfer_buff += len;
 8007b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695a      	ldr	r2, [r3, #20]
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b46:	441a      	add	r2, r3
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6a1a      	ldr	r2, [r3, #32]
 8007b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d90f      	bls.n	8007b90 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a1a      	ldr	r2, [r3, #32]
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b80:	1ad2      	subs	r2, r2, r3
 8007b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	621a      	str	r2, [r3, #32]
 8007b8e:	e00e      	b.n	8007bae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2200      	movs	r2, #0
 8007bac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d177      	bne.n	8007cba <USB_EPStartXfer+0x85e>
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	4413      	add	r3, r2
 8007bec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	00da      	lsls	r2, r3, #3
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	4413      	add	r3, r2
 8007c00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c14:	801a      	strh	r2, [r3, #0]
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c1c:	d921      	bls.n	8007c62 <USB_EPStartXfer+0x806>
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2c:	f003 031f 	and.w	r3, r3, #31
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <USB_EPStartXfer+0x7e2>
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	029b      	lsls	r3, r3, #10
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	e050      	b.n	8007d04 <USB_EPStartXfer+0x8a8>
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <USB_EPStartXfer+0x824>
 8007c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	e041      	b.n	8007d04 <USB_EPStartXfer+0x8a8>
 8007c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <USB_EPStartXfer+0x844>
 8007c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	e024      	b.n	8007d04 <USB_EPStartXfer+0x8a8>
 8007cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d11c      	bne.n	8007d04 <USB_EPStartXfer+0x8a8>
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cde:	4413      	add	r3, r2
 8007ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	00da      	lsls	r2, r3, #3
 8007cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	895b      	ldrh	r3, [r3, #10]
 8007d10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6959      	ldr	r1, [r3, #20]
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d32:	6800      	ldr	r0, [r0, #0]
 8007d34:	f001 f892 	bl	8008e5c <USB_WritePMA>
 8007d38:	e227      	b.n	800818a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d70:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	441a      	add	r2, r3
 8007d8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dc6:	4413      	add	r3, r2
 8007dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	00da      	lsls	r2, r3, #3
 8007dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dda:	4413      	add	r3, r2
 8007ddc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007de0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	891b      	ldrh	r3, [r3, #8]
 8007df8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6959      	ldr	r1, [r3, #20]
 8007e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	f001 f81e 	bl	8008e5c <USB_WritePMA>
 8007e20:	e1b3      	b.n	800818a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6a1a      	ldr	r2, [r3, #32]
 8007e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e32:	1ad2      	subs	r2, r2, r3
 8007e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 80c6 	beq.w	8007ff4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d177      	bne.n	8007f74 <USB_EPStartXfer+0xb18>
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ea4:	4413      	add	r3, r2
 8007ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	00da      	lsls	r2, r3, #3
 8007eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ebe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ed6:	d921      	bls.n	8007f1c <USB_EPStartXfer+0xac0>
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <USB_EPStartXfer+0xa9c>
 8007eee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f18:	801a      	strh	r2, [r3, #0]
 8007f1a:	e050      	b.n	8007fbe <USB_EPStartXfer+0xb62>
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <USB_EPStartXfer+0xade>
 8007f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	e041      	b.n	8007fbe <USB_EPStartXfer+0xb62>
 8007f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <USB_EPStartXfer+0xafe>
 8007f50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f54:	3301      	adds	r3, #1
 8007f56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	029b      	lsls	r3, r3, #10
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f70:	801a      	strh	r2, [r3, #0]
 8007f72:	e024      	b.n	8007fbe <USB_EPStartXfer+0xb62>
 8007f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d11c      	bne.n	8007fbe <USB_EPStartXfer+0xb62>
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f98:	4413      	add	r3, r2
 8007f9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	00da      	lsls	r2, r3, #3
 8007faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fac:	4413      	add	r3, r2
 8007fae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	895b      	ldrh	r3, [r3, #10]
 8007fca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6959      	ldr	r1, [r3, #20]
 8007fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007fe4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007fe8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f000 ff35 	bl	8008e5c <USB_WritePMA>
 8007ff2:	e0ca      	b.n	800818a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d177      	bne.n	80080f4 <USB_EPStartXfer+0xc98>
 8008004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008008:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800801e:	b29b      	uxth	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008024:	4413      	add	r3, r2
 8008026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	00da      	lsls	r2, r3, #3
 8008036:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008038:	4413      	add	r3, r2
 800803a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800803e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800804a:	b29a      	uxth	r2, r3
 800804c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008054:	2b3e      	cmp	r3, #62	@ 0x3e
 8008056:	d921      	bls.n	800809c <USB_EPStartXfer+0xc40>
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008066:	f003 031f 	and.w	r3, r3, #31
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <USB_EPStartXfer+0xc1c>
 800806e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008072:	3b01      	subs	r3, #1
 8008074:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008082:	b29b      	uxth	r3, r3
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	b29b      	uxth	r3, r3
 8008088:	4313      	orrs	r3, r2
 800808a:	b29b      	uxth	r3, r3
 800808c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008094:	b29a      	uxth	r2, r3
 8008096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008098:	801a      	strh	r2, [r3, #0]
 800809a:	e05c      	b.n	8008156 <USB_EPStartXfer+0xcfa>
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <USB_EPStartXfer+0xc5e>
 80080a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080b6:	801a      	strh	r2, [r3, #0]
 80080b8:	e04d      	b.n	8008156 <USB_EPStartXfer+0xcfa>
 80080ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80080c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <USB_EPStartXfer+0xc7e>
 80080d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80080d4:	3301      	adds	r3, #1
 80080d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80080da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	029b      	lsls	r3, r3, #10
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080f0:	801a      	strh	r2, [r3, #0]
 80080f2:	e030      	b.n	8008156 <USB_EPStartXfer+0xcfa>
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d128      	bne.n	8008156 <USB_EPStartXfer+0xcfa>
 8008104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008120:	b29b      	uxth	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008128:	4413      	add	r3, r2
 800812a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800812e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	00da      	lsls	r2, r3, #3
 800813c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008140:	4413      	add	r3, r2
 8008142:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	b29a      	uxth	r2, r3
 8008150:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008154:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	891b      	ldrh	r3, [r3, #8]
 8008162:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6959      	ldr	r1, [r3, #20]
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008176:	b29b      	uxth	r3, r3
 8008178:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800817c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008180:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008184:	6800      	ldr	r0, [r0, #0]
 8008186:	f000 fe69 	bl	8008e5c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081b0:	817b      	strh	r3, [r7, #10]
 80081b2:	897b      	ldrh	r3, [r7, #10]
 80081b4:	f083 0310 	eor.w	r3, r3, #16
 80081b8:	817b      	strh	r3, [r7, #10]
 80081ba:	897b      	ldrh	r3, [r7, #10]
 80081bc:	f083 0320 	eor.w	r3, r3, #32
 80081c0:	817b      	strh	r3, [r7, #10]
 80081c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	897b      	ldrh	r3, [r7, #10]
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]
 80081f2:	f000 bcde 	b.w	8008bb2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	7b1b      	ldrb	r3, [r3, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 80bb 	bne.w	800837e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	429a      	cmp	r2, r3
 8008222:	d917      	bls.n	8008254 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699a      	ldr	r2, [r3, #24]
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008244:	1ad2      	subs	r2, r2, r3
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	619a      	str	r2, [r3, #24]
 8008252:	e00e      	b.n	8008272 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2200      	movs	r2, #0
 8008270:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800828e:	b29b      	uxth	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008296:	4413      	add	r3, r2
 8008298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800829c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	00da      	lsls	r2, r3, #3
 80082aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082ae:	4413      	add	r3, r2
 80082b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80082d2:	d924      	bls.n	800831e <USB_EPStartXfer+0xec2>
 80082d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d8:	095b      	lsrs	r3, r3, #5
 80082da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d104      	bne.n	80082f4 <USB_EPStartXfer+0xe98>
 80082ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80082ee:	3b01      	subs	r3, #1
 80082f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008300:	b29b      	uxth	r3, r3
 8008302:	029b      	lsls	r3, r3, #10
 8008304:	b29b      	uxth	r3, r3
 8008306:	4313      	orrs	r3, r2
 8008308:	b29b      	uxth	r3, r3
 800830a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008312:	b29a      	uxth	r2, r3
 8008314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	f000 bc10 	b.w	8008b3e <USB_EPStartXfer+0x16e2>
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10c      	bne.n	8008340 <USB_EPStartXfer+0xee4>
 8008326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008336:	b29a      	uxth	r2, r3
 8008338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	e3fe      	b.n	8008b3e <USB_EPStartXfer+0x16e2>
 8008340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <USB_EPStartXfer+0xf04>
 8008356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800835a:	3301      	adds	r3, #1
 800835c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29a      	uxth	r2, r3
 8008368:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800836c:	b29b      	uxth	r3, r3
 800836e:	029b      	lsls	r3, r3, #10
 8008370:	b29b      	uxth	r3, r3
 8008372:	4313      	orrs	r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e3df      	b.n	8008b3e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	2b02      	cmp	r3, #2
 800838c:	f040 8218 	bne.w	80087c0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f040 809d 	bne.w	80084dc <USB_EPStartXfer+0x1080>
 80083a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083c6:	4413      	add	r3, r2
 80083c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	00da      	lsls	r2, r3, #3
 80083da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083de:	4413      	add	r3, r2
 80083e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083fa:	801a      	strh	r2, [r3, #0]
 80083fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b3e      	cmp	r3, #62	@ 0x3e
 800840a:	d92b      	bls.n	8008464 <USB_EPStartXfer+0x1008>
 800840c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800841e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 031f 	and.w	r3, r3, #31
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <USB_EPStartXfer+0xfe0>
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008436:	3b01      	subs	r3, #1
 8008438:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800843c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29a      	uxth	r2, r3
 8008444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008448:	b29b      	uxth	r3, r3
 800844a:	029b      	lsls	r3, r3, #10
 800844c:	b29b      	uxth	r3, r3
 800844e:	4313      	orrs	r3, r2
 8008450:	b29b      	uxth	r3, r3
 8008452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845a:	b29a      	uxth	r2, r3
 800845c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	e070      	b.n	8008546 <USB_EPStartXfer+0x10ea>
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10c      	bne.n	800848e <USB_EPStartXfer+0x1032>
 8008474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29b      	uxth	r3, r3
 800847c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	e05b      	b.n	8008546 <USB_EPStartXfer+0x10ea>
 800848e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	085b      	lsrs	r3, r3, #1
 800849c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <USB_EPStartXfer+0x1062>
 80084b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b8:	3301      	adds	r3, #1
 80084ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	029b      	lsls	r3, r3, #10
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	4313      	orrs	r3, r2
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	e034      	b.n	8008546 <USB_EPStartXfer+0x10ea>
 80084dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d12c      	bne.n	8008546 <USB_EPStartXfer+0x10ea>
 80084ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008508:	b29b      	uxth	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008510:	4413      	add	r3, r2
 8008512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	00da      	lsls	r2, r3, #3
 8008524:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008528:	4413      	add	r3, r2
 800852a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800852e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	b29a      	uxth	r2, r3
 8008540:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f040 809d 	bne.w	80086a0 <USB_EPStartXfer+0x1244>
 8008566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800858a:	4413      	add	r3, r2
 800858c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	00da      	lsls	r2, r3, #3
 800859e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80085ce:	d92b      	bls.n	8008628 <USB_EPStartXfer+0x11cc>
 80085d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f003 031f 	and.w	r3, r3, #31
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d104      	bne.n	8008600 <USB_EPStartXfer+0x11a4>
 80085f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085fa:	3b01      	subs	r3, #1
 80085fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29a      	uxth	r2, r3
 8008608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800860c:	b29b      	uxth	r3, r3
 800860e:	029b      	lsls	r3, r3, #10
 8008610:	b29b      	uxth	r3, r3
 8008612:	4313      	orrs	r3, r2
 8008614:	b29b      	uxth	r3, r3
 8008616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861e:	b29a      	uxth	r2, r3
 8008620:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008624:	801a      	strh	r2, [r3, #0]
 8008626:	e069      	b.n	80086fc <USB_EPStartXfer+0x12a0>
 8008628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10c      	bne.n	8008652 <USB_EPStartXfer+0x11f6>
 8008638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008648:	b29a      	uxth	r2, r3
 800864a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800864e:	801a      	strh	r2, [r3, #0]
 8008650:	e054      	b.n	80086fc <USB_EPStartXfer+0x12a0>
 8008652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d004      	beq.n	8008682 <USB_EPStartXfer+0x1226>
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867c:	3301      	adds	r3, #1
 800867e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008682:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29a      	uxth	r2, r3
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800868e:	b29b      	uxth	r3, r3
 8008690:	029b      	lsls	r3, r3, #10
 8008692:	b29b      	uxth	r3, r3
 8008694:	4313      	orrs	r3, r2
 8008696:	b29a      	uxth	r2, r3
 8008698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800869c:	801a      	strh	r2, [r3, #0]
 800869e:	e02d      	b.n	80086fc <USB_EPStartXfer+0x12a0>
 80086a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d125      	bne.n	80086fc <USB_EPStartXfer+0x12a0>
 80086b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086be:	b29b      	uxth	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80086c6:	4413      	add	r3, r2
 80086c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80086cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	00da      	lsls	r2, r3, #3
 80086da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80086de:	4413      	add	r3, r2
 80086e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80086fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8218 	beq.w	8008b3e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800872e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <USB_EPStartXfer+0x12ea>
 800873a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800873e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10d      	bne.n	8008762 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008746:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800874a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800874e:	2b00      	cmp	r3, #0
 8008750:	f040 81f5 	bne.w	8008b3e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008754:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 81ee 	bne.w	8008b3e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008788:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800878c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	441a      	add	r2, r3
 80087a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80087aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	8013      	strh	r3, [r2, #0]
 80087be:	e1be      	b.n	8008b3e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80087c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	f040 81b4 	bne.w	8008b3a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80087d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d917      	bls.n	800881e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80087ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80087fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880e:	1ad2      	subs	r2, r2, r3
 8008810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	619a      	str	r2, [r3, #24]
 800881c:	e00e      	b.n	800883c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800881e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800882e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2200      	movs	r2, #0
 800883a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800883c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	785b      	ldrb	r3, [r3, #1]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f040 8085 	bne.w	8008958 <USB_EPStartXfer+0x14fc>
 800884e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800885c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800886a:	b29b      	uxth	r3, r3
 800886c:	461a      	mov	r2, r3
 800886e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008872:	4413      	add	r3, r2
 8008874:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	00da      	lsls	r2, r3, #3
 8008886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800888a:	4413      	add	r3, r2
 800888c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008890:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	b29b      	uxth	r3, r3
 800889c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80088ae:	d923      	bls.n	80088f8 <USB_EPStartXfer+0x149c>
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80088ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088be:	f003 031f 	and.w	r3, r3, #31
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d104      	bne.n	80088d0 <USB_EPStartXfer+0x1474>
 80088c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ca:	3b01      	subs	r3, #1
 80088cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80088d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088dc:	b29b      	uxth	r3, r3
 80088de:	029b      	lsls	r3, r3, #10
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	e060      	b.n	80089ba <USB_EPStartXfer+0x155e>
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10c      	bne.n	800891a <USB_EPStartXfer+0x14be>
 8008900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008910:	b29a      	uxth	r2, r3
 8008912:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	e04f      	b.n	80089ba <USB_EPStartXfer+0x155e>
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <USB_EPStartXfer+0x14de>
 8008930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008934:	3301      	adds	r3, #1
 8008936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800893a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29a      	uxth	r2, r3
 8008942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008946:	b29b      	uxth	r3, r3
 8008948:	029b      	lsls	r3, r3, #10
 800894a:	b29b      	uxth	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b29a      	uxth	r2, r3
 8008950:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	e030      	b.n	80089ba <USB_EPStartXfer+0x155e>
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d128      	bne.n	80089ba <USB_EPStartXfer+0x155e>
 8008968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008984:	b29b      	uxth	r3, r3
 8008986:	461a      	mov	r2, r3
 8008988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800898c:	4413      	add	r3, r2
 800898e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	00da      	lsls	r2, r3, #3
 80089a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089a4:	4413      	add	r3, r2
 80089a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f040 8085 	bne.w	8008ae4 <USB_EPStartXfer+0x1688>
 80089da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80089e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089fe:	4413      	add	r3, r2
 8008a00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	00da      	lsls	r2, r3, #3
 8008a12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a16:	4413      	add	r3, r2
 8008a18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a38:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a3a:	d923      	bls.n	8008a84 <USB_EPStartXfer+0x1628>
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4a:	f003 031f 	and.w	r3, r3, #31
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <USB_EPStartXfer+0x1600>
 8008a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a56:	3b01      	subs	r3, #1
 8008a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	029b      	lsls	r3, r3, #10
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	e05c      	b.n	8008b3e <USB_EPStartXfer+0x16e2>
 8008a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10c      	bne.n	8008aa6 <USB_EPStartXfer+0x164a>
 8008a8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	e04b      	b.n	8008b3e <USB_EPStartXfer+0x16e2>
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <USB_EPStartXfer+0x166a>
 8008abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	029b      	lsls	r3, r3, #10
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ae0:	801a      	strh	r2, [r3, #0]
 8008ae2:	e02c      	b.n	8008b3e <USB_EPStartXfer+0x16e2>
 8008ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d124      	bne.n	8008b3e <USB_EPStartXfer+0x16e2>
 8008af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	461a      	mov	r2, r3
 8008b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	00da      	lsls	r2, r3, #3
 8008b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008b22:	4413      	add	r3, r2
 8008b24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b36:	801a      	strh	r2, [r3, #0]
 8008b38:	e001      	b.n	8008b3e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e03a      	b.n	8008bb4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008b68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008b6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008b74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008b78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b7c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	441a      	add	r2, r3
 8008b9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008be6:	81bb      	strh	r3, [r7, #12]
 8008be8:	89bb      	ldrh	r3, [r7, #12]
 8008bea:	f083 0310 	eor.w	r3, r3, #16
 8008bee:	81bb      	strh	r3, [r7, #12]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	441a      	add	r2, r3
 8008bfa:	89bb      	ldrh	r3, [r7, #12]
 8008bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	8013      	strh	r3, [r2, #0]
 8008c10:	e01f      	b.n	8008c52 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c28:	81fb      	strh	r3, [r7, #14]
 8008c2a:	89fb      	ldrh	r3, [r7, #14]
 8008c2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c30:	81fb      	strh	r3, [r7, #14]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	441a      	add	r2, r3
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	7b1b      	ldrb	r3, [r3, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f040 809d 	bne.w	8008dae <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	785b      	ldrb	r3, [r3, #1]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d04c      	beq.n	8008d16 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	823b      	strh	r3, [r7, #16]
 8008c8a:	8a3b      	ldrh	r3, [r7, #16]
 8008c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d01b      	beq.n	8008ccc <USB_EPClearStall+0x6c>
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008caa:	81fb      	strh	r3, [r7, #14]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	89fb      	ldrh	r3, [r7, #14]
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d06c      	beq.n	8008dae <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cea:	81bb      	strh	r3, [r7, #12]
 8008cec:	89bb      	ldrh	r3, [r7, #12]
 8008cee:	f083 0320 	eor.w	r3, r3, #32
 8008cf2:	81bb      	strh	r3, [r7, #12]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	441a      	add	r2, r3
 8008cfe:	89bb      	ldrh	r3, [r7, #12]
 8008d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8013      	strh	r3, [r2, #0]
 8008d14:	e04b      	b.n	8008dae <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	82fb      	strh	r3, [r7, #22]
 8008d24:	8afb      	ldrh	r3, [r7, #22]
 8008d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01b      	beq.n	8008d66 <USB_EPClearStall+0x106>
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d44:	82bb      	strh	r3, [r7, #20]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	441a      	add	r2, r3
 8008d50:	8abb      	ldrh	r3, [r7, #20]
 8008d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d7c:	827b      	strh	r3, [r7, #18]
 8008d7e:	8a7b      	ldrh	r3, [r7, #18]
 8008d80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d84:	827b      	strh	r3, [r7, #18]
 8008d86:	8a7b      	ldrh	r3, [r7, #18]
 8008d88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d8c:	827b      	strh	r3, [r7, #18]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	441a      	add	r2, r3
 8008d98:	8a7b      	ldrh	r3, [r7, #18]
 8008d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2280      	movs	r2, #128	@ 0x80
 8008dd2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b08b      	sub	sp, #44	@ 0x2c
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4611      	mov	r1, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	80fb      	strh	r3, [r7, #6]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e72:	88bb      	ldrh	r3, [r7, #4]
 8008e74:	3301      	adds	r3, #1
 8008e76:	085b      	lsrs	r3, r3, #1
 8008e78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e82:	88fa      	ldrh	r2, [r7, #6]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e92:	e01b      	b.n	8008ecc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b21a      	sxth	r2, r3
 8008ea4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	b21b      	sxth	r3, r3
 8008eac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	8a7a      	ldrh	r2, [r7, #18]
 8008eb2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	3302      	adds	r3, #2
 8008eb8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e0      	bne.n	8008e94 <USB_WritePMA+0x38>
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	372c      	adds	r7, #44	@ 0x2c
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b08b      	sub	sp, #44	@ 0x2c
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4611      	mov	r1, r2
 8008eec:	461a      	mov	r2, r3
 8008eee:	460b      	mov	r3, r1
 8008ef0:	80fb      	strh	r3, [r7, #6]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ef6:	88bb      	ldrh	r3, [r7, #4]
 8008ef8:	085b      	lsrs	r3, r3, #1
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f16:	e018      	b.n	8008f4a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	3302      	adds	r3, #2
 8008f24:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	3301      	adds	r3, #1
 8008f32:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	3301      	adds	r3, #1
 8008f42:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	3b01      	subs	r3, #1
 8008f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e3      	bne.n	8008f18 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008f50:	88bb      	ldrh	r3, [r7, #4]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	701a      	strb	r2, [r3, #0]
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	372c      	adds	r7, #44	@ 0x2c
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <__NVIC_SystemReset>:
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008f7c:	f3bf 8f4f 	dsb	sy
}
 8008f80:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008f82:	4b06      	ldr	r3, [pc, #24]	@ (8008f9c <__NVIC_SystemReset+0x24>)
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008f8a:	4904      	ldr	r1, [pc, #16]	@ (8008f9c <__NVIC_SystemReset+0x24>)
 8008f8c:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <__NVIC_SystemReset+0x28>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f92:	f3bf 8f4f 	dsb	sy
}
 8008f96:	bf00      	nop
    __NOP();
 8008f98:	bf00      	nop
 8008f9a:	e7fd      	b.n	8008f98 <__NVIC_SystemReset+0x20>
 8008f9c:	e000ed00 	.word	0xe000ed00
 8008fa0:	05fa0004 	.word	0x05fa0004

08008fa4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8008fb0:	f240 401c 	movw	r0, #1052	@ 0x41c
 8008fb4:	f002 fb92 	bl	800b6dc <USBD_static_malloc>
 8008fb8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d105      	bne.n	8008fcc <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e03f      	b.n	800904c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008fe2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2202      	movs	r2, #2
 800902a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	4798      	blx	r3
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8009046:	2303      	movs	r3, #3
 8009048:	e000      	b.n	800904c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800906a:	2302      	movs	r3, #2
 800906c:	e027      	b.n	80090be <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009074:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2202      	movs	r2, #2
 800908a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090ae:	4618      	mov	r0, r3
 80090b0:	f002 fb22 	bl	800b6f8 <USBD_static_free>
  pdev->pClassData = NULL;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090d8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e0d5      	b.n	80092a0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d03e      	beq.n	800917e <USBD_DFU_Setup+0xb6>
 8009100:	2b20      	cmp	r3, #32
 8009102:	f040 80c5 	bne.w	8009290 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	2b06      	cmp	r3, #6
 800910c:	d82f      	bhi.n	800916e <USBD_DFU_Setup+0xa6>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <USBD_DFU_Setup+0x4c>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	08009165 	.word	0x08009165
 8009118:	08009131 	.word	0x08009131
 800911c:	0800913b 	.word	0x0800913b
 8009120:	08009145 	.word	0x08009145
 8009124:	0800914d 	.word	0x0800914d
 8009128:	08009155 	.word	0x08009155
 800912c:	0800915d 	.word	0x0800915d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa6c 	bl	8009610 <DFU_Download>
          break;
 8009138:	e020      	b.n	800917c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fad3 	bl	80096e8 <DFU_Upload>
          break;
 8009142:	e01b      	b.n	800917c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fba9 	bl	800989c <DFU_GetStatus>
          break;
 800914a:	e017      	b.n	800917c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc5b 	bl	8009a08 <DFU_ClearStatus>
          break;
 8009152:	e013      	b.n	800917c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fcab 	bl	8009ab0 <DFU_GetState>
          break;
 800915a:	e00f      	b.n	800917c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fcbf 	bl	8009ae0 <DFU_Abort>
          break;
 8009162:	e00b      	b.n	800917c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f9ee 	bl	8009548 <DFU_Detach>
          break;
 800916c:	e006      	b.n	800917c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f001 fdb1 	bl	800acd8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009176:	2303      	movs	r3, #3
 8009178:	77fb      	strb	r3, [r7, #31]
          break;
 800917a:	bf00      	nop
      }
      break;
 800917c:	e08f      	b.n	800929e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	2b0b      	cmp	r3, #11
 8009184:	d87b      	bhi.n	800927e <USBD_DFU_Setup+0x1b6>
 8009186:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <USBD_DFU_Setup+0xc4>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	080091bd 	.word	0x080091bd
 8009190:	0800928d 	.word	0x0800928d
 8009194:	0800927f 	.word	0x0800927f
 8009198:	0800927f 	.word	0x0800927f
 800919c:	0800927f 	.word	0x0800927f
 80091a0:	0800927f 	.word	0x0800927f
 80091a4:	080091e7 	.word	0x080091e7
 80091a8:	0800927f 	.word	0x0800927f
 80091ac:	0800927f 	.word	0x0800927f
 80091b0:	0800927f 	.word	0x0800927f
 80091b4:	08009211 	.word	0x08009211
 80091b8:	0800923d 	.word	0x0800923d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d107      	bne.n	80091d8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091c8:	f107 030e 	add.w	r3, r7, #14
 80091cc:	2202      	movs	r2, #2
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 fdf2 	bl	800adba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091d6:	e05a      	b.n	800928e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 fd7c 	bl	800acd8 <USBD_CtlError>
            ret = USBD_FAIL;
 80091e0:	2303      	movs	r3, #3
 80091e2:	77fb      	strb	r3, [r7, #31]
          break;
 80091e4:	e053      	b.n	800928e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	885b      	ldrh	r3, [r3, #2]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	2b21      	cmp	r3, #33	@ 0x21
 80091f0:	d107      	bne.n	8009202 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80091f2:	4b2d      	ldr	r3, [pc, #180]	@ (80092a8 <USBD_DFU_Setup+0x1e0>)
 80091f4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b09      	cmp	r3, #9
 80091fc:	bf28      	it	cs
 80091fe:	2309      	movcs	r3, #9
 8009200:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009202:	8afb      	ldrh	r3, [r7, #22]
 8009204:	461a      	mov	r2, r3
 8009206:	69b9      	ldr	r1, [r7, #24]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fdd6 	bl	800adba <USBD_CtlSendData>
          break;
 800920e:	e03e      	b.n	800928e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b03      	cmp	r3, #3
 800921a:	d108      	bne.n	800922e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009222:	2201      	movs	r2, #1
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fdc7 	bl	800adba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800922c:	e02f      	b.n	800928e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 fd51 	bl	800acd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009236:	2303      	movs	r3, #3
 8009238:	77fb      	strb	r3, [r7, #31]
          break;
 800923a:	e028      	b.n	800928e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	885b      	ldrh	r3, [r3, #2]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d114      	bne.n	8009270 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b03      	cmp	r3, #3
 8009250:	d107      	bne.n	8009262 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	885b      	ldrh	r3, [r3, #2]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	461a      	mov	r2, r3
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009260:	e015      	b.n	800928e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fd37 	bl	800acd8 <USBD_CtlError>
              ret = USBD_FAIL;
 800926a:	2303      	movs	r3, #3
 800926c:	77fb      	strb	r3, [r7, #31]
          break;
 800926e:	e00e      	b.n	800928e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fd30 	bl	800acd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009278:	2303      	movs	r3, #3
 800927a:	77fb      	strb	r3, [r7, #31]
          break;
 800927c:	e007      	b.n	800928e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 fd29 	bl	800acd8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009286:	2303      	movs	r3, #3
 8009288:	77fb      	strb	r3, [r7, #31]
          break;
 800928a:	e000      	b.n	800928e <USBD_DFU_Setup+0x1c6>
          break;
 800928c:	bf00      	nop
      }
      break;
 800928e:	e006      	b.n	800929e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f001 fd20 	bl	800acd8 <USBD_CtlError>
      ret = USBD_FAIL;
 8009298:	2303      	movs	r3, #3
 800929a:	77fb      	strb	r3, [r7, #31]
      break;
 800929c:	bf00      	nop
  }

  return (uint8_t)ret;
 800929e:	7ffb      	ldrb	r3, [r7, #31]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	2000005a 	.word	0x2000005a

080092ac <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	221b      	movs	r2, #27
 80092b8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 80092ba:	4b03      	ldr	r3, [pc, #12]	@ (80092c8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	20000048 	.word	0x20000048

080092cc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b088      	sub	sp, #32
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092f0:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092f8:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	e0ce      	b.n	80094a2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800930a:	2b04      	cmp	r3, #4
 800930c:	f040 80bd 	bne.w	800948a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8009316:	2b00      	cmp	r3, #0
 8009318:	d17c      	bne.n	8009414 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009320:	2b01      	cmp	r3, #1
 8009322:	f000 8093 	beq.w	800944c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800932c:	2b05      	cmp	r3, #5
 800932e:	d15e      	bne.n	80093ee <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b21      	cmp	r3, #33	@ 0x21
 8009336:	d124      	bne.n	8009382 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	461a      	mov	r2, r3
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	789b      	ldrb	r3, [r3, #2]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	441a      	add	r2, r3
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	78db      	ldrb	r3, [r3, #3]
 8009362:	041b      	lsls	r3, r3, #16
 8009364:	441a      	add	r2, r3
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	791b      	ldrb	r3, [r3, #4]
 8009376:	061b      	lsls	r3, r3, #24
 8009378:	441a      	add	r2, r3
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8009380:	e064      	b.n	800944c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b41      	cmp	r3, #65	@ 0x41
 8009388:	d12f      	bne.n	80093ea <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	461a      	mov	r2, r3
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	789b      	ldrb	r3, [r3, #2]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	441a      	add	r2, r3
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	78db      	ldrb	r3, [r3, #3]
 80093b4:	041b      	lsls	r3, r3, #16
 80093b6:	441a      	add	r2, r3
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	791b      	ldrb	r3, [r3, #4]
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	441a      	add	r2, r3
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d032      	beq.n	800944c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e05b      	b.n	80094a2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e059      	b.n	80094a2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8009402:	2301      	movs	r3, #1
 8009404:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8009406:	f107 030c 	add.w	r3, r7, #12
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fc63 	bl	800acd8 <USBD_CtlError>
 8009412:	e01b      	b.n	800944c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800941a:	2b01      	cmp	r3, #1
 800941c:	d916      	bls.n	800944c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8009424:	3b02      	subs	r3, #2
 8009426:	029a      	lsls	r2, r3, #10
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800942e:	4413      	add	r3, r2
 8009430:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	69f8      	ldr	r0, [r7, #28]
 8009438:	6979      	ldr	r1, [r7, #20]
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8009440:	4798      	blx	r3
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8009448:	2303      	movs	r3, #3
 800944a:	e02a      	b.n	80094a2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	2200      	movs	r2, #0
 8009458:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	2203      	movs	r2, #3
 8009460:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8009488:	e00a      	b.n	80094a0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009490:	2b07      	cmp	r3, #7
 8009492:	d103      	bne.n	800949c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fb75 	bl	8009b84 <DFU_Leave>
 800949a:	e001      	b.n	80094a0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	e000      	b.n	80094a2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	220a      	movs	r2, #10
 80094cc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80094ce:	4b03      	ldr	r3, [pc, #12]	@ (80094dc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000064 	.word	0x20000064

080094e0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	460b      	mov	r3, r1
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094f4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80094f6:	7afb      	ldrb	r3, [r7, #11]
 80094f8:	2b06      	cmp	r3, #6
 80094fa:	d808      	bhi.n	800950e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	4905      	ldr	r1, [pc, #20]	@ (8009518 <USBD_DFU_GetUsrStringDesc+0x38>)
 8009504:	4618      	mov	r0, r3
 8009506:	f001 fbf8 	bl	800acfa <USBD_GetString>
    return USBD_StrDesc;
 800950a:	4b03      	ldr	r3, [pc, #12]	@ (8009518 <USBD_DFU_GetUsrStringDesc+0x38>)
 800950c:	e000      	b.n	8009510 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800950e:	2300      	movs	r3, #0
  }
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20000544 	.word	0x20000544

0800951c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	e004      	b.n	800953a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
	...

08009548 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009558:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d051      	beq.n	8009604 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009566:	2b02      	cmp	r3, #2
 8009568:	d013      	beq.n	8009592 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009570:	2b03      	cmp	r3, #3
 8009572:	d00e      	beq.n	8009592 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800957a:	2b05      	cmp	r3, #5
 800957c:	d009      	beq.n	8009592 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009584:	2b06      	cmp	r3, #6
 8009586:	d004      	beq.n	8009592 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800958e:	2b09      	cmp	r3, #9
 8009590:	d125      	bne.n	80095de <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2202      	movs	r2, #2
 8009596:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 80095de:	4b0b      	ldr	r3, [pc, #44]	@ (800960c <DFU_Detach+0xc4>)
 80095e0:	7d5b      	ldrb	r3, [r3, #21]
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fb7b 	bl	8009ce6 <USBD_Stop>
    (void)USBD_Start(pdev);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fb6c 	bl	8009cce <USBD_Start>
 80095f6:	e006      	b.n	8009606 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	885b      	ldrh	r3, [r3, #2]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7f8 f975 	bl	80018ec <HAL_Delay>
 8009602:	e000      	b.n	8009606 <DFU_Detach+0xbe>
    return;
 8009604:	bf00      	nop
  }
}
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000048 	.word	0x20000048

08009610 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009620:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d05b      	beq.n	80096e0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	88db      	ldrh	r3, [r3, #6]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d02d      	beq.n	800968c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009636:	2b02      	cmp	r3, #2
 8009638:	d004      	beq.n	8009644 <DFU_Download+0x34>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009640:	2b05      	cmp	r3, #5
 8009642:	d11e      	bne.n	8009682 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	885b      	ldrh	r3, [r3, #2]
 8009648:	461a      	mov	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	88db      	ldrh	r3, [r3, #6]
 8009654:	461a      	mov	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2203      	movs	r2, #3
 8009660:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8009670:	68f9      	ldr	r1, [r7, #12]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009678:	461a      	mov	r2, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fbc9 	bl	800ae12 <USBD_CtlPrepareRx>
 8009680:	e02f      	b.n	80096e2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 fb27 	bl	800acd8 <USBD_CtlError>
 800968a:	e02a      	b.n	80096e2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009692:	2b05      	cmp	r3, #5
 8009694:	d004      	beq.n	80096a0 <DFU_Download+0x90>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800969c:	2b02      	cmp	r3, #2
 800969e:	d11a      	bne.n	80096d6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2206      	movs	r2, #6
 80096ac:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80096d4:	e005      	b.n	80096e2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 fafd 	bl	800acd8 <USBD_CtlError>
 80096de:	e000      	b.n	80096e2 <DFU_Download+0xd2>
    return;
 80096e0:	bf00      	nop
    }
  }
}
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096f8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009700:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 80c4 	beq.w	8009892 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	88db      	ldrh	r3, [r3, #6]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 80a8 	beq.w	8009864 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800971a:	2b02      	cmp	r3, #2
 800971c:	d005      	beq.n	800972a <DFU_Upload+0x42>
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009724:	2b09      	cmp	r3, #9
 8009726:	f040 8090 	bne.w	800984a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	885b      	ldrh	r3, [r3, #2]
 800972e:	461a      	mov	r2, r3
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	461a      	mov	r2, r3
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8009748:	2b00      	cmp	r3, #0
 800974a:	d12c      	bne.n	80097a6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009752:	2b03      	cmp	r3, #3
 8009754:	d901      	bls.n	800975a <DFU_Upload+0x72>
 8009756:	2202      	movs	r2, #2
 8009758:	e000      	b.n	800975c <DFU_Upload+0x74>
 800975a:	2209      	movs	r2, #9
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2221      	movs	r2, #33	@ 0x21
 8009790:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2241      	movs	r2, #65	@ 0x41
 8009796:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2203      	movs	r2, #3
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f001 fb0b 	bl	800adba <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80097a4:	e076      	b.n	8009894 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d931      	bls.n	8009814 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2209      	movs	r2, #9
 80097b4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80097e2:	3b02      	subs	r3, #2
 80097e4:	029a      	lsls	r2, r3, #10
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80097ec:	4413      	add	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	6979      	ldr	r1, [r7, #20]
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80097fe:	4798      	blx	r3
 8009800:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009808:	461a      	mov	r2, r3
 800980a:	68b9      	ldr	r1, [r7, #8]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 fad4 	bl	800adba <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8009812:	e03f      	b.n	8009894 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	220f      	movs	r2, #15
 8009818:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 fa48 	bl	800acd8 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8009848:	e024      	b.n	8009894 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 fa3b 	bl	800acd8 <USBD_CtlError>
 8009862:	e017      	b.n	8009894 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8009890:	e000      	b.n	8009894 <DFU_Upload+0x1ac>
    return;
 8009892:	bf00      	nop
  }
}
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098aa:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098b2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 80a0 	beq.w	80099fc <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d002      	beq.n	80098cc <DFU_GetStatus+0x30>
 80098c6:	2b06      	cmp	r3, #6
 80098c8:	d051      	beq.n	800996e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80098ca:	e08e      	b.n	80099ea <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d034      	beq.n	8009940 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2204      	movs	r2, #4
 80098da:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10e      	bne.n	800992a <DFU_GetStatus+0x8e>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b41      	cmp	r3, #65	@ 0x41
 8009912:	d10a      	bne.n	800992a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8009924:	2100      	movs	r1, #0
 8009926:	4798      	blx	r3
      break;
 8009928:	e05f      	b.n	80099ea <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800993a:	2101      	movs	r1, #1
 800993c:	4798      	blx	r3
      break;
 800993e:	e054      	b.n	80099ea <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2205      	movs	r2, #5
 8009944:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800996c:	e03d      	b.n	80099ea <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8009974:	2b01      	cmp	r3, #1
 8009976:	d116      	bne.n	80099a6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2207      	movs	r2, #7
 800997c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80099a4:	e020      	b.n	80099e8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11b      	bne.n	80099e8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80099b0:	4b14      	ldr	r3, [pc, #80]	@ (8009a04 <DFU_GetStatus+0x168>)
 80099b2:	7d1b      	ldrb	r3, [r3, #20]
 80099b4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d015      	beq.n	80099e8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80099e8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80099f0:	2206      	movs	r2, #6
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 f9e0 	bl	800adba <USBD_CtlSendData>
 80099fa:	e000      	b.n	80099fe <DFU_GetStatus+0x162>
    return;
 80099fc:	bf00      	nop
}
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000048 	.word	0x20000048

08009a08 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a16:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d042      	beq.n	8009aa4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009a24:	2b0a      	cmp	r3, #10
 8009a26:	d11e      	bne.n	8009a66 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8009a64:	e01f      	b.n	8009aa6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	220a      	movs	r2, #10
 8009a6a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	220e      	movs	r2, #14
 8009a72:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8009aa2:	e000      	b.n	8009aa6 <DFU_ClearStatus+0x9e>
    return;
 8009aa4:	bf00      	nop
  }
}
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009abe:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d008      	beq.n	8009ad8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8009acc:	2201      	movs	r2, #1
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 f972 	bl	800adba <USBD_CtlSendData>
 8009ad6:	e000      	b.n	8009ada <DFU_GetState+0x2a>
    return;
 8009ad8:	bf00      	nop
}
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009aee:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d03f      	beq.n	8009b76 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d013      	beq.n	8009b28 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d00e      	beq.n	8009b28 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009b10:	2b05      	cmp	r3, #5
 8009b12:	d009      	beq.n	8009b28 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009b1a:	2b06      	cmp	r3, #6
 8009b1c:	d004      	beq.n	8009b28 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d127      	bne.n	8009b78 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8009b74:	e000      	b.n	8009b78 <DFU_Abort+0x98>
    return;
 8009b76:	bf00      	nop
  }
}
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b92:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d03b      	beq.n	8009c12 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8009ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c1c <DFU_Leave+0x98>)
 8009ba4:	7d1b      	ldrb	r3, [r3, #20]
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d016      	beq.n	8009bdc <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2206      	movs	r2, #6
 8009bb2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8009bda:	e01b      	b.n	8009c14 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2208      	movs	r2, #8
 8009be0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f86c 	bl	8009ce6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8009c0e:	f7ff f9b3 	bl	8008f78 <__NVIC_SystemReset>
    return;
 8009c12:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000048 	.word	0x20000048

08009c20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e01f      	b.n	8009c78 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	79fa      	ldrb	r2, [r7, #7]
 8009c6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f001 fb91 	bl	800b394 <USBD_LL_Init>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e016      	b.n	8009cc6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	f107 020e 	add.w	r2, r7, #14
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4798      	blx	r3
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 fba2 	bl	800b420 <USBD_LL_Start>
 8009cdc:	4603      	mov	r3, r0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 fbb1 	bl	800b456 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d009      	beq.n	8009d12 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6852      	ldr	r2, [r2, #4]
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
  }

  return USBD_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	4611      	mov	r1, r2
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	4798      	blx	r3
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	78fa      	ldrb	r2, [r7, #3]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	4798      	blx	r3
  }

  return USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 ff59 	bl	800ac64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009dce:	f003 031f 	and.w	r3, r3, #31
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d01a      	beq.n	8009e0c <USBD_LL_SetupStage+0x72>
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d822      	bhi.n	8009e20 <USBD_LL_SetupStage+0x86>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <USBD_LL_SetupStage+0x4a>
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d00a      	beq.n	8009df8 <USBD_LL_SetupStage+0x5e>
 8009de2:	e01d      	b.n	8009e20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9ef 	bl	800a1d0 <USBD_StdDevReq>
 8009df2:	4603      	mov	r3, r0
 8009df4:	73fb      	strb	r3, [r7, #15]
      break;
 8009df6:	e020      	b.n	8009e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fa53 	bl	800a2ac <USBD_StdItfReq>
 8009e06:	4603      	mov	r3, r0
 8009e08:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0a:	e016      	b.n	8009e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fa92 	bl	800a33e <USBD_StdEPReq>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e1e:	e00c      	b.n	8009e3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 fb52 	bl	800b4d8 <USBD_LL_StallEP>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
      break;
 8009e38:	bf00      	nop
  }

  return ret;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e52:	7afb      	ldrb	r3, [r7, #11]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d138      	bne.n	8009eca <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009e5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d14a      	bne.n	8009f00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d913      	bls.n	8009e9e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	bf28      	it	cs
 8009e90:	4613      	movcs	r3, r2
 8009e92:	461a      	mov	r2, r3
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 ffd8 	bl	800ae4c <USBD_CtlContinueRx>
 8009e9c:	e030      	b.n	8009f00 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d10b      	bne.n	8009ec2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 ffd3 	bl	800ae6e <USBD_CtlSendStatus>
 8009ec8:	e01a      	b.n	8009f00 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d114      	bne.n	8009f00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00e      	beq.n	8009f00 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	7afa      	ldrb	r2, [r7, #11]
 8009eec:	4611      	mov	r1, r2
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	4798      	blx	r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	e000      	b.n	8009f02 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	460b      	mov	r3, r1
 8009f14:	607a      	str	r2, [r7, #4]
 8009f16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d16b      	bne.n	8009ff6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3314      	adds	r3, #20
 8009f22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d156      	bne.n	8009fdc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d914      	bls.n	8009f64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	1ad2      	subs	r2, r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6879      	ldr	r1, [r7, #4]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 ff4d 	bl	800adf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f56:	2300      	movs	r3, #0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f001 fb65 	bl	800b62c <USBD_LL_PrepareReceive>
 8009f62:	e03b      	b.n	8009fdc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d11c      	bne.n	8009faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d316      	bcc.n	8009faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d20f      	bcs.n	8009faa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 ff2e 	bl	800adf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f001 fb42 	bl	800b62c <USBD_LL_PrepareReceive>
 8009fa8:	e018      	b.n	8009fdc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d10b      	bne.n	8009fce <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fce:	2180      	movs	r1, #128	@ 0x80
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f001 fa81 	bl	800b4d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 ff5c 	bl	800ae94 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d122      	bne.n	800a02c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7ff fe98 	bl	8009d1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ff4:	e01a      	b.n	800a02c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d114      	bne.n	800a02c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00e      	beq.n	800a02c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	7afa      	ldrb	r2, [r7, #11]
 800a018:	4611      	mov	r1, r2
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	4798      	blx	r3
 800a01e:	4603      	mov	r3, r0
 800a020:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	e000      	b.n	800a02e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a066:	2303      	movs	r3, #3
 800a068:	e02f      	b.n	800a0ca <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00f      	beq.n	800a094 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d009      	beq.n	800a094 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	6852      	ldr	r2, [r2, #4]
 800a08c:	b2d2      	uxtb	r2, r2
 800a08e:	4611      	mov	r1, r2
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a094:	2340      	movs	r3, #64	@ 0x40
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 f9f6 	bl	800b48c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2240      	movs	r2, #64	@ 0x40
 800a0ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0b0:	2340      	movs	r3, #64	@ 0x40
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2180      	movs	r1, #128	@ 0x80
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f001 f9e8 	bl	800b48c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2240      	movs	r2, #64	@ 0x40
 800a0c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	78fa      	ldrb	r2, [r7, #3]
 800a0e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a100:	b2da      	uxtb	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2204      	movs	r2, #4
 800a10c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d106      	bne.n	800a140 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a160:	2303      	movs	r3, #3
 800a162:	e012      	b.n	800a18a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d10b      	bne.n	800a188 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d005      	beq.n	800a188 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a192:	b480      	push	{r7}
 800a194:	b087      	sub	sp, #28
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a1b0:	8a3b      	ldrh	r3, [r7, #16]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	b21a      	sxth	r2, r3
 800a1b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	b21b      	sxth	r3, r3
 800a1be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a1c0:	89fb      	ldrh	r3, [r7, #14]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a1e6:	2b40      	cmp	r3, #64	@ 0x40
 800a1e8:	d005      	beq.n	800a1f6 <USBD_StdDevReq+0x26>
 800a1ea:	2b40      	cmp	r3, #64	@ 0x40
 800a1ec:	d853      	bhi.n	800a296 <USBD_StdDevReq+0xc6>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00b      	beq.n	800a20a <USBD_StdDevReq+0x3a>
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	d14f      	bne.n	800a296 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	4798      	blx	r3
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]
      break;
 800a208:	e04a      	b.n	800a2a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	2b09      	cmp	r3, #9
 800a210:	d83b      	bhi.n	800a28a <USBD_StdDevReq+0xba>
 800a212:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <USBD_StdDevReq+0x48>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a26d 	.word	0x0800a26d
 800a21c:	0800a281 	.word	0x0800a281
 800a220:	0800a28b 	.word	0x0800a28b
 800a224:	0800a277 	.word	0x0800a277
 800a228:	0800a28b 	.word	0x0800a28b
 800a22c:	0800a24b 	.word	0x0800a24b
 800a230:	0800a241 	.word	0x0800a241
 800a234:	0800a28b 	.word	0x0800a28b
 800a238:	0800a263 	.word	0x0800a263
 800a23c:	0800a255 	.word	0x0800a255
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f9de 	bl	800a604 <USBD_GetDescriptor>
          break;
 800a248:	e024      	b.n	800a294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fb7f 	bl	800a950 <USBD_SetAddress>
          break;
 800a252:	e01f      	b.n	800a294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fbbe 	bl	800a9d8 <USBD_SetConfig>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]
          break;
 800a260:	e018      	b.n	800a294 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fc5d 	bl	800ab24 <USBD_GetConfig>
          break;
 800a26a:	e013      	b.n	800a294 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fc8e 	bl	800ab90 <USBD_GetStatus>
          break;
 800a274:	e00e      	b.n	800a294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fcbd 	bl	800abf8 <USBD_SetFeature>
          break;
 800a27e:	e009      	b.n	800a294 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fccc 	bl	800ac20 <USBD_ClrFeature>
          break;
 800a288:	e004      	b.n	800a294 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fd23 	bl	800acd8 <USBD_CtlError>
          break;
 800a292:	bf00      	nop
      }
      break;
 800a294:	e004      	b.n	800a2a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fd1d 	bl	800acd8 <USBD_CtlError>
      break;
 800a29e:	bf00      	nop
  }

  return ret;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop

0800a2ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2c2:	2b40      	cmp	r3, #64	@ 0x40
 800a2c4:	d005      	beq.n	800a2d2 <USBD_StdItfReq+0x26>
 800a2c6:	2b40      	cmp	r3, #64	@ 0x40
 800a2c8:	d82f      	bhi.n	800a32a <USBD_StdItfReq+0x7e>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <USBD_StdItfReq+0x26>
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	d12b      	bne.n	800a32a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d81d      	bhi.n	800a31c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	889b      	ldrh	r3, [r3, #4]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d813      	bhi.n	800a312 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	4798      	blx	r3
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	88db      	ldrh	r3, [r3, #6]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d110      	bne.n	800a326 <USBD_StdItfReq+0x7a>
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10d      	bne.n	800a326 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fdaf 	bl	800ae6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a310:	e009      	b.n	800a326 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fcdf 	bl	800acd8 <USBD_CtlError>
          break;
 800a31a:	e004      	b.n	800a326 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fcda 	bl	800acd8 <USBD_CtlError>
          break;
 800a324:	e000      	b.n	800a328 <USBD_StdItfReq+0x7c>
          break;
 800a326:	bf00      	nop
      }
      break;
 800a328:	e004      	b.n	800a334 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fcd3 	bl	800acd8 <USBD_CtlError>
      break;
 800a332:	bf00      	nop
  }

  return ret;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	889b      	ldrh	r3, [r3, #4]
 800a350:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a35a:	2b40      	cmp	r3, #64	@ 0x40
 800a35c:	d007      	beq.n	800a36e <USBD_StdEPReq+0x30>
 800a35e:	2b40      	cmp	r3, #64	@ 0x40
 800a360:	f200 8145 	bhi.w	800a5ee <USBD_StdEPReq+0x2b0>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00c      	beq.n	800a382 <USBD_StdEPReq+0x44>
 800a368:	2b20      	cmp	r3, #32
 800a36a:	f040 8140 	bne.w	800a5ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	4798      	blx	r3
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]
      break;
 800a380:	e13a      	b.n	800a5f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	2b03      	cmp	r3, #3
 800a388:	d007      	beq.n	800a39a <USBD_StdEPReq+0x5c>
 800a38a:	2b03      	cmp	r3, #3
 800a38c:	f300 8129 	bgt.w	800a5e2 <USBD_StdEPReq+0x2a4>
 800a390:	2b00      	cmp	r3, #0
 800a392:	d07f      	beq.n	800a494 <USBD_StdEPReq+0x156>
 800a394:	2b01      	cmp	r3, #1
 800a396:	d03c      	beq.n	800a412 <USBD_StdEPReq+0xd4>
 800a398:	e123      	b.n	800a5e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d002      	beq.n	800a3ac <USBD_StdEPReq+0x6e>
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d016      	beq.n	800a3d8 <USBD_StdEPReq+0x9a>
 800a3aa:	e02c      	b.n	800a406 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00d      	beq.n	800a3ce <USBD_StdEPReq+0x90>
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b80      	cmp	r3, #128	@ 0x80
 800a3b6:	d00a      	beq.n	800a3ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 f88b 	bl	800b4d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3c2:	2180      	movs	r1, #128	@ 0x80
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 f887 	bl	800b4d8 <USBD_LL_StallEP>
 800a3ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3cc:	e020      	b.n	800a410 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fc81 	bl	800acd8 <USBD_CtlError>
              break;
 800a3d6:	e01b      	b.n	800a410 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	885b      	ldrh	r3, [r3, #2]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10e      	bne.n	800a3fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00b      	beq.n	800a3fe <USBD_StdEPReq+0xc0>
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	2b80      	cmp	r3, #128	@ 0x80
 800a3ea:	d008      	beq.n	800a3fe <USBD_StdEPReq+0xc0>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	88db      	ldrh	r3, [r3, #6]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d104      	bne.n	800a3fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f001 f86d 	bl	800b4d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fd35 	bl	800ae6e <USBD_CtlSendStatus>

              break;
 800a404:	e004      	b.n	800a410 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fc65 	bl	800acd8 <USBD_CtlError>
              break;
 800a40e:	bf00      	nop
          }
          break;
 800a410:	e0ec      	b.n	800a5ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d002      	beq.n	800a424 <USBD_StdEPReq+0xe6>
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d016      	beq.n	800a450 <USBD_StdEPReq+0x112>
 800a422:	e030      	b.n	800a486 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00d      	beq.n	800a446 <USBD_StdEPReq+0x108>
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	2b80      	cmp	r3, #128	@ 0x80
 800a42e:	d00a      	beq.n	800a446 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f84f 	bl	800b4d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a43a:	2180      	movs	r1, #128	@ 0x80
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f001 f84b 	bl	800b4d8 <USBD_LL_StallEP>
 800a442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a444:	e025      	b.n	800a492 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fc45 	bl	800acd8 <USBD_CtlError>
              break;
 800a44e:	e020      	b.n	800a492 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d11b      	bne.n	800a490 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 f855 	bl	800b516 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fcfe 	bl	800ae6e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	6839      	ldr	r1, [r7, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	4798      	blx	r3
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a484:	e004      	b.n	800a490 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fc25 	bl	800acd8 <USBD_CtlError>
              break;
 800a48e:	e000      	b.n	800a492 <USBD_StdEPReq+0x154>
              break;
 800a490:	bf00      	nop
          }
          break;
 800a492:	e0ab      	b.n	800a5ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d002      	beq.n	800a4a6 <USBD_StdEPReq+0x168>
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d032      	beq.n	800a50a <USBD_StdEPReq+0x1cc>
 800a4a4:	e097      	b.n	800a5d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d007      	beq.n	800a4bc <USBD_StdEPReq+0x17e>
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b80      	cmp	r3, #128	@ 0x80
 800a4b0:	d004      	beq.n	800a4bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fc0f 	bl	800acd8 <USBD_CtlError>
                break;
 800a4ba:	e091      	b.n	800a5e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	da0b      	bge.n	800a4dc <USBD_StdEPReq+0x19e>
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
 800a4c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	3310      	adds	r3, #16
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	3304      	adds	r3, #4
 800a4da:	e00b      	b.n	800a4f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2202      	movs	r2, #2
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fc59 	bl	800adba <USBD_CtlSendData>
              break;
 800a508:	e06a      	b.n	800a5e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a50a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	da11      	bge.n	800a536 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	f003 020f 	and.w	r2, r3, #15
 800a518:	6879      	ldr	r1, [r7, #4]
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	440b      	add	r3, r1
 800a524:	3324      	adds	r3, #36	@ 0x24
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d117      	bne.n	800a55c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fbd2 	bl	800acd8 <USBD_CtlError>
                  break;
 800a534:	e054      	b.n	800a5e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	f003 020f 	and.w	r2, r3, #15
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	4613      	mov	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	440b      	add	r3, r1
 800a548:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d104      	bne.n	800a55c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fbbf 	bl	800acd8 <USBD_CtlError>
                  break;
 800a55a:	e041      	b.n	800a5e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a55c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a560:	2b00      	cmp	r3, #0
 800a562:	da0b      	bge.n	800a57c <USBD_StdEPReq+0x23e>
 800a564:	7bbb      	ldrb	r3, [r7, #14]
 800a566:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a56a:	4613      	mov	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	3310      	adds	r3, #16
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	4413      	add	r3, r2
 800a578:	3304      	adds	r3, #4
 800a57a:	e00b      	b.n	800a594 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a582:	4613      	mov	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4413      	add	r3, r2
 800a592:	3304      	adds	r3, #4
 800a594:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <USBD_StdEPReq+0x264>
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	2b80      	cmp	r3, #128	@ 0x80
 800a5a0:	d103      	bne.n	800a5aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	e00e      	b.n	800a5c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 ffd0 	bl	800b554 <USBD_LL_IsStallEP>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	e002      	b.n	800a5c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fbf3 	bl	800adba <USBD_CtlSendData>
              break;
 800a5d4:	e004      	b.n	800a5e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fb7d 	bl	800acd8 <USBD_CtlError>
              break;
 800a5de:	bf00      	nop
          }
          break;
 800a5e0:	e004      	b.n	800a5ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fb77 	bl	800acd8 <USBD_CtlError>
          break;
 800a5ea:	bf00      	nop
      }
      break;
 800a5ec:	e004      	b.n	800a5f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fb71 	bl	800acd8 <USBD_CtlError>
      break;
 800a5f6:	bf00      	nop
  }

  return ret;
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a612:	2300      	movs	r3, #0
 800a614:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	885b      	ldrh	r3, [r3, #2]
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	b29b      	uxth	r3, r3
 800a622:	3b01      	subs	r3, #1
 800a624:	2b0e      	cmp	r3, #14
 800a626:	f200 8165 	bhi.w	800a8f4 <USBD_GetDescriptor+0x2f0>
 800a62a:	a201      	add	r2, pc, #4	@ (adr r2, 800a630 <USBD_GetDescriptor+0x2c>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a6a1 	.word	0x0800a6a1
 800a634:	0800a6b9 	.word	0x0800a6b9
 800a638:	0800a6f9 	.word	0x0800a6f9
 800a63c:	0800a8f5 	.word	0x0800a8f5
 800a640:	0800a8f5 	.word	0x0800a8f5
 800a644:	0800a895 	.word	0x0800a895
 800a648:	0800a8c1 	.word	0x0800a8c1
 800a64c:	0800a8f5 	.word	0x0800a8f5
 800a650:	0800a8f5 	.word	0x0800a8f5
 800a654:	0800a8f5 	.word	0x0800a8f5
 800a658:	0800a8f5 	.word	0x0800a8f5
 800a65c:	0800a8f5 	.word	0x0800a8f5
 800a660:	0800a8f5 	.word	0x0800a8f5
 800a664:	0800a8f5 	.word	0x0800a8f5
 800a668:	0800a66d 	.word	0x0800a66d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00b      	beq.n	800a690 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	7c12      	ldrb	r2, [r2, #16]
 800a684:	f107 0108 	add.w	r1, r7, #8
 800a688:	4610      	mov	r0, r2
 800a68a:	4798      	blx	r3
 800a68c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a68e:	e139      	b.n	800a904 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fb20 	bl	800acd8 <USBD_CtlError>
        err++;
 800a698:	7afb      	ldrb	r3, [r7, #11]
 800a69a:	3301      	adds	r3, #1
 800a69c:	72fb      	strb	r3, [r7, #11]
      break;
 800a69e:	e131      	b.n	800a904 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	7c12      	ldrb	r2, [r2, #16]
 800a6ac:	f107 0108 	add.w	r1, r7, #8
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
 800a6b4:	60f8      	str	r0, [r7, #12]
      break;
 800a6b6:	e125      	b.n	800a904 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	7c1b      	ldrb	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10d      	bne.n	800a6dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c8:	f107 0208 	add.w	r2, r7, #8
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6da:	e113      	b.n	800a904 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	f107 0208 	add.w	r2, r7, #8
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	701a      	strb	r2, [r3, #0]
      break;
 800a6f6:	e105      	b.n	800a904 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	885b      	ldrh	r3, [r3, #2]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b05      	cmp	r3, #5
 800a700:	f200 80ac 	bhi.w	800a85c <USBD_GetDescriptor+0x258>
 800a704:	a201      	add	r2, pc, #4	@ (adr r2, 800a70c <USBD_GetDescriptor+0x108>)
 800a706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70a:	bf00      	nop
 800a70c:	0800a725 	.word	0x0800a725
 800a710:	0800a759 	.word	0x0800a759
 800a714:	0800a78d 	.word	0x0800a78d
 800a718:	0800a7c1 	.word	0x0800a7c1
 800a71c:	0800a7f5 	.word	0x0800a7f5
 800a720:	0800a829 	.word	0x0800a829
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00b      	beq.n	800a748 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	7c12      	ldrb	r2, [r2, #16]
 800a73c:	f107 0108 	add.w	r1, r7, #8
 800a740:	4610      	mov	r0, r2
 800a742:	4798      	blx	r3
 800a744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a746:	e0a4      	b.n	800a892 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fac4 	bl	800acd8 <USBD_CtlError>
            err++;
 800a750:	7afb      	ldrb	r3, [r7, #11]
 800a752:	3301      	adds	r3, #1
 800a754:	72fb      	strb	r3, [r7, #11]
          break;
 800a756:	e09c      	b.n	800a892 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	7c12      	ldrb	r2, [r2, #16]
 800a770:	f107 0108 	add.w	r1, r7, #8
 800a774:	4610      	mov	r0, r2
 800a776:	4798      	blx	r3
 800a778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a77a:	e08a      	b.n	800a892 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 faaa 	bl	800acd8 <USBD_CtlError>
            err++;
 800a784:	7afb      	ldrb	r3, [r7, #11]
 800a786:	3301      	adds	r3, #1
 800a788:	72fb      	strb	r3, [r7, #11]
          break;
 800a78a:	e082      	b.n	800a892 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00b      	beq.n	800a7b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	7c12      	ldrb	r2, [r2, #16]
 800a7a4:	f107 0108 	add.w	r1, r7, #8
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	4798      	blx	r3
 800a7ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7ae:	e070      	b.n	800a892 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fa90 	bl	800acd8 <USBD_CtlError>
            err++;
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a7be:	e068      	b.n	800a892 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00b      	beq.n	800a7e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	7c12      	ldrb	r2, [r2, #16]
 800a7d8:	f107 0108 	add.w	r1, r7, #8
 800a7dc:	4610      	mov	r0, r2
 800a7de:	4798      	blx	r3
 800a7e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e2:	e056      	b.n	800a892 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa76 	bl	800acd8 <USBD_CtlError>
            err++;
 800a7ec:	7afb      	ldrb	r3, [r7, #11]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7f2:	e04e      	b.n	800a892 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00b      	beq.n	800a818 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	7c12      	ldrb	r2, [r2, #16]
 800a80c:	f107 0108 	add.w	r1, r7, #8
 800a810:	4610      	mov	r0, r2
 800a812:	4798      	blx	r3
 800a814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a816:	e03c      	b.n	800a892 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa5c 	bl	800acd8 <USBD_CtlError>
            err++;
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	3301      	adds	r3, #1
 800a824:	72fb      	strb	r3, [r7, #11]
          break;
 800a826:	e034      	b.n	800a892 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00b      	beq.n	800a84c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	7c12      	ldrb	r2, [r2, #16]
 800a840:	f107 0108 	add.w	r1, r7, #8
 800a844:	4610      	mov	r0, r2
 800a846:	4798      	blx	r3
 800a848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a84a:	e022      	b.n	800a892 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa42 	bl	800acd8 <USBD_CtlError>
            err++;
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	3301      	adds	r3, #1
 800a858:	72fb      	strb	r3, [r7, #11]
          break;
 800a85a:	e01a      	b.n	800a892 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00c      	beq.n	800a882 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	8852      	ldrh	r2, [r2, #2]
 800a874:	b2d1      	uxtb	r1, r2
 800a876:	f107 0208 	add.w	r2, r7, #8
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
 800a87e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800a880:	e006      	b.n	800a890 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fa27 	bl	800acd8 <USBD_CtlError>
            err++;
 800a88a:	7afb      	ldrb	r3, [r7, #11]
 800a88c:	3301      	adds	r3, #1
 800a88e:	72fb      	strb	r3, [r7, #11]
          break;
 800a890:	bf00      	nop
      }
      break;
 800a892:	e037      	b.n	800a904 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7c1b      	ldrb	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d109      	bne.n	800a8b0 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a4:	f107 0208 	add.w	r2, r7, #8
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8ae:	e029      	b.n	800a904 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fa10 	bl	800acd8 <USBD_CtlError>
        err++;
 800a8b8:	7afb      	ldrb	r3, [r7, #11]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	72fb      	strb	r3, [r7, #11]
      break;
 800a8be:	e021      	b.n	800a904 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	7c1b      	ldrb	r3, [r3, #16]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10d      	bne.n	800a8e4 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d0:	f107 0208 	add.w	r2, r7, #8
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	2207      	movs	r2, #7
 800a8e0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8e2:	e00f      	b.n	800a904 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f9f6 	bl	800acd8 <USBD_CtlError>
        err++;
 800a8ec:	7afb      	ldrb	r3, [r7, #11]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f2:	e007      	b.n	800a904 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f9ee 	bl	800acd8 <USBD_CtlError>
      err++;
 800a8fc:	7afb      	ldrb	r3, [r7, #11]
 800a8fe:	3301      	adds	r3, #1
 800a900:	72fb      	strb	r3, [r7, #11]
      break;
 800a902:	bf00      	nop
  }

  if (err != 0U)
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d11e      	bne.n	800a948 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	88db      	ldrh	r3, [r3, #6]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d016      	beq.n	800a940 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 800a912:	893b      	ldrh	r3, [r7, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00e      	beq.n	800a936 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	88da      	ldrh	r2, [r3, #6]
 800a91c:	893b      	ldrh	r3, [r7, #8]
 800a91e:	4293      	cmp	r3, r2
 800a920:	bf28      	it	cs
 800a922:	4613      	movcs	r3, r2
 800a924:	b29b      	uxth	r3, r3
 800a926:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a928:	893b      	ldrh	r3, [r7, #8]
 800a92a:	461a      	mov	r2, r3
 800a92c:	68f9      	ldr	r1, [r7, #12]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa43 	bl	800adba <USBD_CtlSendData>
 800a934:	e009      	b.n	800a94a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f9cd 	bl	800acd8 <USBD_CtlError>
 800a93e:	e004      	b.n	800a94a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa94 	bl	800ae6e <USBD_CtlSendStatus>
 800a946:	e000      	b.n	800a94a <USBD_GetDescriptor+0x346>
    return;
 800a948:	bf00      	nop
  }
}
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	889b      	ldrh	r3, [r3, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d131      	bne.n	800a9c6 <USBD_SetAddress+0x76>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	88db      	ldrh	r3, [r3, #6]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d12d      	bne.n	800a9c6 <USBD_SetAddress+0x76>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	885b      	ldrh	r3, [r3, #2]
 800a96e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a970:	d829      	bhi.n	800a9c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	885b      	ldrh	r3, [r3, #2]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a97c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b03      	cmp	r3, #3
 800a988:	d104      	bne.n	800a994 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f9a3 	bl	800acd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a992:	e01d      	b.n	800a9d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	7bfa      	ldrb	r2, [r7, #15]
 800a998:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fe03 	bl	800b5ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa61 	bl	800ae6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ba:	e009      	b.n	800a9d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c4:	e004      	b.n	800a9d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f985 	bl	800acd8 <USBD_CtlError>
  }
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	4b4c      	ldr	r3, [pc, #304]	@ (800ab20 <USBD_SetConfig+0x148>)
 800a9ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9f0:	4b4b      	ldr	r3, [pc, #300]	@ (800ab20 <USBD_SetConfig+0x148>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d905      	bls.n	800aa04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f96c 	bl	800acd8 <USBD_CtlError>
    return USBD_FAIL;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e088      	b.n	800ab16 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d002      	beq.n	800aa16 <USBD_SetConfig+0x3e>
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d025      	beq.n	800aa60 <USBD_SetConfig+0x88>
 800aa14:	e071      	b.n	800aafa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa16:	4b42      	ldr	r3, [pc, #264]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01c      	beq.n	800aa58 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aa1e:	4b40      	ldr	r3, [pc, #256]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa28:	4b3d      	ldr	r3, [pc, #244]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff f97f 	bl	8009d32 <USBD_SetClassConfig>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d004      	beq.n	800aa48 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f949 	bl	800acd8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa46:	e065      	b.n	800ab14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fa10 	bl	800ae6e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2203      	movs	r2, #3
 800aa52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa56:	e05d      	b.n	800ab14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fa08 	bl	800ae6e <USBD_CtlSendStatus>
      break;
 800aa5e:	e059      	b.n	800ab14 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa60:	4b2f      	ldr	r3, [pc, #188]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d112      	bne.n	800aa8e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800aa70:	4b2b      	ldr	r3, [pc, #172]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa7a:	4b29      	ldr	r3, [pc, #164]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff f972 	bl	8009d6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f9f1 	bl	800ae6e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa8c:	e042      	b.n	800ab14 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aa8e:	4b24      	ldr	r3, [pc, #144]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d02a      	beq.n	800aaf2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff f960 	bl	8009d6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aaaa:	4b1d      	ldr	r3, [pc, #116]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aab4:	4b1a      	ldr	r3, [pc, #104]	@ (800ab20 <USBD_SetConfig+0x148>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff f939 	bl	8009d32 <USBD_SetClassConfig>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00f      	beq.n	800aaea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f903 	bl	800acd8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff f945 	bl	8009d6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aae8:	e014      	b.n	800ab14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9bf 	bl	800ae6e <USBD_CtlSendStatus>
      break;
 800aaf0:	e010      	b.n	800ab14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f9bb 	bl	800ae6e <USBD_CtlSendStatus>
      break;
 800aaf8:	e00c      	b.n	800ab14 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f8eb 	bl	800acd8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab02:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <USBD_SetConfig+0x148>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff f92e 	bl	8009d6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	73fb      	strb	r3, [r7, #15]
      break;
 800ab12:	bf00      	nop
  }

  return ret;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	20000643 	.word	0x20000643

0800ab24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	88db      	ldrh	r3, [r3, #6]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d004      	beq.n	800ab40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f8cd 	bl	800acd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab3e:	e023      	b.n	800ab88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	dc02      	bgt.n	800ab52 <USBD_GetConfig+0x2e>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dc03      	bgt.n	800ab58 <USBD_GetConfig+0x34>
 800ab50:	e015      	b.n	800ab7e <USBD_GetConfig+0x5a>
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d00b      	beq.n	800ab6e <USBD_GetConfig+0x4a>
 800ab56:	e012      	b.n	800ab7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3308      	adds	r3, #8
 800ab62:	2201      	movs	r2, #1
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f927 	bl	800adba <USBD_CtlSendData>
        break;
 800ab6c:	e00c      	b.n	800ab88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3304      	adds	r3, #4
 800ab72:	2201      	movs	r2, #1
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f91f 	bl	800adba <USBD_CtlSendData>
        break;
 800ab7c:	e004      	b.n	800ab88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f8a9 	bl	800acd8 <USBD_CtlError>
        break;
 800ab86:	bf00      	nop
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d81e      	bhi.n	800abe6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	88db      	ldrh	r3, [r3, #6]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d004      	beq.n	800abba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f890 	bl	800acd8 <USBD_CtlError>
        break;
 800abb8:	e01a      	b.n	800abf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d005      	beq.n	800abd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	f043 0202 	orr.w	r2, r3, #2
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	330c      	adds	r3, #12
 800abda:	2202      	movs	r2, #2
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f8eb 	bl	800adba <USBD_CtlSendData>
      break;
 800abe4:	e004      	b.n	800abf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f875 	bl	800acd8 <USBD_CtlError>
      break;
 800abee:	bf00      	nop
  }
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	885b      	ldrh	r3, [r3, #2]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d106      	bne.n	800ac18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f92b 	bl	800ae6e <USBD_CtlSendStatus>
  }
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	3b01      	subs	r3, #1
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d80b      	bhi.n	800ac50 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	885b      	ldrh	r3, [r3, #2]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d10c      	bne.n	800ac5a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f910 	bl	800ae6e <USBD_CtlSendStatus>
      }
      break;
 800ac4e:	e004      	b.n	800ac5a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f840 	bl	800acd8 <USBD_CtlError>
      break;
 800ac58:	e000      	b.n	800ac5c <USBD_ClrFeature+0x3c>
      break;
 800ac5a:	bf00      	nop
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	781a      	ldrb	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7ff fa7f 	bl	800a192 <SWAPBYTE>
 800ac94:	4603      	mov	r3, r0
 800ac96:	461a      	mov	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3301      	adds	r3, #1
 800aca6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff fa72 	bl	800a192 <SWAPBYTE>
 800acae:	4603      	mov	r3, r0
 800acb0:	461a      	mov	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3301      	adds	r3, #1
 800acba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	3301      	adds	r3, #1
 800acc0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7ff fa65 	bl	800a192 <SWAPBYTE>
 800acc8:	4603      	mov	r3, r0
 800acca:	461a      	mov	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	80da      	strh	r2, [r3, #6]
}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ace2:	2180      	movs	r1, #128	@ 0x80
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fbf7 	bl	800b4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800acea:	2100      	movs	r1, #0
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fbf3 	bl	800b4d8 <USBD_LL_StallEP>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b086      	sub	sp, #24
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d036      	beq.n	800ad7e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f000 f836 	bl	800ad86 <USBD_GetLen>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	7812      	ldrb	r2, [r2, #0]
 800ad32:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	3301      	adds	r3, #1
 800ad38:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	4413      	add	r3, r2
 800ad40:	2203      	movs	r2, #3
 800ad42:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	3301      	adds	r3, #1
 800ad48:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad4a:	e013      	b.n	800ad74 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	4413      	add	r3, r2
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	7812      	ldrb	r2, [r2, #0]
 800ad56:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	613b      	str	r3, [r7, #16]
    idx++;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
 800ad60:	3301      	adds	r3, #1
 800ad62:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	4413      	add	r3, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	3301      	adds	r3, #1
 800ad72:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1e7      	bne.n	800ad4c <USBD_GetString+0x52>
 800ad7c:	e000      	b.n	800ad80 <USBD_GetString+0x86>
    return;
 800ad7e:	bf00      	nop
  }
}
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad86:	b480      	push	{r7}
 800ad88:	b085      	sub	sp, #20
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad96:	e005      	b.n	800ada4 <USBD_GetLen+0x1e>
  {
    len++;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	3301      	adds	r3, #1
 800ada2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f5      	bne.n	800ad98 <USBD_GetLen+0x12>
  }

  return len;
 800adac:	7bfb      	ldrb	r3, [r7, #15]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2202      	movs	r2, #2
 800adca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	2100      	movs	r1, #0
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fc02 	bl	800b5ea <USBD_LL_Transmit>

  return USBD_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	2100      	movs	r1, #0
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 fbf1 	bl	800b5ea <USBD_LL_Transmit>

  return USBD_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2203      	movs	r2, #3
 800ae22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fbf5 	bl	800b62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 fbe4 	bl	800b62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2204      	movs	r2, #4
 800ae7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae7e:	2300      	movs	r3, #0
 800ae80:	2200      	movs	r2, #0
 800ae82:	2100      	movs	r1, #0
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fbb0 	bl	800b5ea <USBD_LL_Transmit>

  return USBD_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2205      	movs	r2, #5
 800aea0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea4:	2300      	movs	r3, #0
 800aea6:	2200      	movs	r2, #0
 800aea8:	2100      	movs	r1, #0
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fbbe 	bl	800b62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 800aec0:	2200      	movs	r2, #0
 800aec2:	4912      	ldr	r1, [pc, #72]	@ (800af0c <MX_USB_Device_Init+0x50>)
 800aec4:	4812      	ldr	r0, [pc, #72]	@ (800af10 <MX_USB_Device_Init+0x54>)
 800aec6:	f7fe feab 	bl	8009c20 <USBD_Init>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800aed0:	f7f5 ffd0 	bl	8000e74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 800aed4:	490f      	ldr	r1, [pc, #60]	@ (800af14 <MX_USB_Device_Init+0x58>)
 800aed6:	480e      	ldr	r0, [pc, #56]	@ (800af10 <MX_USB_Device_Init+0x54>)
 800aed8:	f7fe fed2 	bl	8009c80 <USBD_RegisterClass>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800aee2:	f7f5 ffc7 	bl	8000e74 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 800aee6:	490c      	ldr	r1, [pc, #48]	@ (800af18 <MX_USB_Device_Init+0x5c>)
 800aee8:	4809      	ldr	r0, [pc, #36]	@ (800af10 <MX_USB_Device_Init+0x54>)
 800aeea:	f7fe fb17 	bl	800951c <USBD_DFU_RegisterMedia>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800aef4:	f7f5 ffbe 	bl	8000e74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aef8:	4805      	ldr	r0, [pc, #20]	@ (800af10 <MX_USB_Device_Init+0x54>)
 800aefa:	f7fe fee8 	bl	8009cce <USBD_Start>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800af04:	f7f5 ffb6 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800af08:	bf00      	nop
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20000070 	.word	0x20000070
 800af10:	20000644 	.word	0x20000644
 800af14:	2000000c 	.word	0x2000000c
 800af18:	200000c4 	.word	0x200000c4

0800af1c <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	6039      	str	r1, [r7, #0]
 800af26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2212      	movs	r2, #18
 800af2c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 800af2e:	4b03      	ldr	r3, [pc, #12]	@ (800af3c <USBD_DFU_DeviceDescriptor+0x20>)
}
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20000090 	.word	0x20000090

0800af40 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	6039      	str	r1, [r7, #0]
 800af4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2204      	movs	r2, #4
 800af50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af52:	4b03      	ldr	r3, [pc, #12]	@ (800af60 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 800af54:	4618      	mov	r0, r3
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	200000a4 	.word	0x200000a4

0800af64 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	6039      	str	r1, [r7, #0]
 800af6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d105      	bne.n	800af82 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	4907      	ldr	r1, [pc, #28]	@ (800af98 <USBD_DFU_ProductStrDescriptor+0x34>)
 800af7a:	4808      	ldr	r0, [pc, #32]	@ (800af9c <USBD_DFU_ProductStrDescriptor+0x38>)
 800af7c:	f7ff febd 	bl	800acfa <USBD_GetString>
 800af80:	e004      	b.n	800af8c <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	4904      	ldr	r1, [pc, #16]	@ (800af98 <USBD_DFU_ProductStrDescriptor+0x34>)
 800af86:	4805      	ldr	r0, [pc, #20]	@ (800af9c <USBD_DFU_ProductStrDescriptor+0x38>)
 800af88:	f7ff feb7 	bl	800acfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800af8c:	4b02      	ldr	r3, [pc, #8]	@ (800af98 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20000914 	.word	0x20000914
 800af9c:	0800b7e0 	.word	0x0800b7e0

0800afa0 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	6039      	str	r1, [r7, #0]
 800afaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	4904      	ldr	r1, [pc, #16]	@ (800afc0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 800afb0:	4804      	ldr	r0, [pc, #16]	@ (800afc4 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 800afb2:	f7ff fea2 	bl	800acfa <USBD_GetString>
  return USBD_StrDesc;
 800afb6:	4b02      	ldr	r3, [pc, #8]	@ (800afc0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	20000914 	.word	0x20000914
 800afc4:	0800b800 	.word	0x0800b800

0800afc8 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	6039      	str	r1, [r7, #0]
 800afd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	221a      	movs	r2, #26
 800afd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afda:	f000 f843 	bl	800b064 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800afde:	4b02      	ldr	r3, [pc, #8]	@ (800afe8 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	200000a8 	.word	0x200000a8

0800afec <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d105      	bne.n	800b00a <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	4907      	ldr	r1, [pc, #28]	@ (800b020 <USBD_DFU_ConfigStrDescriptor+0x34>)
 800b002:	4808      	ldr	r0, [pc, #32]	@ (800b024 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800b004:	f7ff fe79 	bl	800acfa <USBD_GetString>
 800b008:	e004      	b.n	800b014 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4904      	ldr	r1, [pc, #16]	@ (800b020 <USBD_DFU_ConfigStrDescriptor+0x34>)
 800b00e:	4805      	ldr	r0, [pc, #20]	@ (800b024 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800b010:	f7ff fe73 	bl	800acfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b014:	4b02      	ldr	r3, [pc, #8]	@ (800b020 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20000914 	.word	0x20000914
 800b024:	0800b814 	.word	0x0800b814

0800b028 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	4603      	mov	r3, r0
 800b030:	6039      	str	r1, [r7, #0]
 800b032:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b034:	79fb      	ldrb	r3, [r7, #7]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d105      	bne.n	800b046 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	4907      	ldr	r1, [pc, #28]	@ (800b05c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800b03e:	4808      	ldr	r0, [pc, #32]	@ (800b060 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800b040:	f7ff fe5b 	bl	800acfa <USBD_GetString>
 800b044:	e004      	b.n	800b050 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	4904      	ldr	r1, [pc, #16]	@ (800b05c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800b04a:	4805      	ldr	r0, [pc, #20]	@ (800b060 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800b04c:	f7ff fe55 	bl	800acfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b050:	4b02      	ldr	r3, [pc, #8]	@ (800b05c <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 800b052:	4618      	mov	r0, r3
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000914 	.word	0x20000914
 800b060:	0800b820 	.word	0x0800b820

0800b064 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b06a:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a8 <Get_SerialNum+0x44>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b070:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <Get_SerialNum+0x48>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b076:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b0 <Get_SerialNum+0x4c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4413      	add	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b08a:	2208      	movs	r2, #8
 800b08c:	4909      	ldr	r1, [pc, #36]	@ (800b0b4 <Get_SerialNum+0x50>)
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 f814 	bl	800b0bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b094:	2204      	movs	r2, #4
 800b096:	4908      	ldr	r1, [pc, #32]	@ (800b0b8 <Get_SerialNum+0x54>)
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f000 f80f 	bl	800b0bc <IntToUnicode>
  }
}
 800b09e:	bf00      	nop
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	1fff7590 	.word	0x1fff7590
 800b0ac:	1fff7594 	.word	0x1fff7594
 800b0b0:	1fff7598 	.word	0x1fff7598
 800b0b4:	200000aa 	.word	0x200000aa
 800b0b8:	200000ba 	.word	0x200000ba

0800b0bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75fb      	strb	r3, [r7, #23]
 800b0d2:	e027      	b.n	800b124 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	0f1b      	lsrs	r3, r3, #28
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d80b      	bhi.n	800b0f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	0f1b      	lsrs	r3, r3, #28
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	440b      	add	r3, r1
 800b0ec:	3230      	adds	r2, #48	@ 0x30
 800b0ee:	b2d2      	uxtb	r2, r2
 800b0f0:	701a      	strb	r2, [r3, #0]
 800b0f2:	e00a      	b.n	800b10a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	0f1b      	lsrs	r3, r3, #28
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	4619      	mov	r1, r3
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	440b      	add	r3, r1
 800b104:	3237      	adds	r2, #55	@ 0x37
 800b106:	b2d2      	uxtb	r2, r2
 800b108:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	011b      	lsls	r3, r3, #4
 800b10e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	3301      	adds	r3, #1
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	4413      	add	r3, r2
 800b11a:	2200      	movs	r2, #0
 800b11c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
 800b120:	3301      	adds	r3, #1
 800b122:	75fb      	strb	r3, [r7, #23]
 800b124:	7dfa      	ldrb	r2, [r7, #23]
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d3d3      	bcc.n	800b0d4 <IntToUnicode+0x18>
  }
}
 800b12c:	bf00      	nop
 800b12e:	bf00      	nop
 800b130:	371c      	adds	r7, #28
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800b13a:	b480      	push	{r7}
 800b13c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800b13e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800b140:	4618      	mov	r0, r3
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800b14a:	b480      	push	{r7}
 800b14c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800b14e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800b150:	4618      	mov	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800b162:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800b17c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b085      	sub	sp, #20
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800b196:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b085      	sub	sp, #20
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	607a      	str	r2, [r7, #4]
 800b1b2:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800b1b4:	7afb      	ldrb	r3, [r7, #11]
 800b1b6:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800b1b8:	bf00      	nop
  }
  return (USBD_OK);
 800b1ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b098      	sub	sp, #96	@ 0x60
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b1d0:	f107 030c 	add.w	r3, r7, #12
 800b1d4:	2254      	movs	r2, #84	@ 0x54
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fac9 	bl	800b770 <memset>
  if(pcdHandle->Instance==USB)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	@ (800b238 <HAL_PCD_MspInit+0x70>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d122      	bne.n	800b22e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b1e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b1ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b1f2:	f107 030c 	add.w	r3, r7, #12
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fa fdc2 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b202:	f7f5 fe37 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b206:	4b0d      	ldr	r3, [pc, #52]	@ (800b23c <HAL_PCD_MspInit+0x74>)
 800b208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b20a:	4a0c      	ldr	r2, [pc, #48]	@ (800b23c <HAL_PCD_MspInit+0x74>)
 800b20c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b210:	6593      	str	r3, [r2, #88]	@ 0x58
 800b212:	4b0a      	ldr	r3, [pc, #40]	@ (800b23c <HAL_PCD_MspInit+0x74>)
 800b214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b21a:	60bb      	str	r3, [r7, #8]
 800b21c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b21e:	2200      	movs	r2, #0
 800b220:	2100      	movs	r1, #0
 800b222:	2014      	movs	r0, #20
 800b224:	f7f7 fd91 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b228:	2014      	movs	r0, #20
 800b22a:	f7f7 fda8 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b22e:	bf00      	nop
 800b230:	3760      	adds	r7, #96	@ 0x60
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	40005c00 	.word	0x40005c00
 800b23c:	40021000 	.word	0x40021000

0800b240 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fe fd9f 	bl	8009d9a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b276:	78fa      	ldrb	r2, [r7, #3]
 800b278:	6879      	ldr	r1, [r7, #4]
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	00db      	lsls	r3, r3, #3
 800b282:	440b      	add	r3, r1
 800b284:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	78fb      	ldrb	r3, [r7, #3]
 800b28c:	4619      	mov	r1, r3
 800b28e:	f7fe fdd9 	bl	8009e44 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b2ac:	78fa      	ldrb	r2, [r7, #3]
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	00db      	lsls	r3, r3, #3
 800b2b8:	440b      	add	r3, r1
 800b2ba:	3324      	adds	r3, #36	@ 0x24
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	f7fe fe22 	bl	8009f0a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fe ff36 	bl	800a14e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	795b      	ldrb	r3, [r3, #5]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d001      	beq.n	800b302 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2fe:	f7f5 fdb9 	bl	8000e74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b308:	7bfa      	ldrb	r2, [r7, #15]
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fee0 	bl	800a0d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe fe8c 	bl	800a036 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
	...

0800b328 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe fedb 	bl	800a0f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	7a5b      	ldrb	r3, [r3, #9]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d005      	beq.n	800b350 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b344:	4b04      	ldr	r3, [pc, #16]	@ (800b358 <HAL_PCD_SuspendCallback+0x30>)
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	4a03      	ldr	r2, [pc, #12]	@ (800b358 <HAL_PCD_SuspendCallback+0x30>)
 800b34a:	f043 0306 	orr.w	r3, r3, #6
 800b34e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	e000ed00 	.word	0xe000ed00

0800b35c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	7a5b      	ldrb	r3, [r3, #9]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d007      	beq.n	800b37c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b36c:	4b08      	ldr	r3, [pc, #32]	@ (800b390 <HAL_PCD_ResumeCallback+0x34>)
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	4a07      	ldr	r2, [pc, #28]	@ (800b390 <HAL_PCD_ResumeCallback+0x34>)
 800b372:	f023 0306 	bic.w	r3, r3, #6
 800b376:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b378:	f000 f9c8 	bl	800b70c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe fecb 	bl	800a11e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	e000ed00 	.word	0xe000ed00

0800b394 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b39c:	4a1e      	ldr	r2, [pc, #120]	@ (800b418 <USBD_LL_Init+0x84>)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a1c      	ldr	r2, [pc, #112]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3ae:	4a1b      	ldr	r2, [pc, #108]	@ (800b41c <USBD_LL_Init+0x88>)
 800b3b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b3b2:	4b19      	ldr	r3, [pc, #100]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b3b8:	4b17      	ldr	r3, [pc, #92]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b3be:	4b16      	ldr	r3, [pc, #88]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b3c4:	4b14      	ldr	r3, [pc, #80]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b3ca:	4b13      	ldr	r3, [pc, #76]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b3d0:	4b11      	ldr	r3, [pc, #68]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b3d6:	4b10      	ldr	r3, [pc, #64]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b3dc:	480e      	ldr	r0, [pc, #56]	@ (800b418 <USBD_LL_Init+0x84>)
 800b3de:	f7f8 f951 	bl	8003684 <HAL_PCD_Init>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b3e8:	f7f5 fd44 	bl	8000e74 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b3f2:	2318      	movs	r3, #24
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	f7f9 fdcc 	bl	8004f94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b402:	2358      	movs	r3, #88	@ 0x58
 800b404:	2200      	movs	r2, #0
 800b406:	2180      	movs	r1, #128	@ 0x80
 800b408:	f7f9 fdc4 	bl	8004f94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20000b14 	.word	0x20000b14
 800b41c:	40005c00 	.word	0x40005c00

0800b420 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b436:	4618      	mov	r0, r3
 800b438:	f7f8 f9f2 	bl	8003820 <HAL_PCD_Start>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f968 	bl	800b718 <USBD_Get_USB_Status>
 800b448:	4603      	mov	r3, r0
 800b44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7f8 f9f9 	bl	8003864 <HAL_PCD_Stop>
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 f94d 	bl	800b718 <USBD_Get_USB_Status>
 800b47e:	4603      	mov	r3, r0
 800b480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b482:	7bbb      	ldrb	r3, [r7, #14]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	4608      	mov	r0, r1
 800b496:	4611      	mov	r1, r2
 800b498:	461a      	mov	r2, r3
 800b49a:	4603      	mov	r3, r0
 800b49c:	70fb      	strb	r3, [r7, #3]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	70bb      	strb	r3, [r7, #2]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b4b4:	78bb      	ldrb	r3, [r7, #2]
 800b4b6:	883a      	ldrh	r2, [r7, #0]
 800b4b8:	78f9      	ldrb	r1, [r7, #3]
 800b4ba:	f7f8 fb40 	bl	8003b3e <HAL_PCD_EP_Open>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 f927 	bl	800b718 <USBD_Get_USB_Status>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7f8 fbe6 	bl	8003cc8 <HAL_PCD_EP_SetStall>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f908 	bl	800b718 <USBD_Get_USB_Status>
 800b508:	4603      	mov	r3, r0
 800b50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b530:	78fa      	ldrb	r2, [r7, #3]
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f7f8 fc19 	bl	8003d6c <HAL_PCD_EP_ClrStall>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	4618      	mov	r0, r3
 800b542:	f000 f8e9 	bl	800b718 <USBD_Get_USB_Status>
 800b546:	4603      	mov	r3, r0
 800b548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	da0b      	bge.n	800b588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	4613      	mov	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	440b      	add	r3, r1
 800b582:	3312      	adds	r3, #18
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	e00b      	b.n	800b5a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	440b      	add	r3, r1
 800b59a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b59e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b5c6:	78fa      	ldrb	r2, [r7, #3]
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7f8 fa93 	bl	8003af6 <HAL_PCD_SetAddress>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 f89e 	bl	800b718 <USBD_Get_USB_Status>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b086      	sub	sp, #24
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b608:	7af9      	ldrb	r1, [r7, #11]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	f7f8 fb24 	bl	8003c5a <HAL_PCD_EP_Transmit>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f87d 	bl	800b718 <USBD_Get_USB_Status>
 800b61e:	4603      	mov	r3, r0
 800b620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b622:	7dbb      	ldrb	r3, [r7, #22]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3718      	adds	r7, #24
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	460b      	mov	r3, r1
 800b63a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b64a:	7af9      	ldrb	r1, [r7, #11]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	f7f8 fad2 	bl	8003bf8 <HAL_PCD_EP_Receive>
 800b654:	4603      	mov	r3, r0
 800b656:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b658:	7dfb      	ldrb	r3, [r7, #23]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f85c 	bl	800b718 <USBD_Get_USB_Status>
 800b660:	4603      	mov	r3, r0
 800b662:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b664:	7dbb      	ldrb	r3, [r7, #22]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b67c:	78fb      	ldrb	r3, [r7, #3]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d002      	beq.n	800b688 <HAL_PCDEx_LPM_Callback+0x18>
 800b682:	2b01      	cmp	r3, #1
 800b684:	d013      	beq.n	800b6ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b686:	e023      	b.n	800b6d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7a5b      	ldrb	r3, [r3, #9]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b690:	f000 f83c 	bl	800b70c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b694:	4b10      	ldr	r3, [pc, #64]	@ (800b6d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	4a0f      	ldr	r2, [pc, #60]	@ (800b6d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b69a:	f023 0306 	bic.w	r3, r3, #6
 800b69e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fd39 	bl	800a11e <USBD_LL_Resume>
    break;
 800b6ac:	e010      	b.n	800b6d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fd1c 	bl	800a0f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	7a5b      	ldrb	r3, [r3, #9]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d005      	beq.n	800b6ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6c2:	4b05      	ldr	r3, [pc, #20]	@ (800b6d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	4a04      	ldr	r2, [pc, #16]	@ (800b6d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b6c8:	f043 0306 	orr.w	r3, r3, #6
 800b6cc:	6113      	str	r3, [r2, #16]
    break;
 800b6ce:	bf00      	nop
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	e000ed00 	.word	0xe000ed00

0800b6dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6e4:	4b03      	ldr	r3, [pc, #12]	@ (800b6f4 <USBD_static_malloc+0x18>)
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	20000df0 	.word	0x20000df0

0800b6f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b710:	f7f4 fde0 	bl	80002d4 <SystemClock_Config>
}
 800b714:	bf00      	nop
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d817      	bhi.n	800b75c <USBD_Get_USB_Status+0x44>
 800b72c:	a201      	add	r2, pc, #4	@ (adr r2, 800b734 <USBD_Get_USB_Status+0x1c>)
 800b72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b732:	bf00      	nop
 800b734:	0800b745 	.word	0x0800b745
 800b738:	0800b74b 	.word	0x0800b74b
 800b73c:	0800b751 	.word	0x0800b751
 800b740:	0800b757 	.word	0x0800b757
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	73fb      	strb	r3, [r7, #15]
    break;
 800b748:	e00b      	b.n	800b762 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b74a:	2303      	movs	r3, #3
 800b74c:	73fb      	strb	r3, [r7, #15]
    break;
 800b74e:	e008      	b.n	800b762 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b750:	2301      	movs	r3, #1
 800b752:	73fb      	strb	r3, [r7, #15]
    break;
 800b754:	e005      	b.n	800b762 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b756:	2303      	movs	r3, #3
 800b758:	73fb      	strb	r3, [r7, #15]
    break;
 800b75a:	e002      	b.n	800b762 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b75c:	2303      	movs	r3, #3
 800b75e:	73fb      	strb	r3, [r7, #15]
    break;
 800b760:	bf00      	nop
  }
  return usb_status;
 800b762:	7bfb      	ldrb	r3, [r7, #15]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <memset>:
 800b770:	4402      	add	r2, r0
 800b772:	4603      	mov	r3, r0
 800b774:	4293      	cmp	r3, r2
 800b776:	d100      	bne.n	800b77a <memset+0xa>
 800b778:	4770      	bx	lr
 800b77a:	f803 1b01 	strb.w	r1, [r3], #1
 800b77e:	e7f9      	b.n	800b774 <memset+0x4>

0800b780 <__libc_init_array>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	4d0d      	ldr	r5, [pc, #52]	@ (800b7b8 <__libc_init_array+0x38>)
 800b784:	4c0d      	ldr	r4, [pc, #52]	@ (800b7bc <__libc_init_array+0x3c>)
 800b786:	1b64      	subs	r4, r4, r5
 800b788:	10a4      	asrs	r4, r4, #2
 800b78a:	2600      	movs	r6, #0
 800b78c:	42a6      	cmp	r6, r4
 800b78e:	d109      	bne.n	800b7a4 <__libc_init_array+0x24>
 800b790:	4d0b      	ldr	r5, [pc, #44]	@ (800b7c0 <__libc_init_array+0x40>)
 800b792:	4c0c      	ldr	r4, [pc, #48]	@ (800b7c4 <__libc_init_array+0x44>)
 800b794:	f000 f818 	bl	800b7c8 <_init>
 800b798:	1b64      	subs	r4, r4, r5
 800b79a:	10a4      	asrs	r4, r4, #2
 800b79c:	2600      	movs	r6, #0
 800b79e:	42a6      	cmp	r6, r4
 800b7a0:	d105      	bne.n	800b7ae <__libc_init_array+0x2e>
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a8:	4798      	blx	r3
 800b7aa:	3601      	adds	r6, #1
 800b7ac:	e7ee      	b.n	800b78c <__libc_init_array+0xc>
 800b7ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b2:	4798      	blx	r3
 800b7b4:	3601      	adds	r6, #1
 800b7b6:	e7f2      	b.n	800b79e <__libc_init_array+0x1e>
 800b7b8:	0800b8a0 	.word	0x0800b8a0
 800b7bc:	0800b8a0 	.word	0x0800b8a0
 800b7c0:	0800b8a0 	.word	0x0800b8a0
 800b7c4:	0800b8a4 	.word	0x0800b8a4

0800b7c8 <_init>:
 800b7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ca:	bf00      	nop
 800b7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ce:	bc08      	pop	{r3}
 800b7d0:	469e      	mov	lr, r3
 800b7d2:	4770      	bx	lr

0800b7d4 <_fini>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	bf00      	nop
 800b7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7da:	bc08      	pop	{r3}
 800b7dc:	469e      	mov	lr, r3
 800b7de:	4770      	bx	lr
